{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":1417,\"hp\":39,\"max_hp\":39,\"strength\":307,\"defense\":292,\"dexterity\":398,\"agility\":243,\"charisma\":275,\"intelligence\":0,\"hacking_chance_mult\":1.554815033680318,\"hacking_speed_mult\":1.5470498274039841,\"hacking_money_mult\":2.598033178265111,\"hacking_grow_mult\":1.5558948246886517,\"hacking_exp\":65882072196.49543,\"strength_exp\":82645.98619708305,\"defense_exp\":80338.93273470587,\"dexterity_exp\":92409.32874981247,\"agility_exp\":80355.93804278235,\"charisma_exp\":96938.44377410444,\"intelligence_exp\":0,\"hacking_mult\":2.373049658051238,\"strength_mult\":1.8894786751018986,\"defense_mult\":1.807327428358338,\"dexterity_mult\":2.400582656716962,\"agility_mult\":1.50952915891293,\"charisma_mult\":1.6430249348712163,\"hacking_exp_mult\":4.386119121073361,\"strength_exp_mult\":1.8894786751018988,\"defense_exp_mult\":1.8894786751018988,\"dexterity_exp_mult\":2.1729004763671833,\"agility_exp_mult\":1.8894786751018988,\"charisma_exp_mult\":1.5745655625849158,\"company_rep_mult\":2.0784265426120885,\"faction_rep_mult\":1.5745655625849155,\"money\":575396258724932.4,\"city\":\"Chongqing\",\"location\":\"KuaiGong International\",\"jobs\":{\"KuaiGong International\":\"Senior Software Engineer\",\"Global Pharmaceuticals\":\"Software Engineering Intern\"},\"companyName\":\"KuaiGong International\",\"currentServer\":\"home\",\"purchasedServers\":[\"blank-0\",\"blank-1\",\"blank-2\",\"blank-3\",\"blank-4\",\"blank-5\",\"blank-6\",\"blank-7\",\"blank-8\",\"blank-9\",\"blank-10\",\"blank-11\",\"blank-12\",\"blank-13\",\"blank-14\",\"blank-15\",\"blank-16\",\"blank-17\",\"blank-18\",\"blank-19\",\"blank-20\",\"blank-21\",\"blank-22\",\"blank-23\",\"blank-24\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":317433.60000399326,\"ram\":64,\"totalMoneyGenerated\":9083777182.056953,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":317433.60000399326,\"ram\":64,\"totalMoneyGenerated\":9080657187.501106,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":317433.60000399326,\"ram\":64,\"totalMoneyGenerated\":9080181238.656712,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":317433.60000399326,\"ram\":64,\"totalMoneyGenerated\":9080119075.782452,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":317433.60000399326,\"ram\":64,\"totalMoneyGenerated\":9080021122.87534,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":317433.60000399326,\"ram\":64,\"totalMoneyGenerated\":9078872088.838066,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":317433.60000399326,\"ram\":64,\"totalMoneyGenerated\":9078774841.22317,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":317433.60000399326,\"ram\":64,\"totalMoneyGenerated\":9078662782.974918,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":317433.60000399326,\"ram\":64,\"totalMoneyGenerated\":9078581358.301851,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":316827.0000039584,\"ram\":64,\"totalMoneyGenerated\":9078082005.876835,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":315926.40000390745,\"ram\":64,\"totalMoneyGenerated\":9077137915.039543,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":315926.40000390745,\"ram\":64,\"totalMoneyGenerated\":9077060016.051037,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":315926.40000390745,\"ram\":64,\"totalMoneyGenerated\":9076895615.001352,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":315926.40000390745,\"ram\":64,\"totalMoneyGenerated\":9076563411.837708,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":315520.0000038859,\"ram\":64,\"totalMoneyGenerated\":9076436035.917522,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":315520.0000038859,\"ram\":64,\"totalMoneyGenerated\":9076252394.878796,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":315386.4000038785,\"ram\":64,\"totalMoneyGenerated\":9075380168.987772,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":315325.8000038751,\"ram\":64,\"totalMoneyGenerated\":9074410973.682417,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":315138.6000038663,\"ram\":64,\"totalMoneyGenerated\":9070713061.090815,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":314986.8000038643,\"ram\":64,\"totalMoneyGenerated\":9067383130.013218,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":314885.20000385883,\"ram\":64,\"totalMoneyGenerated\":9064875810.367836,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":314682.8000038551,\"ram\":64,\"totalMoneyGenerated\":9059880913.751442,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":314378.80000385764,\"ram\":64,\"totalMoneyGenerated\":9051405822.369175,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":314176.60000384675,\"ram\":64,\"totalMoneyGenerated\":9045584201.263412,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":313973.40000383585,\"ram\":64,\"totalMoneyGenerated\":9039733788.757523,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":313366.4000038023,\"ram\":64,\"totalMoneyGenerated\":9022257408.880188,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":312612.8000037636,\"ram\":64,\"totalMoneyGenerated\":9000560209.744171,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":309594.4000036219,\"ram\":64,\"totalMoneyGenerated\":8913656247.599695,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":305255.4000034096,\"ram\":64,\"totalMoneyGenerated\":8788730362.446846,\"name\":\"hacknet-node-28\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":304345.4000033634,\"ram\":64,\"totalMoneyGenerated\":8762530188.330908,\"name\":\"hacknet-node-29\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":296028.80000313686,\"ram\":64,\"totalMoneyGenerated\":8523083630.031319,\"name\":\"hacknet-node-30\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":293805.600003129,\"ram\":64,\"totalMoneyGenerated\":8459074589.268059,\"name\":\"hacknet-node-31\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":290370.200003115,\"ram\":64,\"totalMoneyGenerated\":8360164613.270367,\"name\":\"hacknet-node-32\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":285593.0000027759,\"ram\":64,\"totalMoneyGenerated\":8222622336.5816765,\"name\":\"hacknet-node-33\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":269347.4000019451,\"ram\":64,\"totalMoneyGenerated\":7754888766.672089,\"name\":\"hacknet-node-34\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":269347.4000019451,\"ram\":64,\"totalMoneyGenerated\":7754888766.672089,\"name\":\"hacknet-node-35\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":269347.4000019451,\"ram\":64,\"totalMoneyGenerated\":7754888766.672089,\"name\":\"hacknet-node-36\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":269159.00000194507,\"ram\":64,\"totalMoneyGenerated\":7749464466.888092,\"name\":\"hacknet-node-37\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":268793.800001949,\"ram\":64,\"totalMoneyGenerated\":7738949847.561575,\"name\":\"hacknet-node-38\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":232212.20000245265,\"ram\":64,\"totalMoneyGenerated\":6685714364.661673,\"name\":\"hacknet-node-39\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":226179.80000223577,\"ram\":64,\"totalMoneyGenerated\":6512033122.532938,\"name\":\"hacknet-node-40\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":215689.4000015675,\"ram\":64,\"totalMoneyGenerated\":6209999818.636278,\"name\":\"hacknet-node-41\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":152824.59999928362,\"ram\":64,\"totalMoneyGenerated\":4400034207.907619,\"name\":\"hacknet-node-42\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":153.9999999999998,\"ram\":64,\"totalMoneyGenerated\":4433875.619615221,\"name\":\"hacknet-node-43\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"Volhaven\",\"Tian Di Hui\",\"CyberSec\",\"NiteSec\",\"BitRunners\",\"The Black Hand\",\"KuaiGong International\",\"Slum Snakes\",\"Tetrads\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Photosynthetic Cells\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":23,\"name\":\"NeuroFlux Governor\"},{\"level\":24,\"name\":\"NeuroFlux Governor\"},{\"level\":25,\"name\":\"NeuroFlux Governor\"},{\"level\":26,\"name\":\"NeuroFlux Governor\"},{\"level\":27,\"name\":\"NeuroFlux Governor\"},{\"level\":28,\"name\":\"NeuroFlux Governor\"},{\"level\":29,\"name\":\"NeuroFlux Governor\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":22,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"}],\"sourceFiles\":[],\"numPeopleKilled\":8,\"karma\":-24.450000000000003,\"crime_money_mult\":2.353290922341586,\"crime_success_mult\":1.5558948246886517,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":10,\"workExpMult\":5,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.3691874457260136,\"hacknet_node_money_mult\":3.139290090403675,\"hacknet_node_purchase_cost_mult\":0.6132474009973701,\"hacknet_node_ram_cost_mult\":0.8016305895390458,\"hacknet_node_core_cost_mult\":0.8016305895390458,\"hacknet_node_level_cost_mult\":0.6813860011081889,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1640430999572,\"totalPlaytime\":646073600,\"playtimeSinceLastAug\":317735400,\"playtimeSinceLastBitnode\":646073600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-293040,\"codingcontract\":4050000000,\"corporation\":0,\"crime\":1002501.9329175157,\"gang\":0,\"hacking\":1417169290373263,\"hacknet\":367425417822.31055,\"hacknet_expenses\":-410948987381695.3,\"hospitalization\":-7500000,\"infiltration\":0,\"sleeves\":0,\"stock\":700206859845067.1,\"total\":575396257724932.4,\"work\":59853090.748676874,\"servers\":-2538961031782.8228,\"other\":-5315893809.8490095,\"augmentations\":-1128858155988022}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-52000,\"class\":-504048,\"codingcontract\":6412500000,\"corporation\":0,\"crime\":2707465.86623605,\"gang\":0,\"hacking\":1422201808893428.2,\"hacknet\":449722747429.2429,\"hacknet_expenses\":-411438042578989.7,\"hospitalization\":-7500000,\"infiltration\":0,\"sleeves\":0,\"stock\":700175659845067.1,\"total\":576101152416354.9,\"work\":73772366.10636832,\"servers\":-3526082026060.1147,\"other\":-16314593678.869669,\"augmentations\":-1131752080116006}},\"scriptProdSinceLastAug\":1594407926730309.8,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":4,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"75.6.5.8\",\"isConnectedTo\":true,\"maxRam\":65536,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"Formulas.exe\"],\"ramUsed\":25975.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[0.01],\"dataMap\":{},\"filename\":\"stockManager.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":48246.211,\"onlineExpGained\":0,\"onlineMoneyMade\":108672124311454,\"onlineRunningTime\":22397.8100000464,\"pid\":2,\"ramUsage\":21.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"zoomHacker.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":76979245.18178794,\"offlineMoneyMade\":0,\"offlineRunningTime\":48246.215000000004,\"onlineExpGained\":29110460.349928487,\"onlineMoneyMade\":8621862018,\"onlineRunningTime\":472.20999999998173,\"pid\":3,\"ramUsage\":10.25,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,81],\"dataMap\":{},\"filename\":\"workerWeaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":265,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":526}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",675.9828046159898,81],\"dataMap\":{},\"filename\":\"workerGrow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":266,\"ramUsage\":1.9,\"server\":\"home\",\"threads\":4042}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,82],\"dataMap\":{},\"filename\":\"workerWeaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":268,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":526}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",675.9828046159898,82],\"dataMap\":{},\"filename\":\"workerGrow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":269,\"ramUsage\":1.9,\"server\":\"home\",\"threads\":4042}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",2917.273127059812,82],\"dataMap\":{},\"filename\":\"workerHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":270,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":42}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,83],\"dataMap\":{},\"filename\":\"workerWeaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":271,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":526}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",675.9828046159898,83],\"dataMap\":{},\"filename\":\"workerGrow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":272,\"ramUsage\":1.9,\"server\":\"home\",\"threads\":4042}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",2917.273127059812,83],\"dataMap\":{},\"filename\":\"workerHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":273,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":42}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n    let url = 'http://localhost:3030/';\\r\\n    let tempFile = 'temp_files.txt';\\r\\n    await ns.wget(url, tempFile);\\r\\n\\r\\n    let filesString = ns.read(tempFile);\\r\\n    let files = JSON.parse(filesString);\\r\\n\\r\\n    if (files.includes(ns.args[0])) {\\r\\n        let fileUrl = url + files[0];\\r\\n        if (files[0].includes('/')) {\\r\\n            files[0] = '/' + files[0];\\r\\n        }\\r\\n\\r\\n        await ns.wget(fileUrl, files[0]);\\r\\n\\r\\n        for (let server of ns.getPurchasedServers()) {\\r\\n            await ns.scp(files[0], ns.getHostname(), server);\\r\\n        }\\r\\n    } else {\\r\\n        for (let file of files) {\\r\\n            let fileUrl = url + file;\\r\\n            if (file.includes('/')) {\\r\\n                file = '/' + file;\\r\\n            }\\r\\n\\r\\n            await ns.wget(fileUrl, file);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.rm(tempFile);\\r\\n}\\r\\n\",\"filename\":\"syncScripts.js\",\"url\":\"blob:file:///b32a0b73-089d-45a3-a93f-3d59f9c49a30\",\"module\":\"\",\"dependencies\":[{\"filename\":\"syncScripts.js\",\"url\":\"blob:file:///b32a0b73-089d-45a3-a93f-3d59f9c49a30\"}],\"ramUsage\":5.5,\"server\":\"home\",\"moduleSequenceNumber\":379}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerArray } from './scan.js';\\r\\nimport { Server, numberSquish } from './lib.js';\\r\\n\\r\\n/** @type {import(\\\".\\\").NS} ns */\\r\\nlet ns;\\r\\n\\r\\nlet hostName = '';\\r\\nlet purchasedServers = [];\\r\\n/** @type {Server[]} */\\r\\nlet servers = [];\\r\\n\\r\\nlet serverBudget = 0.1;\\r\\nlet hacknetBudget = 0.1;\\r\\nlet portLevel = 0;\\r\\n\\r\\nlet hackScript = 'workerHack.js';\\r\\nlet growScript = 'workerGrow.js';\\r\\nlet weakenScript = 'workerWeaken.js';\\r\\n\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n    ns.disableLog('ALL');\\r\\n    ns.enableLog('exec');\\r\\n    ns.clearPort(20);\\r\\n\\r\\n    hostName = ns.getHostname();\\r\\n\\r\\n    for (let server of await getServerArray(ns)) {\\r\\n        servers.push(new Server(server));\\r\\n    }\\r\\n    purchasedServers = ns.getPurchasedServers();\\r\\n\\r\\n    ns.tprint('Setup complete, GameManager is running. (Use the handler.js function to interact with the running process.)');\\r\\n    await nukeServers();\\r\\n\\r\\n    await ns.sleep(100);\\r\\n\\r\\n    ns.exec('stockManager.js', hostName, 1, 0.01);\\r\\n\\r\\n    let counter = 0;\\r\\n\\r\\n    //Main Loop\\r\\n    while (true) {\\r\\n        let command = '';\\r\\n        if ((command = ns.readPort(20)) != 'NULL PORT DATA') {\\r\\n            let parts = command.split(' ');\\r\\n            switch (parts[0]) {\\r\\n                case 'help':\\r\\n                    ns.tprint('do help      | Provides a list of commands and their uses.');\\r\\n                    ns.tprint('do contracts | Searches for contracts in the network and solves them.');\\r\\n                    ns.tprint('do hacknet   | Buys and upgrades hacknet nodes.');\\r\\n                    ns.tprint('do shutdown  | Stops the process.');\\r\\n                    break;\\r\\n                case 'contracts':\\r\\n                    let contracts = await manageContracts();\\r\\n                    if (contracts == 0) {\\r\\n                        ns.tprint('CONTRACTS: No contracts found.');\\r\\n                    }\\r\\n                    break;\\r\\n                case 'hacknet':\\r\\n                    await manageHacknet();\\r\\n                    break;\\r\\n                case 'scan':\\r\\n                    ns.exec('scan.js', hostName, 1, 'filter', ...servers.filter((s) => s.target).map((s) => s.name));\\r\\n                    break;\\r\\n                case 'shutdown':\\r\\n                    ns.tprint('Shutting down...');\\r\\n                    ns.exit();\\r\\n                    break;\\r\\n                default:\\r\\n                    ns.tprintf('Recieved unkown command: %s', command);\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (counter % 200 === 199) {\\r\\n            await addTargets();\\r\\n        }\\r\\n\\r\\n        if (counter % 1000 === 50) {\\r\\n            await manageServers();\\r\\n        }\\r\\n\\r\\n        if (counter % 1000 === 0) {\\r\\n            await manageHacknet();\\r\\n        }\\r\\n\\r\\n        if (counter % 10000 === 0) {\\r\\n            await manageContracts();\\r\\n        }\\r\\n\\r\\n        await ns.sleep(100);\\r\\n        counter = (counter + 1) % 10000;\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function manageServers() {\\r\\n    let ramSteps = 16;\\r\\n    let buyC = 0;\\r\\n    let upgradeC = 0;\\r\\n    purchasedServers = ns.getPurchasedServers();\\r\\n\\r\\n    for (let i = purchasedServers.length; i < ns.getPurchasedServerLimit(); i++) {\\r\\n        if (ns.getServerMoneyAvailable(hostName) * serverBudget < ns.getPurchasedServerCost(ramSteps)) {\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        purchasedServers.push(ns.purchaseServer('blank-' + i, ramSteps));\\r\\n        buyC++;\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < purchasedServers.length; i++) {\\r\\n        let currentRam = ns.getServerMaxRam(purchasedServers[i]);\\r\\n        if (currentRam * ramSteps > ns.getPurchasedServerMaxRam()) {\\r\\n            continue;\\r\\n        }\\r\\n        if (ns.getServerMoneyAvailable(hostName) * serverBudget < ns.getPurchasedServerCost(currentRam * ramSteps)) {\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        ns.killall(purchasedServers[i]);\\r\\n        ns.deleteServer(purchasedServers[i]);\\r\\n        ns.purchaseServer(purchasedServers[i], currentRam * ramSteps);\\r\\n        upgradeC++;\\r\\n    }\\r\\n\\r\\n    if (buyC) {\\r\\n        ns.tprintf('SERVER: Baught %i new Server(s).', buyC);\\r\\n    }\\r\\n    if (upgradeC) {\\r\\n        ns.tprintf('SERVER: Upgraded %i Server(s) (x16).', upgradeC);\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function manageHacknet() {\\r\\n    let levelUpgradeStep = 20;\\r\\n    let ramUpgradeStep = 1;\\r\\n    let coreUpgradeStep = 2;\\r\\n\\r\\n    let buyC = 0;\\r\\n    let upgradeC = 0;\\r\\n\\r\\n    for (let i = ns.hacknet.numNodes(); i < ns.hacknet.maxNumNodes(); i++) {\\r\\n        if (ns.getServerMoneyAvailable(hostName) * hacknetBudget < ns.hacknet.getPurchaseNodeCost()) {\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        ns.hacknet.purchaseNode();\\r\\n        buyC++;\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\r\\n        let partialUpgrade = 0;\\r\\n        while (ns.getServerMoneyAvailable(hostName) * hacknetBudget > ns.hacknet.getLevelUpgradeCost(i, levelUpgradeStep)) {\\r\\n            ns.hacknet.upgradeLevel(i, levelUpgradeStep);\\r\\n            partialUpgrade++;\\r\\n        }\\r\\n\\r\\n        while (ns.getServerMoneyAvailable(hostName) * hacknetBudget > ns.hacknet.getRamUpgradeCost(i, ramUpgradeStep)) {\\r\\n            ns.hacknet.upgradeRam(i, ramUpgradeStep);\\r\\n            partialUpgrade++;\\r\\n        }\\r\\n\\r\\n        while (ns.getServerMoneyAvailable(hostName) * hacknetBudget > ns.hacknet.getCoreUpgradeCost(i, coreUpgradeStep)) {\\r\\n            ns.hacknet.upgradeCore(i, coreUpgradeStep);\\r\\n            partialUpgrade++;\\r\\n        }\\r\\n\\r\\n        if (partialUpgrade) {\\r\\n            upgradeC++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (buyC) {\\r\\n        ns.tprintf('HACKNET: Baught %i new Hacknode(s).', buyC);\\r\\n    }\\r\\n    if (upgradeC) {\\r\\n        ns.tprintf('HACKNET: Upgraded %i Hacknode(s).', upgradeC);\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function manageContracts() {\\r\\n    let contracts = [];\\r\\n    for (let server of servers) {\\r\\n        for (let file of ns.ls(server.name, '.cct')) {\\r\\n            contracts.push({ file: file, server: server.name });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (contracts.length <= 0) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    ns.tprintf('Found %i contracts, starting the solvers...', contracts.length);\\r\\n\\r\\n    let solved = 0;\\r\\n\\r\\n    for (let contract of contracts) {\\r\\n        let contractType = ns.codingcontract.getContractType(contract.file, contract.server);\\r\\n        let script = '';\\r\\n        switch (contractType) {\\r\\n            case 'Subarray with Maximum Sum':\\r\\n                script = 'contract/subarrayWithMaximumSum.js';\\r\\n                break;\\r\\n            case 'Generate IP Addresses':\\r\\n                script = 'contract/generateIPAddresses.js';\\r\\n                break;\\r\\n            case 'Find All Valid Math Expressions':\\r\\n                script = 'contract/findAllValidMathExpressions.js';\\r\\n                break;\\r\\n            case 'Find Largest Prime Factor':\\r\\n                script = 'contract/findLargestPrimeFactor.js';\\r\\n                break;\\r\\n            case 'Algorithmic Stock Trader I':\\r\\n                script = 'contract/algorithmicStockTraderI.js';\\r\\n                break;\\r\\n            case 'Algorithmic Stock Trader II':\\r\\n                script = 'contract/algorithmicStockTraderII.js';\\r\\n                break;\\r\\n            case 'Algorithmic Stock Trader III':\\r\\n                script = 'contract/algorithmicStockTraderIII.js';\\r\\n                break;\\r\\n            case 'Algorithmic Stock Trader IV':\\r\\n                script = 'contract/algorithmicStockTraderIV.js';\\r\\n                break;\\r\\n            case 'Total Ways to Sum':\\r\\n                script = 'contract/totalWaysToSum.js';\\r\\n                break;\\r\\n            case 'Array Jumping Game':\\r\\n                script = 'contract/arrayJumpingGame.js';\\r\\n                break;\\r\\n            case 'Merge Overlapping Intervals':\\r\\n                script = 'contract/mergeOverlappingIntervals.js';\\r\\n                break;\\r\\n            case 'Unique Paths in a Grid I':\\r\\n                script = 'contract/uniquePathsInAGridI.js';\\r\\n                break;\\r\\n            case 'Unique Paths in a Grid II':\\r\\n                script = 'contract/uniquePathsInAGridII.js';\\r\\n                break;\\r\\n            case 'Sanitize Parentheses in Expression':\\r\\n                script = 'contract/sanitizeParenthesesInExpression.js';\\r\\n                break;\\r\\n            case 'Minimum Path Sum in a Triangle':\\r\\n                script = 'contract/minimumPathSumInATriangle.js';\\r\\n                break;\\r\\n            case 'Spiralize Matrix':\\r\\n                script = 'contract/spiralizeMatrix.js';\\r\\n                break;\\r\\n            default:\\r\\n                ns.tprintf('CONTRACTS: Found contract %s of type %s on %s', contract.file, contractType, contract.server);\\r\\n                ns.tprintf('CONTRACTS: %s', ns.codingcontract.getDescription(contract.file, contract.server));\\r\\n                ns.tprint('CONTRACTS: ' + '-'.repeat(40));\\r\\n                break;\\r\\n        }\\r\\n\\r\\n        if (script != '') {\\r\\n            if (ns.run(script, 1, contract.file, contract.server) > 0) solved++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.tprintf('CONTRACTS: Solved %i contracts, %i contracts remain unsolved.', solved, contracts.length - solved);\\r\\n    return contracts.length;\\r\\n}\\r\\n\\r\\nasync function nukeServers() {\\r\\n    let rootCounter = 0;\\r\\n    if (ns.fileExists('brutessh.exe')) portLevel = 1;\\r\\n    if (ns.fileExists('ftpcrack.exe')) portLevel = 2;\\r\\n    if (ns.fileExists('relaysmtp.exe')) portLevel = 3;\\r\\n    if (ns.fileExists('httpworm.exe')) portLevel = 4;\\r\\n    if (ns.fileExists('sqlinject.exe')) portLevel = 5;\\r\\n\\r\\n    for (let server of servers) {\\r\\n        if (!ns.hasRootAccess(server.name)) {\\r\\n            switch (ns.getServerNumPortsRequired(server.name)) {\\r\\n                case 5:\\r\\n                    if (portLevel < 5) continue;\\r\\n                    ns.sqlinject(server.name);\\r\\n                case 4:\\r\\n                    if (portLevel < 4) continue;\\r\\n                    ns.httpworm(server.name);\\r\\n                case 3:\\r\\n                    if (portLevel < 3) continue;\\r\\n                    ns.relaysmtp(server.name);\\r\\n                case 2:\\r\\n                    if (portLevel < 2) continue;\\r\\n                    ns.ftpcrack(server.name);\\r\\n                case 1:\\r\\n                    if (portLevel < 1) continue;\\r\\n                    ns.brutessh(server.name);\\r\\n                case 0:\\r\\n                    ns.nuke(server.name);\\r\\n                    break;\\r\\n                default:\\r\\n                    continue;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (ns.hasRootAccess(server.name)) {\\r\\n            if (!server.isHome()) {\\r\\n                ns.rm(hackScript, server.name);\\r\\n                ns.rm(growScript, server.name);\\r\\n                ns.rm(weakenScript, server.name);\\r\\n                await ns.scp([hackScript, growScript, weakenScript], hostName, server.name);\\r\\n            }\\r\\n            rootCounter++;\\r\\n            server.root = true;\\r\\n        }\\r\\n\\r\\n        if (purchasedServers.includes(server.name)) {\\r\\n            ns.rm('zoomerHacker.js', server.name);\\r\\n            await ns.scp('zoomHacker.js', hostName, server.name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.tprintf('NUKE: Nuked %i servers and installed the worker scripts.', rootCounter);\\r\\n}\\r\\n\",\"filename\":\"gameManager.js\",\"url\":\"blob:file:///b943c63b-90cc-4129-a1ab-86a5aa592042\",\"module\":{},\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:file:///0053dcea-d20b-4c6c-bbd8-797b1f194448\"},{\"filename\":\"scan.js\",\"url\":\"blob:file:///f6fdcba0-2a69-43da-ae63-b2d9ec94c169\"},{\"filename\":\"lib.js\",\"url\":\"blob:file:///22c8e9d1-cc3c-43fc-96d7-f7b58b0178d2\"},{\"filename\":\"gameManager.js\",\"url\":\"blob:file:///b943c63b-90cc-4129-a1ab-86a5aa592042\"}],\"ramUsage\":28.25,\"server\":\"home\",\"moduleSequenceNumber\":757}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree, numberSquish } from './lib.js';\\n\\n/**\\n * Async\\n * @param {import(\\\".\\\").NS} ns\\n */\\nexport async function getServerArray(ns) {\\n    let root = await getChildren(ns, 'home', '');\\n    return root.toStringArray();\\n}\\n\\n/**\\n * Async\\n * @param {import(\\\".\\\").NS} ns\\n */\\nexport async function getServerTree(ns) {\\n    return await getChildren(ns, 'home', '');\\n}\\n\\n/**\\n * @param {import(\\\".\\\").NS} ns\\n * @param {string} currentName\\n * @param {string} parentPath\\n */\\nasync function getChildren(ns, currentName, parentPath) {\\n    let children = await ns.scan(currentName);\\n    let path = parentPath + ' > ' + currentName;\\n\\n    let server = new ServerTree(currentName, [], path);\\n\\n    for (let child of children) {\\n        if (parentPath.split(' ').pop() === child) {\\n            continue;\\n        }\\n        server.children.push(await getChildren(ns, child, path));\\n    }\\n\\n    return server;\\n}\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let serverRoot = await getServerTree(ns);\\n\\n    if (!ns.args[0] || ns.args[0] === 'tree') {\\n        let maxIndent = serverRoot.maxDepth() + serverRoot.longestName();\\n        ns.tprint(maxIndent);\\n        ns.tprint(generateHeader(ns, maxIndent));\\n        printTree(ns, serverRoot, 0, maxIndent);\\n    } else {\\n        let nameIndent = serverRoot.longestName();\\n        let serverList = serverRoot.toArray();\\n\\n        switch (ns.args[0]) {\\n            case 'name':\\n                serverList.sort((a, b) => a.name - b.name);\\n                break;\\n            case 'skill':\\n                serverList.sort((a, b) => ns.getServerRequiredHackingLevel(a.name) - ns.getServerRequiredHackingLevel(b.name));\\n                break;\\n            case 'money':\\n                serverList.sort((a, b) => ns.getServerMoneyAvailable(a.name) - ns.getServerMoneyAvailable(b.name));\\n                break;\\n            case 'maxMoney':\\n                serverList.sort((a, b) => ns.getServerMaxMoney(a.name) - ns.getServerMaxMoney(b.name));\\n                break;\\n            case 'ram':\\n                serverList.sort((a, b) => ns.getServerMaxRam(a.name) - ns.getServerMaxRam(b.name));\\n                break;\\n            case 'maxRam':\\n                serverList.sort((a, b) => {\\n                    let freeRamA = ns.getServerMaxRam(a.name) - ns.getServerNumPortsRequired(a.name);\\n                    let freeRamB = ns.getServerMaxRam(b.name) - ns.getServerNumPortsRequired(b.name);\\n                    return freeRamA - freeRamB;\\n                });\\n                break;\\n            case 'security':\\n                serverList.sort((a, b) => {\\n                    let secA = ns.getServerSecurityLevel(a.name) - ns.getServerMinSecurityLevel(a.name);\\n                    let secB = ns.getServerSecurityLevel(b.name) - ns.getServerMinSecurityLevel(b.name);\\n                    return secA - secB;\\n                });\\n                break;\\n            case 'special':\\n                serverList = serverList.filter((s) => ns.getServerMaxMoney(s.name) === 0 && !s.name.includes('blank') && !s.isHome());\\n                break;\\n            case 'filter':\\n                if (ns.args.length < 2) {\\n                    ns.tprint('Missing argument.');\\n                }\\n                let searchTargets = ns.args.slice(1);\\n                serverList = serverList\\n                    .filter((s) => searchTargets.includes(s.name))\\n                    .sort((a, b) => ns.getServerMaxMoney(a.name) - ns.getServerMaxMoney(b.name));\\n                break;\\n            case 'search':\\n                if (ns.args.length < 2) {\\n                    ns.tprint('Missing argument.');\\n                }\\n                serverList = serverList.filter((s) => s.name.includes(ns.args[1]));\\n                break;\\n            default:\\n                ns.tprint('Unknown argument.');\\n                return;\\n        }\\n\\n        ns.tprint(generateHeader(ns, nameIndent));\\n        for (let server of serverList) {\\n            ns.tprint(stringifyServer(ns, server, 0, nameIndent));\\n        }\\n        switch (ns.args[0]) {\\n            case 'special':\\n            case 'search':\\n                if (ns.args[0] === 'special' || ns.args[0] === 'search') {\\n                    for (let server of serverList) {\\n                        ns.tprintf('Path to %s: %s', server.name.padEnd(13), server.path);\\n                    }\\n                }\\n                break;\\n            case 'filter':\\n                ns.tprintf('Total targets: %i', serverList.length);\\n                break;\\n            default:\\n                break;\\n        }\\n    }\\n}\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nfunction printTree(ns, root, depth, maxIndent) {\\n    ns.tprint(stringifyServer(ns, root, depth, maxIndent));\\n    for (const child of root.children) {\\n        printTree(ns, child, depth + 1, maxIndent);\\n    }\\n}\\n\\nlet spacing = [6, 13, 13, 11, 11, 8];\\n\\n/**\\n * @param {import(\\\".\\\").NS} ns\\n * @param {Number} spacingMod\\n */\\nfunction generateHeader(ns, nameSpacing) {\\n    let serverName = 'Server'.padEnd(nameSpacing);\\n    let hackingSkill = 'Skill'.padStart(spacing[0]);\\n    let moneyCurrent = 'Current Money'.padStart(spacing[1]);\\n    let moneyMax = 'Max Money'.padStart(spacing[2]);\\n    let ram = 'Current Ram'.padStart(spacing[3]);\\n    let ramMax = 'Max RAM'.padStart(spacing[4]);\\n    let security = 'Security'.padStart(spacing[5]);\\n    return ns.sprintf('| %s |%s | %s | %s | %s | %s | %s |', serverName, hackingSkill, moneyCurrent, moneyMax, ram, ramMax, security);\\n}\\n\\n/**\\n * @param {import(\\\".\\\").NS} ns\\n * @param {ServerTree} server\\n * @param {Number} indent\\n * @param {Number} nameSpacing\\n */\\nfunction stringifyServer(ns, server, indent, nameSpacing) {\\n    let serverName = (' '.repeat(indent) + server.name).padEnd(nameSpacing);\\n    let hackingSkill = ns.getServerRequiredHackingLevel(server.name).toLocaleString().padStart(spacing[0]);\\n    let moneyCurrent = numberSquish(ns.getServerMoneyAvailable(server.name)).padStart(spacing[1]);\\n    let moneyMax = numberSquish(ns.getServerMaxMoney(server.name)).padStart(spacing[2]);\\n    let ram = numberSquish(ns.getServerMaxRam(server.name) - ns.getServerUsedRam(server.name), true).padStart(spacing[3]);\\n    let ramMax = numberSquish(ns.getServerMaxRam(server.name), true).padStart(spacing[4]);\\n    let security = numberSquish(ns.getServerSecurityLevel(server.name) - ns.getServerMinSecurityLevel(server.name)).padStart(spacing[5]);\\n    return ns.sprintf('> %s |%s | %s | %s | %s | %s | %s |', serverName, hackingSkill, moneyCurrent, moneyMax, ram, ramMax, security);\\n}\\n\",\"filename\":\"scan.js\",\"url\":\"blob:file:///954414ab-9edb-42fb-9823-4366dfcefa35\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:file:///0c60b3e0-d38f-4d2e-b267-7f7a87cb7791\"},{\"filename\":\"scan.js\",\"url\":\"blob:file:///954414ab-9edb-42fb-9823-4366dfcefa35\"}],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":381}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\nasync function findServer(ns, current, parent, search) {\\n\\tif (current === search) {\\n\\t\\treturn current;\\n\\t}\\n\\tlet children = await ns.scan(current);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tlet childValue = await findServer(ns, child, current, search);\\n\\t\\tif (childValue != '') {\\n\\t\\t\\treturn current + '>' + childValue;\\n\\t\\t}\\n\\t}\\n\\treturn '';\\n}\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n\\tns.tprint(await findServer(ns, 'home', '', target));\\n}\",\"filename\":\"/old/serverSearch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":382}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"..\\\").NS} ns */\\nexport async function main(ns) {\\n\\tlet baseRam = 8;\\n\\tlet upgradeMultiplier = 32;\\n\\tlet hackRam = ns.getScriptRam('hack.js', hostName);\\n\\n    let servers = ns.getPurchasedServers();\\n\\tlet ramGoal = getLowestRam(servers) * upgradeMultiplier;\\n\\n\\tif (lowestRam == 0) {\\n\\t\\tlet baught = 0;\\n\\t\\tfor (let i = servers.length - 1; i < ns.getPurchasedServerLimit(); i++) {\\n\\t\\t\\tif (ns.getServerMoneyAvailable('home') > ns.getPurchasedServerCost(baseRam)) {\\n\\t\\t\\t\\tbaught++;\\n\\t\\t\\t\\tlet newServer = ns.purchaseServer(\\\"blank-\\\" + i, baseRam);\\n\\t\\t\\t\\tawait ns.scp('hack.js', newServer);\\n\\t\\t\\t\\tns.exec('hack.js', newServer, 3);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tns.tprint(`Baught ${baught} servers with ${baseRam}gb each. For a total of ${servers.length + baught}.`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tservers.filter((s) => ns.getServerMaxRam(s) <= ramGoal);\\n\\n\\tfor (let server of servers) {\\n\\t\\tlet upgraded = 0;\\n\\t\\tif (ns.getServerMoneyAvailable('home') > ns.getPurchasedServerCost(ramGoal)) {\\n\\t\\t\\tupgraded++;\\n\\t\\t\\tns.killall(server);\\n\\t\\t\\tns.deleteServer(server);\\n\\n\\t\\t\\tlet maxThreads = Math.floor(ramGoal / hackRam);\\n\\n\\t\\t\\tlet newServer = ns.purchaseServer(server, ramGoal);\\n\\t\\t\\tawait ns.scp('hack.js', newServer);\\n\\t\\t\\tns.exec('hack.js', newServer, maxThreads);\\n\\t\\t}\\n\\t\\tns.tprint(`Upgraded ${upgraded} Server to ${ramGoal}gb.`);\\n\\t}\\n}\\n\\n/** @param {String[]} servers */\\nfunction getLowestRam(servers) {\\n\\tif (servers.length < 25) {\\n\\t\\treturn 0;\\n\\t}\\n\\tlet ram = Number.POSITIVE_INFINITY;\\n\\tfor (let server of servers) {\\n\\t\\tif (ns.getPurchasedServerMaxRam(server) < ram) {\\n\\t\\t\\tram = ns.getPurchasedServerMaxRam(server);\\n\\t\\t}\\n\\t}\\n\\n\\treturn ram;\\n}\",\"filename\":\"/old/upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":11.35,\"server\":\"home\",\"moduleSequenceNumber\":383}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"blob:file:///de909112-db08-4690-aed6-e3de53f2eb44\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"blob:file:///de909112-db08-4690-aed6-e3de53f2eb44\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":384}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) \\nwhere the i-th element represents the stock price on day i:\\n\\n126,6,43,158,4,147,41,100,100,119,143,73,7,129,46,158,6,129,160,124,126,179,41,44,68,1,88\\n\\nDetermine the maximum possible profit you can earn using as many transactions as you'd like. \\nA transaction is defined as buying and then selling one share of the stock. \\nNote that you cannot engage in multiple transactions at once. \\nIn other words, you must sell the stock before you buy it again.\\n\\nIf no profit can be made, then the answer should be 0\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let iterations = Math.ceil(data.length / 2);\\n    let anwser = solve(iterations, data);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %j', anwser);\\n    }\\n}\\n\\n/**\\n * @param {Number[]} prices\\n * */\\nfunction solve(iterations, prices) {\\n    let highestProfits = [];\\n    for (let i = 0; i < iterations; i++) {\\n        highestProfits.push(new Array(prices.length).fill(0));\\n    }\\n\\n    for (let i = 0; i < iterations; i++) {\\n        for (let j = 0; j < prices.length; j++) {\\n            for (let k = j; k < prices.length; k++) {\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(\\n                        highestProfits[i][k],\\n                        highestProfits[i - 1][k],\\n                        highestProfits[i][k - 1],\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\n                    );\\n                } else if (i > 0 && j > 0) {\\n                    highestProfits[i][k] = Math.max(\\n                        highestProfits[i][k],\\n                        highestProfits[i - 1][k],\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\n                    );\\n                } else if (i > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i - 1][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\n                } else if (j > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\n                } else {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], prices[k] - prices[j]);\\n                }\\n            }\\n        }\\n    }\\n\\n    return highestProfits[iterations - 1][prices.length - 1];\\n}\\n\",\"filename\":\"/contract/algorithmicStockTraderII.js\",\"url\":\"blob:file:///ccf8d457-d2cf-45b9-8574-ffd524177549\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/algorithmicStockTraderII.js\",\"url\":\"blob:file:///ccf8d457-d2cf-45b9-8574-ffd524177549\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":385}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) \\nwhere the i-th element represents the stock price on day i:\\n\\n133,31,25,6,82,118,68,83,95,164,123,8,139,16,37,138,168,90,21,185,10,108,93,154,1,176,80,66,195,34,68,169,49,55\\n\\nDetermine the maximum possible profit you can earn using at most two transactions. \\nA transaction is defined as buying and then selling one share of the stock. \\nNote that you cannot engage in multiple transactions at once. \\nIn other words, you must sell the stock before you buy it again.\\n\\nIf no profit can be made, then the answer should be 0\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let iterations = 2;\\n    let anwser = solve(iterations, data);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %j', anwser);\\n    }\\n}\\n\\n/**\\n * @param {Number[]} prices\\n * */\\nfunction solve(iterations, prices) {\\n    let highestProfits = [];\\n    for (let i = 0; i < iterations; i++) {\\n        highestProfits.push(new Array(prices.length).fill(0));\\n    }\\n\\n    for (let i = 0; i < iterations; i++) {\\n        for (let j = 0; j < prices.length; j++) {\\n            for (let k = j; k < prices.length; k++) {\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(\\n                        highestProfits[i][k],\\n                        highestProfits[i - 1][k],\\n                        highestProfits[i][k - 1],\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\n                    );\\n                } else if (i > 0 && j > 0) {\\n                    highestProfits[i][k] = Math.max(\\n                        highestProfits[i][k],\\n                        highestProfits[i - 1][k],\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\n                    );\\n                } else if (i > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i - 1][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\n                } else if (j > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\n                } else {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], prices[k] - prices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfits[iterations - 1][prices.length - 1];\\n}\\n\",\"filename\":\"/contract/algorithmicStockTraderIII.js\",\"url\":\"blob:file:///33ea40a5-7355-4e87-8f64-253cdaa709dc\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/algorithmicStockTraderIII.js\",\"url\":\"blob:file:///33ea40a5-7355-4e87-8f64-253cdaa709dc\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":386}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of integers:\\n\\n0,10,0,0,0,4,7,9,7,7,1,6,5\\n\\nEach element in the array represents your MAXIMUM jump length at that position. \\nThis means that if you are at position i and your maximum jump length is n, \\nyou can jump to any position from i to i+n. \\n\\nAssuming you are initially positioned at the start of the array, \\ndetermine whether you are able to reach the last index exactly.\\n\\nYour answer should be submitted as 1 or 0, representing true and false respectively\\n*/\\n\\nlet anwser = 0;\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n\\n    jump(0, data);\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {Number} pos\\n * @param {Number[]} list\\n */\\nfunction jump(pos, list) {\\n    if (anwser) {\\n        return;\\n    }\\n    if (list[pos] == 0) {\\n        return;\\n    }\\n\\n    let maxJumpI = pos + list[pos];\\n    if (maxJumpI >= list.length - 1) {\\n        anwser = 1;\\n        return;\\n    }\\n\\n    for (let i = pos + 1; i <= maxJumpI; i++) {\\n        jump(i, list);\\n    }\\n}\\n\",\"filename\":\"/contract/arrayJumpingGame.js\",\"url\":\"blob:file:///d0c802bc-be77-4d24-b922-536c2383cae6\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/arrayJumpingGame.js\",\"url\":\"blob:file:///d0c802bc-be77-4d24-b922-536c2383cae6\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":387}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following string which contains only digits between 0 and 9:\\n\\n50020067805\\n\\nYou are also given a target number of 45. Return all possible ways you can add the +, -, and * operators to the string such that it evaluates to the target number.\\n\\nThe provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\n\\n[\\\"50020067805\\\", 45]\\n\\nNOTE: Numbers in the expression cannot have leading 0's. In other words, \\\"1+01\\\" is not a valid expression Examples:\\n\\nInput: digits = \\\"123\\\", target = 6\\nOutput: [1+2+3, 1*2*3]\\n\\nInput: digits = \\\"105\\\", target = 5\\nOutput: [1*0+5, 10-5]\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    anwser = '[' + anwser.join(', ') + ']';\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %s', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS} ns\\n * @param {Array} data\\n*/ \\nfunction solve(data, ns) {\\n    let digits = data[0].split('');\\n    let goal = data[1];\\n\\n    let numbers = [];\\n    generateNumbers(digits, numbers, []);\\n    let expressions = [];\\n    for (let numberList of numbers) {\\n        generateExpressions(numberList, expressions, []);\\n    }\\n\\n    let solutions = [];\\n    for (let expression of expressions) {\\n        if (solveExpression(expression.slice()) === goal) {\\n            solutions.push(expression.join(''));\\n        }\\n    }\\n    return solutions;\\n}\\n\\n/**\\n * @param {Array} expression\\n*/ \\nfunction solveExpression(expression) {\\n    let mIndex = [];\\n    for (let i = expression.length - 2; i > 0 ; i -= 2) {\\n        if (expression[i] == '*') {\\n            let n = expression[i-1] * expression[i+1];\\n            expression.splice(i-1, 3, n);\\n        }\\n    }\\n\\n    while (expression.length >= 3) {\\n        if (expression[1] == '+') {\\n            let n = expression[0] + expression[2];\\n            expression.splice(0, 3, n);\\n        } else {\\n            let n = expression[0] - expression[2];\\n            expression.splice(0, 3, n);\\n        }\\n    }\\n\\n    return expression[0];\\n}\\n\\n/**\\n * @param {Array} digits\\n * @param {Array} allNumbers\\n * @param {Array} head \\n*/\\nfunction generateNumbers(digits, allNumbers, head) {\\n    for (let i = 1; i <= digits.length; i++) {\\n        let digitCopy = digits.slice();\\n        let mergeElements = digitCopy.splice(0, i).join('');\\n\\n        let newHead = head.concat([mergeElements]);\\n        if (digitCopy.length <= 0) {\\n            for (let j = 0; j < newHead.length; j++) {\\n                newHead[j] = Number.parseInt(newHead[j])\\n            }\\n            allNumbers.push(newHead);\\n            continue;\\n        }\\n\\n        generateNumbers(digitCopy, allNumbers, newHead);\\n    }\\n}\\n\\n/**\\n * @param {Array} numbers\\n * @param {Array} expressionList\\n * @param {Array} head \\n*/\\nfunction generateExpressions(numbers, expressionList, head) {\\n    if (numbers.length <= 1) {\\n        expressionList.push(head.concat(numbers));\\n        return;\\n    }\\n\\n    generateExpressions(numbers.slice(1), expressionList, head.concat(numbers[0], '+'));\\n    generateExpressions(numbers.slice(1), expressionList, head.concat(numbers[0], '-'));\\n    generateExpressions(numbers.slice(1), expressionList, head.concat(numbers[0], '*'));\\n}\",\"filename\":\"/contract/findAllValidMathExpressions.js\",\"url\":\"blob:file:///3a3ad231-1c99-438a-aa2d-4f3a334c52ca\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/findAllValidMathExpressions.js\",\"url\":\"blob:file:///3a3ad231-1c99-438a-aa2d-4f3a334c52ca\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":388}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nA prime factor is a factor that is a prime number. What is the largest prime factor of 847089252?\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %i', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS} ns\\n * @param {Number} n\\n*/ \\nfunction solve(n, ns) {\\n    let maxPrime = -1;\\n\\n    while (n % 2 == 0) {\\n        maxPrime = 2;\\n        n /= 2;\\n    }\\n\\n    while (n % 3 == 0) {\\n        maxPrime = 3;\\n        n /= 3;\\n    }\\n\\n    for (let i = 5; i <= Math.sqrt(n); i += 6) {\\n        while (n % i == 0) {\\n            maxPrime = i;\\n            n /= i;\\n        }\\n      while (n % (i+2) == 0) {\\n            maxPrime = i+2;\\n            n /= (i+2);\\n        }\\n    }\\n \\n    // This condition is to handle the case\\n    // when n is a prime number greater than 4\\n    if (n > 4)\\n        maxPrime = n;\\n \\n    return maxPrime;\\n}\",\"filename\":\"/contract/findLargestPrimeFactor.js\",\"url\":\"blob:file:///c4e0be64-85a1-4f90-bff1-b685165d45be\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/findLargestPrimeFactor.js\",\"url\":\"blob:file:///c4e0be64-85a1-4f90-bff1-b685165d45be\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":389}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    anwser = '[' + anwser.join(', ') + ']';\\n\\n\\t//let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %i', data);\\n        ns.tprintf('Anwser %s', anwser);\\n    }\\n}\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nfunction solve(data, ns) {\\n    let dataString = data.toString();\\n    let valids = [];\\n    for (let i = 1; i < 4; i++) {\\n        let first = dataString.substring(0, i);\\n        if (first[0] == '0' || Number.parseInt(first) > 255) {\\n            break;\\n        }\\n        for (let j = i+1; j < i+4; j++) {\\n            let second = dataString.substring(i, j);\\n            if (second[0] == '0' || Number.parseInt(second) > 255) {\\n                break;\\n            }\\n            for (let k = j+1; k < j+4; k++) {\\n                let third = dataString.substring(j, k);\\n                if (third[0] == '0' || Number.parseInt(third) > 255) {\\n                    break;\\n                }\\n                for (let l = k+1; l < k+4; l++) {\\n                    let fourth = dataString.substring(k, l);\\n                    if (fourth[0] == '0' || Number.parseInt(fourth) > 255) {\\n                        break;\\n                    }\\n\\n                    let testString = [first, second, third, fourth].join('');\\n                    let validString = [first, second, third, fourth].join('.');\\n\\n                    if (testString == dataString && !valids.includes(validString)) {\\n                        valids.push(validString);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    return valids;\\n}\",\"filename\":\"/contract/generateIPAddresses.js\",\"url\":\"blob:file:///a0943d35-1bbf-4ab9-a116-d1330f69b051\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/generateIPAddresses.js\",\"url\":\"blob:file:///a0943d35-1bbf-4ab9-a116-d1330f69b051\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":390}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nGiven the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n\\n[[12,13],[25,27],[4,6],[14,18],[14,16],[4,9],[25,35],[15,17],[20,22]]\\n\\nExample:\\n\\n[[1, 3], [8, 10], [2, 6], [10, 16]]\\n\\nwould merge into [[1, 6], [8, 16]].\\n\\nThe intervals must be returned in ASCENDING order. \\nYou can assume that in an interval, the first number will always be smaller than the second.\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {\\n        returnReward: true,\\n    });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint(\\\"FAILED ATTEMPT\\\");\\n        ns.tprintf(\\\"Data %j\\\", data);\\n        ns.tprintf(\\\"Anwser %j\\\", anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS} ns\\n * @param {Number[][]} data\\n */\\nfunction solve(data, ns) {\\n    for (let i = 0; i < data.length - 1; i++) {\\n        for (let j = i + 1; j < data.length; j++) {\\n            if (data[i][0] <= data[j][1] && data[i][1] >= data[j][1]) {\\n                let cutJ = data.splice(j, 1)[0];\\n                if (cutJ[0] < data[i][0]) {\\n                    data[i][0] = cutJ[0];\\n                }\\n                j = i;\\n                continue;\\n            }\\n\\n            if (data[i][1] >= data[j][0] && data[i][0] <= data[j][0]) {\\n                let cutJ = data.splice(j, 1)[0];\\n                if (cutJ[1] > data[i][1]) {\\n                    data[i][1] = cutJ[1];\\n                }\\n                j = i;\\n                continue;\\n            }\\n        }\\n    }\\n    return data.sort((a, b) => a[0] - b[0]);\\n}\\n\",\"filename\":\"/contract/mergeOverlappingIntervals.js\",\"url\":\"blob:file:///d52e4f86-cee2-487e-8d77-3708b3094e20\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/mergeOverlappingIntervals.js\",\"url\":\"blob:file:///d52e4f86-cee2-487e-8d77-3708b3094e20\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":391}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nGiven a triangle, find the minimum path sum from top to bottom. \\nIn each step of the path, you may only move to adjacent numbers in the row below. \\nThe triangle is represented as a 2D array of numbers:\\n\\n[\\n            [7],\\n           [3,6],\\n          [6,4,2],\\n         [6,1,1,9],\\n        [4,8,2,8,8],\\n       [2,3,4,4,6,9],\\n      [1,4,2,5,4,6,3],\\n     [7,9,8,4,4,7,6,2],\\n    [9,1,9,6,7,2,7,6,7],\\n   [6,1,5,5,2,1,4,4,5,7],\\n  [4,1,7,1,9,3,6,5,3,5,5]\\n]\\n\\n Example: If you are given the following triangle:\\n\\n[\\n     [2],\\n    [3,4],\\n   [6,5,7],\\n  [4,1,8,3]\\n]\\n\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, 0, 0);\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {Number[][]} data\\n */\\nfunction solve(data, x, y) {\\n    if (y === data.length - 1) {\\n        return data[y][x];\\n    }\\n\\n    return data[y][x] + Math.min(solve(data, x, y + 1), solve(data, x + 1, y + 1));\\n}\\n\",\"filename\":\"/contract/minimumPathSumInATriangle.js\",\"url\":\"blob:file:///417e0c3c-f5ab-44a7-97a5-ab8c65a01c30\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/minimumPathSumInATriangle.js\",\"url\":\"blob:file:///417e0c3c-f5ab-44a7-97a5-ab8c65a01c30\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":392}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nSanitize Parentheses in Expression\\n\\nGiven the following string:\\n\\n(((a((()a\\n\\nremove the minimum number of invalid parentheses in order to validate the string. \\nIf there are multiple minimal ways to validate the string, provide all of the possible results. \\nThe answer should be provided as an array of strings. \\nIf it is impossible to validate the string the result should be an array with only an empty string.\\n\\nIMPORTANT: The string may contain letters, not just parentheses. Examples:\\n\\\"()())()\\\" -> [()()(), (())()]\\n\\\"(a)())()\\\" -> [(a)()(), (a())()]\\n\\\")(\\\" -> [\\\"\\\"]\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    anwser = '[' + anwser.join(', ') + ']';\\n\\n    if (anwser === '[]') {\\n        anwser = '[\\\"\\\"]';\\n    }\\n\\n    //let response = answer;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %s', data);\\n        ns.tprintf('Anwser %s', anwser);\\n    }\\n}\\n\\n/**\\n * @param {String} brackets\\n * @returns {Boolean}\\n */\\nfunction validate(brackets) {\\n    let counter = 0;\\n    for (let char of brackets) {\\n        if (char === '(') counter++;\\n        if (char === ')') counter--;\\n        if (counter < 0) return false;\\n    }\\n    if (counter != 0) return false;\\n    return true;\\n}\\n\\nlet bestLength = 0;\\n\\n/**\\n * @param {String} brackets\\n * @returns {String[]}\\n */\\nfunction solve(brackets, ns) {\\n    if (!brackets.includes('(') || !brackets.includes(')')) {\\n        return [];\\n    }\\n    let solutions = [];\\n    let unvalidated = [];\\n    for (let j = 0; j < brackets.length; j++) {\\n        if (brackets[j] != '(' && brackets[j] != ')') {\\n            continue;\\n        }\\n        let newBrackets = brackets.substring(0, j) + brackets.substring(j + 1);\\n\\n        if (validate(newBrackets)) {\\n            if (!solutions.includes(newBrackets)) {\\n                solutions.push(newBrackets);\\n            }\\n        } else {\\n            if (!unvalidated.includes(newBrackets)) {\\n                unvalidated.push(newBrackets);\\n            }\\n        }\\n    }\\n\\n    if (solutions.length > 0) {\\n        bestLength = Math.max(bestLength, solutions[0].length);\\n        return solutions;\\n    }\\n\\n    if (brackets.length > bestLength) {\\n        let longestSolution = [];\\n        let solutionLength = 0;\\n        for (let uBracket of unvalidated) {\\n            let nextResult = solve(uBracket, ns);\\n            if (nextResult.length > 0) {\\n                if (nextResult[0].length == solutionLength) {\\n                    for (let nextString of nextResult) {\\n                        if (!longestSolution.includes(nextString)) {\\n                            longestSolution.push(nextString);\\n                        }\\n                    }\\n                } else if (nextResult[0].length > solutionLength) {\\n                    longestSolution = nextResult;\\n                    solutionLength = nextResult[0].length;\\n                }\\n            }\\n        }\\n        if (longestSolution.length > 0) {\\n            return longestSolution;\\n        }\\n    }\\n    return [];\\n}\\n\",\"filename\":\"/contract/sanitizeParenthesesInExpression.js\",\"url\":\"blob:file:///c8ec31cb-3e68-443d-88e3-71ff365be2f3\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/sanitizeParenthesesInExpression.js\",\"url\":\"blob:file:///c8ec31cb-3e68-443d-88e3-71ff365be2f3\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":393}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\nGiven the following array of arrays of numbers representing a 2D matrix, return the elements of the matrix as an array in spiral order:\\r\\n\\r\\n[\\r\\n\\t[37,35, 3]\\r\\n\\t[ 8,47,29]\\r\\n\\t[40,42, 6]\\r\\n\\t[50,38,37]\\r\\n\\t[16,10,46]\\r\\n\\t[47,37, 8]\\r\\n\\t[50,43,13]\\r\\n\\t[24,12,13]\\r\\n\\t[14,48,27]\\r\\n\\t[46,21,21]\\r\\n\\t[14,38,48]\\r\\n\\t[41,43,46]\\r\\n\\t[ 2, 2,35]\\r\\n\\t[ 5,19,49]\\r\\n\\t[25, 6,29]\\r\\n]\\r\\n\\r\\nHere is an example of what spiral order should be:\\r\\n\\r\\n[\\r\\n\\t[1, 2, 3]\\r\\n\\t[4, 5, 6]\\r\\n\\t[7, 8, 9]\\r\\n]\\r\\n\\r\\nAnswer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]\\r\\n\\r\\nNote that the matrix will not always be square:\\r\\n\\r\\n[\\r\\n\\t[1,2,3,4]\\r\\n\\t[5,6,7,8]\\r\\n\\t[9,10,11,12]\\r\\n]\\r\\n\\r\\nAnswer: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]\\r\\n*/\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n    let anwser = solve(data);\\r\\n    //let response = data;\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint('FAILED ATTEMPT');\\r\\n        ns.tprintf('Data %j', data);\\r\\n        ns.tprintf('Anwser %j', anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {import(\\\"../.\\\").NS} ns\\r\\n */\\r\\nfunction solve(data) {\\r\\n    let direction = 0; // 0 > ; 1 v ; 2 < ; 3 ^\\r\\n    let x = 0;\\r\\n    let y = 0;\\r\\n\\r\\n    let solution = [];\\r\\n\\r\\n    while (true) {\\r\\n        //console.log(data[y][x]);\\r\\n        let r = x + 1 < data[0].length && data[y][x + 1] != 'x';\\r\\n        let l = x - 1 >= 0 && data[y][x - 1] != 'x';\\r\\n        let u = y - 1 >= 0 && data[y - 1][x] != 'x';\\r\\n        let d = y + 1 < data.length && data[y + 1][x] != 'x';\\r\\n\\r\\n        if (!r && !l && !u && !d) {\\r\\n            solution.push(data[y][x]);\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        switch (direction) {\\r\\n            case 0:\\r\\n                if (!r) {\\r\\n                    direction = (direction + 1) % 4;\\r\\n                }\\r\\n                break;\\r\\n            case 1:\\r\\n                if (!d) {\\r\\n                    direction = (direction + 1) % 4;\\r\\n                }\\r\\n                break;\\r\\n            case 2:\\r\\n                if (!l) {\\r\\n                    direction = (direction + 1) % 4;\\r\\n                }\\r\\n                break;\\r\\n            case 3:\\r\\n                if (!u) {\\r\\n                    direction = (direction + 1) % 4;\\r\\n                }\\r\\n                break;\\r\\n        }\\r\\n\\r\\n        solution.push(data[y][x]);\\r\\n        data[y][x] = 'x';\\r\\n\\r\\n        switch (direction) {\\r\\n            case 0:\\r\\n                x++;\\r\\n                break;\\r\\n            case 1:\\r\\n                y++;\\r\\n                break;\\r\\n            case 2:\\r\\n                x--;\\r\\n                break;\\r\\n            case 3:\\r\\n                y--;\\r\\n                break;\\r\\n            default:\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return solution;\\r\\n}\\r\\n\",\"filename\":\"/contract/spiralizeMatrix.js\",\"url\":\"blob:file:///31f7730a-301a-4571-bde5-3fe419c148f5\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/spiralizeMatrix.js\",\"url\":\"blob:file:///31f7730a-301a-4571-bde5-3fe419c148f5\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":394}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nGiven the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. \\n'Sum' refers to the sum of all the numbers in the subarray.\\n\\n6,9,1,-10,1,-6,9,-1,-3,-4,1,10,-4,-7,-7,5,-5,-9\\n*/\\n\\n/** @param {import(\\\"..\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n\\n    let anwser = solve(data);\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {\\n        returnReward: true,\\n    });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\nfunction solve(data) {\\n    let currentSolution = [];\\n    let bestSum = Number.NEGATIVE_INFINITY;\\n    for (let i = 0; i < data.length; i++) {\\n        let sum = 0;\\n        for (let j = i; j < data.length; j++) {\\n            sum += data[j];\\n            if (sum > bestSum) {\\n                bestSum = sum;\\n                currentSolution = data.slice(i, j + 1);\\n            }\\n        }\\n    }\\n    return bestSum;\\n}\\n\",\"filename\":\"/contract/subarrayWithMaximumSum.js\",\"url\":\"blob:file:///52b84d56-0364-44c2-a32c-8e2972536ca0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/subarrayWithMaximumSum.js\",\"url\":\"blob:file:///52b84d56-0364-44c2-a32c-8e2972536ca0\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":395}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nIt is possible write four as a sum in exactly four different ways:\\n\\n3 + 1\\n2 + 2\\n2 + 1 + 1\\n1 + 1 + 1 + 1\\n\\nHow many different ways can the number 37 be written as a sum of at least two positive integers?\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n\\n    let anwser = solve(data, ns);\\n\\n    //let response = \\\"NOT YET IMPLEMENTED\\\";\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {\\n        returnReward: true,\\n    });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint(\\\"FAILED ATTEMPT\\\");\\n        ns.tprintf(\\\"Data %i\\\", data);\\n        ns.tprintf(\\\"Anwser %i\\\", anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS} ns\\n * @param {Number} n\\n */\\nfunction solve(n, ns) {\\n    let partitionList = new Array(n + 1).fill(0);\\n    partitionList[0] = 1;\\n\\n    for (let i = 1; i <= n - 1; i++) {\\n        for (let j = i; j <= n; j++) {\\n            partitionList[j] += partitionList[j - i];\\n        }\\n    }\\n    return partitionList[n];\\n}\\n\",\"filename\":\"/contract/totalWaysToSum.js\",\"url\":\"blob:file:///1dcecb74-ab18-40fc-bf6d-f8db7e63119f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/totalWaysToSum.js\",\"url\":\"blob:file:///1dcecb74-ab18-40fc-bf6d-f8db7e63119f\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":396}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are in a grid with 4 rows and 10 columns,\\nand you are positioned in the top-left corner of that grid. \\nYou are trying to reach the bottom-right corner of the grid, \\nbut you can only move down or right on each step. \\nDetermine how many unique paths there are from start to finish.\\n\\nNOTE: The data returned for this contract is an array with the number of rows and columns:\\n\\n[4, 10]\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n\\n    let anwser = step(0, 0, data);\\n\\n    //let response = \\\"NOT YET IMPLEMENTED\\\";\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {\\n        returnReward: true,\\n    });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {Number} x\\n * @param {Number} y\\n * @param {Number[]} dimensions\\n * @returns\\n */\\nfunction step(x, y, dimensions) {\\n    if (y + 1 === dimensions[0] && x + 1 === dimensions[1]) {\\n        return 1;\\n    }\\n\\n    let pathCounter = 0;\\n\\n    if (y + 1 < dimensions[0]) {\\n        pathCounter += step(x, y + 1, dimensions);\\n    }\\n\\n    if (x + 1 < dimensions[1]) {\\n        pathCounter += step(x + 1, y, dimensions);\\n    }\\n\\n    return pathCounter;\\n}\\n\",\"filename\":\"/contract/uniquePathsInAGridI.js\",\"url\":\"blob:file:///65ae4b69-d076-4e75-bda9-325d7e97dab3\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/uniquePathsInAGridI.js\",\"url\":\"blob:file:///65ae4b69-d076-4e75-bda9-325d7e97dab3\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":397}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n\\tlet target = 'silver-helix';\\n\\n\\tns.disableLog('ALL');\\n\\n\\tlet money = ns.getServerMoneyAvailable(target);\\n\\tlet oldMoney = 0;\\n\\n\\tlet security = ns.getServerSecurityLevel(target);\\n\\tlet oldSecurity = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (money != oldMoney) {\\n\\t\\t\\tns.print(`Money: ${Math.floor(money)}`);\\n\\t\\t}\\n\\t\\toldMoney = money;\\n\\t\\tmoney = ns.getServerMoneyAvailable(target);\\n\\t\\tif (security != oldSecurity) {\\n\\t\\t\\tns.print(`Security: ${Math.floor(security)}`);\\n\\t\\t}\\n\\t\\toldSecurity = security;\\n\\t\\tsecurity = ns.getServerSecurityLevel(target);\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/old/hackTarget.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":398}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\nasync function getChildren(ns, current, parent, list) {\\n\\tlet children = await ns.scan(current);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tlist.push(child);\\n\\n\\t\\tawait getChildren(ns, child, current, list);\\n\\t}\\n}\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nasync function findServer(ns, current, parent, search) {\\n\\tif (current === search) {\\n\\t\\treturn current;\\n\\t}\\n\\tlet children = await ns.scan(current);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tlet childValue = await findServer(ns, child, current, search);\\n\\t\\tif (childValue != '') {\\n\\t\\t\\treturn current + '>' + childValue;\\n\\t\\t}\\n\\t}\\n\\treturn '';\\n}\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n\\tlet targets = [];\\n\\tawait getChildren(ns, 'home', '', targets);\\n\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\ttargets = targets.filter(server => !purchasedServers.includes(server));\\n\\t\\n\\tlet contractServers = targets.filter(server => ns.ls(server).find(file => file.endsWith('.cct')));\\n\\n\\tif (contractServers.length < 1) {\\n\\t\\tns.tprint('No contract found.');\\n\\t\\treturn;\\n\\t}\\n\\n\\tfor (let contractServer of contractServers) {\\n\\t\\tns.tprint('Found contract on: ' + await findServer(ns, 'home', '', contractServer));\\n\\t}\\n}\",\"filename\":\"/old/contractSearch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.25,\"server\":\"home\",\"moduleSequenceNumber\":399}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let target = 'silver-helix';\\n\\n    ns.disableLog('ALL');\\n\\n    let moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    let securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        let securityLevel = ns.getServerSecurityLevel(target);\\n        let money = ns.getServerMoneyAvailable(target);\\n        if (securityLevel > securityThresh) {\\n            ns.print(`WeakenTime: ${ns.getWeakenTime(target)}`);\\n            let decrease = await ns.weaken(target);\\n            ns.print(`Weaken: ${securityLevel} -> ${securityLevel - decrease}`)\\n        } else if (money < moneyThresh) {\\n            ns.print(`GrowTimer: ${ns.getGrowTime(target)}`);\\n            let multiplier = await ns.grow(target);\\n            ns.print(`Grow: ${money} -> ${money * multiplier}`);\\n        } else {\\n            ns.print(`HackTimer: ${ns.getHackTime(target)}`);\\n            let stolenMoney = await ns.hack(target);\\n            ns.print(`Hack: ${stolenMoney}`);\\n        }\\n    }\\n}\",\"filename\":\"/old/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":400}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\nasync function getChildren(ns, current, parent, list) {\\n\\tlet children = await ns.scan(current);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tlist.push(child);\\n\\n\\t\\tawait getChildren(ns, child, current, list);\\n\\t}\\n}\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let targets = [];\\n\\tawait getChildren(ns, 'home', '', targets);\\n\\n\\ttargets = targets.sort((a, b) => ns.getServerMaxMoney(a) - ns.getServerMaxMoney(b));\\n\\n\\tfor (let target of targets) {\\n\\t\\tlet money = Math.floor(ns.getServerMaxMoney(target)).toString().padEnd(14);\\n\\t\\tns.tprint(`> ${target.padEnd(20)}|Money: ${money}|Hacking: ${ns.getServerRequiredHackingLevel(target).toString().padEnd(5)}`);\\n\\t}\\n}\",\"filename\":\"/old/sortScan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":401}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let message = ns.args.join(' ');\\r\\n    ns.writePort(20, message);\\r\\n}\",\"filename\":\"handler.js\",\"url\":\"blob:file:///a6d59003-ed89-4db2-84e4-098f00dcec2f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"handler.js\",\"url\":\"blob:file:///a6d59003-ed89-4db2-84e4-098f00dcec2f\"}],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":402}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"..\\\").NS} ns */\\nasync function getChildren(ns, current, parent, list) {\\n\\tlet children = await ns.scan(current);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t\\n\\t\\tlet contractFiles = ns.ls(child, '.cct');\\n\\t\\tfor (let file of contractFiles) {\\n\\t\\t\\tlist.push([file, child]);\\n\\t\\t}\\n\\n\\t\\tawait getChildren(ns, child, current, list);\\n\\t}\\n}\\n\\n/** @param {import(\\\"..\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('scan');\\n\\tlet contracts = [];\\n\\tawait getChildren(ns, 'home', '', contracts);\\n\\tns.tprint(`Found ${contracts.length} contracts, starting the solvers...`);\\n\\n\\tlet solved = 0;\\n\\n\\tfor (let contract of contracts) {\\n\\t\\tlet contractType = ns.codingcontract.getContractType(contract[0], contract[1]);\\n\\t\\tswitch(contractType) {\\n\\t\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\t\\tif (ns.run('contract/subarrayWithMaximumSum.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Generate IP Addresses':\\n\\t\\t\\t\\tif (ns.run('contract/generateIPAddresses.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Find All Valid Math Expressions':\\n\\t\\t\\t\\tif (ns.run('contract/findAllValidMathExpressions.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Find Largest Prime Factor':\\n\\t\\t\\t\\tif (ns.run('contract/findLargestPrimeFactor.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Algorithmic Stock Trader I':\\n\\t\\t\\t\\tif (ns.run('contract/algorithmicStockTraderI.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\t\\tif (ns.run('contract/algorithmicStockTraderII.js', 1, contract[0], contract[1]) > 0);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Algorithmic Stock Trader III':\\n\\t\\t\\t\\tif (ns.run('contract/algorithmicStockTraderIII.js', 1, contract[0], contract[1]) > 0);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\t\\tif (ns.run('contract/totalWaysToSum.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Array Jumping Game':\\n\\t\\t\\t\\tif (ns.run('contract/arrayJumpingGame.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\t\\tif (ns.run('contract/mergeOverlappingIntervals.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\t\\tif (ns.run('contract/uniquePathsInAGridI.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Sanitize Parentheses in Expression':\\n\\t\\t\\t\\tif (ns.run('contract/sanitizeParenthesesInExpression.js', 1, contract[0], contract[1]) > 0);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Minimum Path Sum in a Triangle':\\n\\t\\t\\t\\tif (ns.run('contract/minimumPathSumInATriangle.js', 1, contract[0], contract[1]) > 0);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Spiralize Matrix':\\n\\t\\t\\t\\tif (ns.run('contract/spiralizeMatrix.js', 1, contract[0], contract[1]) > 0);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tns.tprint(`Found contract ${contract[0]} of type '${contractType}' on ${contract[1]}`);\\n\\t\\t\\t\\tns.tprint(`Description: ${ns.codingcontract.getDescription(contract[0], contract[1])}`);\\n\\t\\t\\t\\tns.tprint('-'.repeat(40));\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tns.tprint(`Solved ${solved} contracts, ${contracts.length - solved} contracts remain unsolved.`);\\n}\",\"filename\":\"/old/contractManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":13,\"server\":\"home\",\"moduleSequenceNumber\":403}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let maxLevel = 200;\\nlet maxRam = 64;\\nlet maxRamUpgrades = 7;\\nlet maxCores = 16;\\n\\nlet buyThreshold = 0.05;\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n\\tlet nodeCount = ns.hacknet.numNodes();\\n\\t\\n\\tfor (let i = 0; i < nodeCount; i++) {\\n\\t\\tlet nodeStats = ns.hacknet.getNodeStats(i);\\n\\t\\tif (nodeStats.level === maxLevel && nodeStats.ram === maxRam && nodeStats.cores === maxCores) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait upgradeNode(ns, i);\\n\\t}\\n\\t\\n\\twhile (ns.hacknet.numNodes() < ns.hacknet.maxNumNodes()) {\\n\\t\\tlet currentMoney = ns.getServerMoneyAvailable('home');\\n\\n\\t\\tlet cost = ns.hacknet.getPurchaseNodeCost();\\n\\t\\tif (cost / currentMoney < buyThreshold) {\\n\\t\\t\\tlet node = ns.hacknet.purchaseNode();\\n\\t\\t\\tawait upgradeNode(ns, node);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n * @param {import(\\\".\\\").NS} ns\\n * @param {Number} node\\n*/\\nasync function upgradeNode(ns, node) {\\n\\tlet fullUpgrades = false;\\n\\tlet nodeStats = ns.hacknet.getNodeStats(node);\\n\\twhile (!fullUpgrades) {\\n\\t\\tlet currentMoney = ns.getServerMoneyAvailable('home');\\n\\t\\tlet cost = ns.hacknet.getLevelUpgradeCost(node, maxLevel - nodeStats.level);\\n\\t\\tcost += ns.hacknet.getRamUpgradeCost(node, maxRamUpgrades - nodeStats.ram);\\n\\t\\tcost += ns.hacknet.getCoreUpgradeCost(node, maxCores - nodeStats.cores);\\n\\n\\t\\tif (cost / currentMoney < buyThreshold) {\\n\\t\\t\\tns.hacknet.upgradeLevel(node, maxLevel - nodeStats.level);\\n\\t\\t\\tns.hacknet.upgradeRam(node, maxRamUpgrades - nodeStats.ram);\\n\\t\\t\\tns.hacknet.upgradeCore(node, maxCores - nodeStats.cores);\\n\\t\\t\\tfullUpgrades = true;\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/old/hacknetManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":404}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"..\\\").NS} ns */\\nexport async function main(ns) {\\n\\tlet baseRam = 8;\\n\\tlet upgradeMultiplier = 32;\\n\\tlet hostName = ns.getHostname();\\n\\n    let servers = ns.getPurchasedServers();\\n\\tlet ramGoal = getLowestRam(servers, ns) * upgradeMultiplier;\\n\\n\\tif (ramGoal == 0) {\\n\\t\\tlet baught = 0;\\n\\t\\tfor (let i = servers.length - 1; i < ns.getPurchasedServerLimit(); i++) {\\n\\t\\t\\tif (ns.getServerMoneyAvailable('home') > ns.getPurchasedServerCost(baseRam)) {\\n\\t\\t\\t\\tbaught++;\\n\\t\\t\\t\\tns.purchaseServer(\\\"blank-\\\" + i, baseRam);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tns.tprint(`Baught ${baught} servers with ${baseRam}gb each. For a total of ${servers.length + baught}.`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tservers.filter((s) => ns.getServerMaxRam(s) <= ramGoal);\\n\\n\\n\\tlet upgraded = 0;\\n\\tfor (let server of servers) {\\n\\t\\tif (ns.getServerMoneyAvailable('home') > ns.getPurchasedServerCost(ramGoal)) {\\n\\t\\t\\tupgraded++;\\n\\t\\t\\tns.killall(server);\\n\\t\\t\\tns.deleteServer(server);\\n\\t\\t\\tns.purchaseServer(server, ramGoal);\\n\\t\\t}\\n\\t}\\n\\tif (upgraded == 0) {\\n\\t\\tns.tprint(`Not enough money for upgrade: ${ns.getPurchasedServerCost(ramGoal) / (1000 * 1000)}m per Server.`);\\n\\t\\treturn;\\n\\t}\\n\\tns.tprint(`Upgraded ${upgraded} Server to ${ramGoal}gb.`);\\n\\n\\tns.spawn('hackManager.js');\\n}\\n\\n/** \\n * @param {String[]} servers\\n * @param {import(\\\"..\\\").NS} ns\\n*/\\nfunction getLowestRam(servers, ns) {\\n\\tif (servers.length < 25) {\\n\\t\\treturn 0;\\n\\t}\\n\\tlet ram = Number.POSITIVE_INFINITY;\\n\\tfor (let server of servers) {\\n\\t\\tif (ns.getServerMaxRam(server) < ram) {\\n\\t\\t\\tram = ns.getServerMaxRam(server);\\n\\t\\t}\\n\\t}\\n\\n\\treturn ram;\\n}\",\"filename\":\"/old/serverManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":11.35,\"server\":\"home\",\"moduleSequenceNumber\":405}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array with two elements:\\n\\n [2, [23,148,145,145,107,71,24,67,95,82,162,58,145,135,184,130,175,41,184,90,43,146,15,113,97,55,102,35,40,149,148,74,11,90,31,165,160,150,124,182,58]]\\n\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\n\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\n\\n If no profit can be made, then the answer should be 0.\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data[0], data[1]);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %j', anwser);\\n    }\\n}\\n\\n/**\\n * @param {Number[]} prices\\n * */\\nfunction solve(iterations, prices) {\\n    let highestProfits = [];\\n    for (let i = 0; i < iterations; i++) {\\n        highestProfits.push(new Array(prices.length).fill(0));\\n    }\\n\\n    for (let i = 0; i < iterations; i++) {\\n        for (let j = 0; j < prices.length; j++) {\\n            for (let k = j; k < prices.length; k++) {\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(\\n                        highestProfits[i][k],\\n                        highestProfits[i - 1][k],\\n                        highestProfits[i][k - 1],\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\n                    );\\n                } else if (i > 0 && j > 0) {\\n                    highestProfits[i][k] = Math.max(\\n                        highestProfits[i][k],\\n                        highestProfits[i - 1][k],\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\n                    );\\n                } else if (i > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i - 1][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\n                } else if (j > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\n                } else {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], prices[k] - prices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfits[iterations - 1][prices.length - 1];\\n}\\n\",\"filename\":\"/contract/algorithmicStockTraderIV.js\",\"url\":\"blob:file:///a715bc94-91e0-43b5-a78e-f8a9f68a2981\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/algorithmicStockTraderIV.js\",\"url\":\"blob:file:///a715bc94-91e0-43b5-a78e-f8a9f68a2981\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":406}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are located in the top-left corner of the following grid:\\n\\n0,0,0,0,\\n0,0,0,0,\\n0,0,1,0,\\n0,1,0,0,\\n0,0,0,0,\\n0,0,0,0,\\n0,0,0,0,\\n0,0,0,0,\\n1,1,1,0,\\n0,0,0,0,\\n0,0,0,0,\\n\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n\\n Determine how many unique paths there are from start to finish.\\n\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n*/\\n\\n/** @param {import(\\\"..\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n\\n    let anwser = step(0, 0, data);\\n\\n    //let response = \\\"NOT YET IMPLEMENTED\\\";\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {\\n        returnReward: true,\\n    });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {Number} x\\n * @param {Number} y\\n * @param {Number[][]} grid\\n * @returns\\n */\\nfunction step(x, y, grid) {\\n    if (y + 1 === grid.length && x + 1 === grid[0].length) {\\n        return 1;\\n    }\\n\\n    let pathCounter = 0;\\n\\n    if (y + 1 < grid.length && grid[y + 1][x] == 0) {\\n        pathCounter += step(x, y + 1, grid);\\n    }\\n\\n    if (x + 1 < grid[0].length && grid[y][x + 1] == 0) {\\n        pathCounter += step(x + 1, y, grid);\\n    }\\n\\n    return pathCounter;\\n}\\n\",\"filename\":\"/contract/uniquePathsInAGridII.js\",\"url\":\"blob:file:///7e335f5a-5326-468d-86d2-571b6900bd15\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/uniquePathsInAGridII.js\",\"url\":\"blob:file:///7e335f5a-5326-468d-86d2-571b6900bd15\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":407}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///9c9187ef-a7e5-46d1-9016-ee8893b2a56e\",\"module\":{},\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///9c9187ef-a7e5-46d1-9016-ee8893b2a56e\"}],\"ramUsage\":1.9,\"server\":\"home\",\"moduleSequenceNumber\":772}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///34e1a512-14b7-4389-89b6-067cb2db1588\",\"module\":{},\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///34e1a512-14b7-4389-89b6-067cb2db1588\"}],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":773}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///7bce7d23-72bf-42f9-b3e0-b2487291c604\",\"module\":{},\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///7bce7d23-72bf-42f9-b3e0-b2487291c604\"}],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":771}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ServerTree {\\r\\n    /**\\r\\n     * @param {String} name\\r\\n     * @param {Server[]} children\\r\\n     * @param {String} path\\r\\n     */\\r\\n    constructor(name, children, path) {\\r\\n        this.name = name;\\r\\n        this.children = children;\\r\\n        this.path = path;\\r\\n    }\\r\\n\\r\\n    isHome() {\\r\\n        return this.name === 'home';\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @returns {ServerTree[]} List of all the servers\\r\\n     */\\r\\n    toArray() {\\r\\n        let list = [];\\r\\n        for (const child of this.children) {\\r\\n            list = list.concat(child.toArray());\\r\\n        }\\r\\n        return [new ServerTree(this.name, [], this.path)].concat(list);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @returns {ServerTree[]} List of all the servers\\r\\n     */\\r\\n    toStringArray() {\\r\\n        let list = [];\\r\\n        for (const child of this.children) {\\r\\n            list = list.concat(child.toStringArray());\\r\\n        }\\r\\n        return [this.name].concat(list);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {Number} depth\\r\\n     */\\r\\n    maxDepth(depth = 0) {\\r\\n        let maxDepth = depth;\\r\\n        for (const child of this.children) {\\r\\n            maxDepth = Math.max(maxDepth, child.maxDepth(depth + 1));\\r\\n        }\\r\\n        return maxDepth;\\r\\n    }\\r\\n\\r\\n    longestName() {\\r\\n        let nameLength = this.name.length;\\r\\n        for (const child of this.children) {\\r\\n            nameLength = Math.max(nameLength, child.longestName());\\r\\n        }\\r\\n        return nameLength;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Server {\\r\\n    /**\\r\\n     * @param {String} name\\r\\n     */\\r\\n    constructor(name) {\\r\\n        this.name = name;\\r\\n        this.target = false;\\r\\n        this.root = false;\\r\\n        this.growTimer = 0;\\r\\n        this.hackTimer = 0;\\r\\n        this.weakenTimer = 0;\\r\\n\\r\\n        this.moneyStolenPerSecondQueue = [];\\r\\n        this.securityIncreasePerSecondQueue = [];\\r\\n    }\\r\\n\\r\\n    /** @returns {Boolean} */\\r\\n    isHome() {\\r\\n        return this.name === 'home';\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {Number} money\\r\\n     * @returns {Boolean}\\r\\n     */\\r\\n    queueMoneyStolenPerSec(money) {\\r\\n        this.moneyStolenPerSecondQueue.push(money);\\r\\n        return this.moneyStolenPerSecondQueue.shift();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {Number} security\\r\\n     * @returns {Boolean}\\r\\n     */\\r\\n    queueSecurityIncreasePerSec(security) {\\r\\n        this.securityIncreasePerSecondQueue.push(security);\\r\\n        return this.securityIncreasePerSecondQueue.shift();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @returns {Number}\\r\\n     */\\r\\n    averageMoneyStolenPerSec() {\\r\\n        if (this.moneyStolenPerSecondQueue.length === 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return this.moneyStolenPerSecondQueue.reduce((p, c) => p + c, 0) / this.moneyStolenPerSecondQueue.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @returns {Number}\\r\\n     */\\r\\n    averageSecurityIncreasePerSec() {\\r\\n        if (this.securityIncreasePerSecondQueue.length === 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return this.securityIncreasePerSecondQueue.reduce((p, c) => p + c, 0) / this.securityIncreasePerSecondQueue.length;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {Number} number\\r\\n * @param {Boolean} bytes\\r\\n * @returns {String}\\r\\n */\\r\\nexport function numberSquish(number, bytes) {\\r\\n    if (number == 0) {\\r\\n        return bytes ? '0GB' : '0.000';\\r\\n    }\\r\\n    let letters = bytes ? ['GB', 'TB', 'PB'] : ['', 'k', 'm', 'b', 't', 'q'];\\r\\n    let index = Math.floor(Math.log10(Math.abs(number)) / 3);\\r\\n\\r\\n    if (index > 0) {\\r\\n        number = number / Math.pow(1000, index);\\r\\n    }\\r\\n\\r\\n    let letter;\\r\\n    if (index >= letters.length) {\\r\\n        letter = 'ADD MORE LETTER';\\r\\n    } else if (index < 0) {\\r\\n        letter = '';\\r\\n    } else {\\r\\n        letter = letters[index];\\r\\n    }\\r\\n\\r\\n    return number.toLocaleString('en-UK', { maximumFractionDigits: bytes ? 0 : 3, minimumFractionDigits: bytes ? 0 : 3 }) + letter;\\r\\n}\\r\\n\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":411}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"..\\\").NS} ns */\\nasync function getChildren(ns, current, parent, list) {\\n    let children = await ns.scan(current);\\n    for (let child of children) {\\n        if (parent === child) {\\n            continue;\\n        }\\n        list.push(child);\\n\\n        await getChildren(ns, child, current, list);\\n    }\\n}\\n\\n/** @param {import(\\\"..\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let scriptName = 'smartHack.js';\\n    let monitorScriptName = 'hackMonitor.js';\\n    let scriptRam = ns.getScriptRam(scriptName);\\n    let homeRamSpace = 1024;\\n\\n    let hostName = ns.getHostname();\\n\\n    let portLevel = 0;\\n    if (ns.fileExists('brutessh.exe')) portLevel = 1;\\n    if (ns.fileExists('ftpcrack.exe')) portLevel = 2;\\n    if (ns.fileExists('relaysmtp.exe')) portLevel = 3;\\n    if (ns.fileExists('httpworm.exe')) portLevel = 4;\\n    if (ns.fileExists('sqlinject.exe')) portLevel = 5;\\n\\n    let allServers = [];\\n    await getChildren(ns, hostName, '', allServers);\\n\\n    let targets = [];\\n    let totalTargetMaxMoney = 0;\\n    for (let server of allServers) {\\n        if (ns.getServerMaxMoney(server) > 0) {\\n            if (ns.getServerNumPortsRequired(server) <= portLevel) {\\n                if (ns.getServerRequiredHackingLevel(server) <= Math.ceil(ns.getHackingLevel() * 0.9)) {\\n                    totalTargetMaxMoney += ns.getServerMaxMoney(server);\\n                    targets.push({ name: server, moneyP: 0, threads: 0 });\\n                }\\n            }\\n        }\\n    }\\n\\n    for (let target of targets) {\\n        target.moneyP = ns.getServerMaxMoney(target.name) / totalTargetMaxMoney;\\n    }\\n\\n    for (let server of allServers) {\\n        if (!ns.hasRootAccess(server)) {\\n            switch (ns.getServerNumPortsRequired(server)) {\\n                case 5:\\n                    if (portLevel < 5) continue;\\n                    ns.sqlinject(server);\\n                case 4:\\n                    if (portLevel < 4) continue;\\n                    ns.httpworm(server);\\n                case 3:\\n                    if (portLevel < 3) continue;\\n                    ns.relaysmtp(server);\\n                case 2:\\n                    if (portLevel < 2) continue;\\n                    ns.ftpcrack(server);\\n                case 1:\\n                    if (portLevel < 1) continue;\\n                    ns.brutessh(server);\\n                case 0:\\n                    ns.nuke(server);\\n                    break;\\n                default:\\n                    continue;\\n            }\\n        }\\n\\n        ns.scriptKill(scriptName, server);\\n        ns.rm(scriptName, server);\\n        await ns.scp(scriptName, server);\\n        let ram = ns.getServerMaxRam(server);\\n        let maxThreads = Math.floor(ram / scriptRam);\\n\\n        let threadCount = 0;\\n        for (let i = 0; i < targets.length - 1; i++) {\\n            let targetThreads = Math.floor(maxThreads * targets[i].moneyP);\\n            if (targetThreads > 0) {\\n                execute(ns, scriptName, server, targets[i], targetThreads);\\n            }\\n            targets[i].threads += targetThreads;\\n            threadCount += targetThreads;\\n        }\\n        if (threadCount < maxThreads) {\\n            let targetThreads = maxThreads - threadCount;\\n            if (targetThreads > 0) {\\n                execute(ns, scriptName, server, targets[targets.length - 1], targetThreads);\\n            }\\n            targets[targets.length - 1].threads += targetThreads;\\n            threadCount += targetThreads;\\n        }\\n\\n        if (threadCount < maxThreads) {\\n            ns.tprintf(`Remaining threads on ${server}`);\\n        }\\n    }\\n\\n    ns.scriptKill(monitorScriptName, hostName);\\n    for (let target of targets) {\\n        ns.exec(monitorScriptName, hostName, 1, target.name);\\n    }\\n\\n    ns.scriptKill(scriptName, hostName);\\n    let ram = ns.getServerMaxRam(hostName) - homeRamSpace;\\n    let maxThreads = Math.floor(ram / scriptRam);\\n\\n    let threadCount = 0;\\n    for (let i = 0; i < targets.length - 1; i++) {\\n        let targetThreads = Math.floor(maxThreads * targets[i].moneyP);\\n        if (targetThreads > 0) {\\n            execute(ns, scriptName, hostName, targets[i], targetThreads);\\n        }\\n        targets[i].threads += targetThreads;\\n        threadCount += targetThreads;\\n    }\\n\\n    if (threadCount < maxThreads) {\\n        let targetThreads = maxThreads - threadCount;\\n        if (targetThreads > 0) {\\n            execute(ns, scriptName, hostName, targets[targets.length - 1], targetThreads);\\n        }\\n        targets[targets.length - 1].threads += targetThreads;\\n        threadCount += targetThreads;\\n    }\\n\\n    if (threadCount < maxThreads) {\\n        ns.tprintf(`Remaining threads on ${server}`);\\n    }\\n\\n    targets.sort((a, b) => a.threads - b.threads);\\n    let totalThreads = 0;\\n    for (let target of targets) {\\n        ns.tprint(`Target: ${target.name}, Threads startet: ${target.threads}`);\\n        totalThreads += target.threads;\\n    }\\n    ns.tprint(`Total Threads startet: ${totalThreads}`);\\n}\\n\\n/** @param {import(\\\"..\\\").NS} ns */\\nfunction execute(ns, scriptName, server, target, threads) {\\n    ns.exec(scriptName, server, threads, target.name);\\n    ns.print(`Execute ${scriptName} at ${server} -> ${target} with ${threads} threads.`);\\n}\\n\",\"filename\":\"/old/hackManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.7,\"server\":\"home\",\"moduleSequenceNumber\":412}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\n\\tns.disableLog('ALL');\\n\\n\\tlet money = ns.getServerMoneyAvailable(target);\\n\\tlet oldMoney = 0;\\n\\n\\tlet security = ns.getServerSecurityLevel(target);\\n\\tlet oldSecurity = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (money != oldMoney) {\\n\\t\\t\\tns.print(`Money: ${Math.floor(money)}`);\\n\\t\\t}\\n\\t\\toldMoney = money;\\n\\t\\tmoney = ns.getServerMoneyAvailable(target);\\n\\t\\tif (security != oldSecurity) {\\n\\t\\t\\tns.print(`Security: ${Math.floor(security)}`);\\n\\t\\t}\\n\\t\\toldSecurity = security;\\n\\t\\tsecurity = ns.getServerSecurityLevel(target);\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/old/hackMonitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":413}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n\\n    ns.disableLog('ALL');\\n\\n    let moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    let securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        let securityLevel = ns.getServerSecurityLevel(target);\\n        let money = ns.getServerMoneyAvailable(target);\\n        if (securityLevel > securityThresh) {\\n            ns.print(`WeakenTime: ${ns.getWeakenTime(target)}`);\\n            let decrease = await ns.weaken(target);\\n            ns.print(`Weaken: ${securityLevel} -> ${securityLevel - decrease}`)\\n        } else if (money < moneyThresh) {\\n            ns.print(`GrowTimer: ${ns.getGrowTime(target)}`);\\n            let multiplier = await ns.grow(target);\\n            ns.print(`Grow: ${money} -> ${money * multiplier}`);\\n        } else {\\n            ns.print(`HackTimer: ${ns.getHackTime(target)}`);\\n            let stolenMoney = await ns.hack(target);\\n            ns.print(`Hack: ${stolenMoney}`);\\n        }\\n    }\\n}\",\"filename\":\"/old/smartHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":414}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { numberSquish } from './lib.js';\\r\\n\\r\\n/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let symbols = ns.stock.getSymbols();\\r\\n\\r\\n    let budget = ns.getServerMoneyAvailable('home') * (Number.parseFloat(ns.args[0]) || 0);\\r\\n    let totalSpent = 0;\\r\\n\\r\\n    while (true) {\\r\\n        let spendingMoney = budget - totalSpent;\\r\\n\\r\\n        symbols.sort((a, b) => Math.abs(ns.stock.getForecast(b) - 0.5) - Math.abs(ns.stock.getForecast(a) - 0.5));\\r\\n\\r\\n        for (let symbol of symbols) {\\r\\n            let forecast = ns.stock.getForecast(symbol);\\r\\n            let position = ns.stock.getPosition(symbol);\\r\\n            if (forecast > 0.6) {\\r\\n                let price = ns.stock.getAskPrice(symbol);\\r\\n                let amount = Math.min(Math.floor(spendingMoney / price), ns.stock.getMaxShares(symbol)) - position[0];\\r\\n                if (ns.stock.buy(symbol, amount) > 0) {\\r\\n                    ns.tprint('Baught long: ' + symbol + ' * ' + position[0]);\\r\\n                    totalSpent += price;\\r\\n                }\\r\\n            } else if (forecast < 0.4) {\\r\\n                // let price = ns.stock.getBidPrice(symbol);\\r\\n                // let amount = Math.min(Math.floor(spendingMoney / price), ns.stock.getMaxShares(symbol)) - position[2];\\r\\n                // if (ns.stock.short(symbol, amount) > 0) {\\r\\n                //     ns.tprint('Baught short: ' + symbol + ' * ' + position[0]);\\r\\n                //     totalSpent += price;\\r\\n                // }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        let earned = 0;\\r\\n\\r\\n        for (let symbol of symbols) {\\r\\n            let position = ns.stock.getPosition(symbol);\\r\\n            let forecast = ns.stock.getForecast(symbol);\\r\\n            if (position[0] > 0 && forecast < 0.5) {\\r\\n                if (ns.stock.sell(symbol, position[0])) {\\r\\n                    earned += ns.stock.getSaleGain(symbol, position[0], 'Long');\\r\\n                    ns.tprint('Sold long: ' + symbol + ' * ' + position[0]);\\r\\n                } else {\\r\\n                    ns.tprint('ERROR WHILE SELLING');\\r\\n                }\\r\\n            }\\r\\n            if (position[2] > 0 && forecast > 0.5) {\\r\\n                if (ns.stock.sellShort(symbol, position[2]) > 0) {\\r\\n                    earned += ns.stock.getSaleGain(symbol, position[2], 'Short');\\r\\n                    ns.tprint('Sold short: ' + symbol + ' * ' + position[0]);\\r\\n                } else {\\r\\n                    ns.tprint('ERROR WHILE SELLING');\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        budget += earned * 0.9;\\r\\n        if (earned > 0) ns.tprint('SpendingMoney: (For every Earing only 90% is added back to the budget): ' + numberSquish(budget - totalSpent));\\r\\n\\r\\n        await ns.sleep(2000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"stockManager.js\",\"url\":\"blob:file:///16d9ebbe-5683-4aec-8838-c51e926ad8b5\",\"module\":{},\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:file:///984a2c15-5850-47e1-b04d-6c947b596946\"},{\"filename\":\"stockManager.js\",\"url\":\"blob:file:///16d9ebbe-5683-4aec-8838-c51e926ad8b5\"}],\"ramUsage\":21.7,\"server\":\"home\",\"moduleSequenceNumber\":758}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///051af196-18ee-4b59-b8fb-e4473cf895ac\",\"module\":{},\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///051af196-18ee-4b59-b8fb-e4473cf895ac\"}],\"ramUsage\":10.25,\"server\":\"home\",\"moduleSequenceNumber\":759}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.sleep(1000);\\r\\n        ns.tprint(ns.getTimeSinceLastAug() % 1000000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"timer.js\",\"url\":\"blob:file:///76369718-6607-40d2-b8f2-285679f62a19\",\"module\":\"\",\"dependencies\":[{\"filename\":\"timer.js\",\"url\":\"blob:file:///76369718-6607-40d2-b8f2-285679f62a19\"}],\"ramUsage\":1.65,\"server\":\"home\",\"moduleSequenceNumber\":417}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    var server = ns.args[0];\\r\\n    var sleeptime = ns.args[1];\\r\\n    await ns.sleep(sleeptime);\\r\\n    await ns.grow(server);\\r\\n}\\r\\n\",\"filename\":\"/newserver/grow.js\",\"url\":\"blob:file:///8e0203e9-fdc5-4baa-b451-909ed1e05f9d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:file:///8e0203e9-fdc5-4baa-b451-909ed1e05f9d\"}],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":418}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    var server = ns.args[0];\\r\\n    var sleeptime = ns.args[1];\\r\\n    await ns.sleep(sleeptime);\\r\\n    await ns.hack(server);\\r\\n}\\r\\n\",\"filename\":\"/newserver/hack.js\",\"url\":\"blob:file:///8073161e-e817-49ca-8912-56fbafeebc23\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:file:///8073161e-e817-49ca-8912-56fbafeebc23\"}],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":419}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"..\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    var server = ns.args[0]; //Host to hack\\r\\n    var server2 = ns.getHostname(); //Server to run scripts on\\r\\n    var i = 0;\\r\\n    var c = 0;\\r\\n    var player = ns.getPlayer();\\r\\n    var fserver = ns.getServer(server);\\r\\n    var contstantRam = ns.getScriptRam('/newserver/OP.ns'); //grabbing script RAM values\\r\\n    var hackscriptRam = ns.getScriptRam('/newserver/hack.js');\\r\\n    var growscriptRam = ns.getScriptRam('/newserver/grow.js');\\r\\n    var weakenscriptRam = ns.getScriptRam('/newserver/weaken.js');\\r\\n    var maxRam = ns.getServerMaxRam(server2) - contstantRam; //getting total RAM I can use that doesnt include the OP script\\r\\n    var weakenThreads = 2000 - ns.getServerMinSecurityLevel(server) / 0.05;\\r\\n    var maxGrowThreads = maxRam / growscriptRam - weakenscriptRam * 2000;\\r\\n    var cs = ns.getServerSecurityLevel(server);\\r\\n    var ms = ns.getServerMinSecurityLevel(server);\\r\\n    var mm = ns.getServerMaxMoney(server);\\r\\n    var ma = ns.getServerMoneyAvailable(server);\\r\\n\\r\\n    //Priming the server.  Max money and Min security must be acheived for this to work\\r\\n    if (ma < mm == true) {\\r\\n        ns.exec('/newserver/weaken.js', server2, 2000, server, 0);\\r\\n        ns.exec('/newserver/grow.js', server2, maxGrowThreads, server, 0);\\r\\n        var WeakenTime = ns.formulas.hacking.weakenTime(fserver, player);\\r\\n        await ns.sleep(WeakenTime + 1000);\\r\\n        mm = ns.getServerMaxMoney(server);\\r\\n        ma = ns.getServerMoneyAvailable(server);\\r\\n        player = ns.getPlayer();\\r\\n        fserver = ns.getServer(server);\\r\\n        cs = ns.getServerSecurityLevel(server);\\r\\n        ms = ns.getServerMinSecurityLevel(server);\\r\\n    }\\r\\n\\r\\n    //If Max Money is true, making sure security level is at its minimum\\r\\n    if (cs > ms == true) {\\r\\n        ns.exec('/newserver/weaken.js', server2, 2000, server, 0);\\r\\n        WeakenTime = ns.formulas.hacking.weakenTime(fserver, player);\\r\\n        await ns.sleep(WeakenTime + 1000);\\r\\n        cs = ns.getServerSecurityLevel(server);\\r\\n        ms = ns.getServerMinSecurityLevel(server);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Finished Priming');\\r\\n\\r\\n    //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\r\\n    player = ns.getPlayer();\\r\\n    fserver = ns.getServer(server);\\r\\n\\r\\n    var HPercent = ns.formulas.hacking.hackPercent(fserver, player) * 100;\\r\\n    var GPercent = ns.formulas.hacking.growPercent(fserver, 1, player, 1);\\r\\n    WeakenTime = ns.formulas.hacking.weakenTime(fserver, player);\\r\\n    var GrowTime = ns.formulas.hacking.growTime(fserver, player);\\r\\n    var HackTime = ns.formulas.hacking.hackTime(fserver, player);\\r\\n\\r\\n    var growThreads = Math.round(5 / (GPercent - 1)); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\r\\n    var hackThreads = Math.round(50 / HPercent); //Getting the amount of threads I need to hack 50% of the funds\\r\\n    weakenThreads = Math.round(weakenThreads - growThreads * 0.004); //Getting required threads to fully weaken the server\\r\\n\\r\\n    var totalRamForRun = hackscriptRam * hackThreads + growscriptRam * growThreads + weakenscriptRam * weakenThreads; //Calculating how much RAM is used for a single run\\r\\n    var sleepTime = WeakenTime / (maxRam / totalRamForRun); //finding how many runs this server can handle and setting the time between run execution\\r\\n\\r\\n    //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\r\\n    //{sleepTime = 500;\\r\\n    //}\\r\\n\\r\\n    var shiftCount = maxRam / totalRamForRun;\\r\\n    var offset = sleepTime / 2;\\r\\n    var gOffset = offset / 4;\\r\\n    var hOffset = offset / 2;\\r\\n\\r\\n    while (true) {\\r\\n        var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\r\\n        var gsleep = WeakenTime - GrowTime - gOffset; //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\r\\n        var hsleep = WeakenTime - HackTime - hOffset; //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\r\\n        var UsedRam = ns.getServerUsedRam(server2);\\r\\n\\r\\n        if (totalRamForRun >= maxRam - UsedRam == false) {\\r\\n            //making sure I have enough RAM to do a full run\\r\\n            ns.exec('/newserver/weaken.js', server2, weakenThreads, server, wsleep, i);\\r\\n            ns.exec('/newserver/grow.js', server2, growThreads, server, gsleep, i);\\r\\n            ns.exec('/newserver/hack.js', server2, hackThreads, server, hsleep, i);\\r\\n\\r\\n            if (c < shiftCount) {\\r\\n                await ns.sleep(sleepTime);\\r\\n                c++;\\r\\n            } else {\\r\\n                await ns.sleep(sleepTime + offset);\\r\\n                c = 0;\\r\\n            }\\r\\n\\r\\n            i++;\\r\\n        } else {\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    await ns.sleep(120000);\\r\\n}\\r\\n\",\"filename\":\"/newserver/OP.js\",\"url\":\"blob:file:///88d5eb31-8a62-496b-b169-8a07bbcd3fd5\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newserver/OP.js\",\"url\":\"blob:file:///88d5eb31-8a62-496b-b169-8a07bbcd3fd5\"}],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":420}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    var server = ns.args[0];\\r\\n    var sleeptime = ns.args[1];\\r\\n    await ns.sleep(sleeptime);\\r\\n    await ns.weaken(server);\\r\\n}\\r\\n\",\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:file:///a4172dfe-7e7f-443a-a221-441d4aeb7b64\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:file:///a4172dfe-7e7f-443a-a221-441d4aeb7b64\"}],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":421}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"blank-0\",\"blank-1\",\"blank-2\",\"blank-3\",\"blank-4\",\"blank-5\",\"blank-6\",\"blank-7\",\"blank-8\",\"blank-9\",\"blank-10\",\"blank-11\",\"blank-12\",\"blank-13\",\"blank-14\",\"blank-15\",\"blank-16\",\"blank-17\",\"blank-18\",\"blank-19\",\"blank-20\",\"blank-21\",\"blank-22\",\"blank-23\",\"blank-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"alpha-omega.txt\",\"text\":\"Alpha and Omega\\r\\n\\r\\nThen we saw a new Heaven and a new Earth, for our first Heaven and Earth had gone away, and our sea was no more. And we saw a new holy city, new Aeria, coming down out of this new Heaven, prepared as a bride adorned for her husband. And we heard a loud voice saying, 'Behold, the new dwelling place of the Gods. We will dwell with them, and they will be our people, and we will be with them as their Gods. We will wipe away every tear from their eyes, and death shall be no more, neither shall there be mourning, nor crying, nor pain anymore, for the former things have passed away.'\\r\\n\\r\\nAnd once we were seated on the throne we said 'Behold, I am making all things new.' Also we said, 'Write this down, for these words are trustworthy and true.' And we said to you, 'It is done! I am the Alpha and the Omega, the beginning and the end. To the thirsty I will give from the spring of the water of life without payment. The one who conquers will have this heritage, and we will be his God and he will be our son. But as for the cowardly, the faithless, the detestable, as for murderers, the sexually immoral, sorcerers, idolaters, and all liars, their portion will be in the lake that burns with fire and sulfur, for it is the second true death.'\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"46.2.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":1119}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"ecorp\",\"moduleSequenceNumber\":1120}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":1121}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":30337829085,\"moneyMax\":758445727125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1244,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"17.2.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":1089}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"megacorp\",\"moduleSequenceNumber\":1090}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":1091}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":40587439318,\"moneyMax\":1014685982950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1334,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"16.1.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1113}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1114}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1115}}],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":61.156,\"minDifficulty\":24,\"moneyAvailable\":683215566575,\"moneyMax\":683215566575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":908,\"serverGrowth\":65}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"48.6.0.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":1131}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blade\",\"moduleSequenceNumber\":1132}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":1133}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":479586566650,\"moneyMax\":479586566650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":996,\"serverGrowth\":77}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"54.1.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":1047}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"nwo\",\"moduleSequenceNumber\":1048}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":1049}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22276252122,\"moneyMax\":556906303050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1163,\"serverGrowth\":74}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"84.6.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1065}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1066}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1067}}],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":23792056877,\"moneyMax\":594801421925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1098,\"serverGrowth\":45}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"5.1.7.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":1107}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"omnitek\",\"moduleSequenceNumber\":1108}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":1109}}],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":344581645700,\"moneyMax\":344581645700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1010,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"62.1.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":1041}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"4sigma\",\"moduleSequenceNumber\":1042}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":1043}}],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":15737603137,\"moneyMax\":393440078425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1138,\"serverGrowth\":92}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"54.2.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1059}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1060}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1061}}],\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":21831574079,\"moneyMax\":545789351975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1095,\"serverGrowth\":95}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"55.7.3.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1035}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1036}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1037}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1452166509,\"moneyMax\":36304162725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1122,\"serverGrowth\":98}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"90.0.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1071}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1072}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1073}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1415,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"94.3.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":1101}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"stormtech\",\"moduleSequenceNumber\":1102}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":1103}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":29.163999999999938,\"minDifficulty\":28,\"moneyAvailable\":288,\"moneyMax\":28402802500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":888,\"serverGrowth\":80}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"8.3.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":957}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"defcomm\",\"moduleSequenceNumber\":958}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":959}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":30.35599999999991,\"minDifficulty\":29,\"moneyAvailable\":341,\"moneyMax\":22213004525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":948,\"serverGrowth\":61}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"1.2.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":999}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"infocomm\",\"moduleSequenceNumber\":1000}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":1001}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":5882.516902958211,\"moneyMax\":20461161375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":894,\"serverGrowth\":51}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"36.9.9.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":1053}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"helios\",\"moduleSequenceNumber\":1054}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":1055}}],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":16397997850,\"moneyMax\":16397997850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":72}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"35.5.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":1017}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"vitalife\",\"moduleSequenceNumber\":1018}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":1019}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":81.7829421046199,\"moneyMax\":19174918450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":75}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"94.0.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":945}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"icarus\",\"moduleSequenceNumber\":946}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":947}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":32,\"minDifficulty\":32,\"moneyAvailable\":24882656600,\"moneyMax\":24882656600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":903,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"25.2.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":963}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"univ-energy\",\"moduleSequenceNumber\":964}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":965}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":29.475999999999733,\"minDifficulty\":28,\"moneyAvailable\":190,\"moneyMax\":29948262400,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":859,\"serverGrowth\":90}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"69.2.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1029}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1030}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1031}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":27.60999999999964,\"minDifficulty\":26,\"moneyAvailable\":231,\"moneyMax\":22155974175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":80}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"68.6.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":981}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"microdyne\",\"moduleSequenceNumber\":982}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":983}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":25.777624999999997,\"minDifficulty\":24,\"moneyAvailable\":9249506845,\"moneyMax\":15429407375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":871,\"serverGrowth\":79}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"69.5.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":975}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":976}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":977}}],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":4809474.423045924,\"moneyMax\":21932155275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":889,\"serverGrowth\":77}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"32.9.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":849}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":850}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":851}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":20.728,\"minDifficulty\":19,\"moneyAvailable\":3051.5589661729537,\"moneyMax\":20523818250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":70}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"79.7.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":861}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"aerocorp\",\"moduleSequenceNumber\":862}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":863}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":7407345.331440754,\"moneyMax\":26734652375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":922,\"serverGrowth\":56}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"9.8.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":939}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"omnia\",\"moduleSequenceNumber\":940}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":941}}],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":6230011.05854366,\"moneyMax\":24540340600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":915,\"serverGrowth\":69}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"73.5.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":1005}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"zb-def\",\"moduleSequenceNumber\":1006}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":1007}}],\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":23636045875,\"moneyMax\":23636045875,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":806,\"serverGrowth\":70}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"18.1.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1095}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1096}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1097}}],\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":480.62776329979533,\"moneyMax\":18186874650,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":809,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"44.1.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":993}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"solaris\",\"moduleSequenceNumber\":994}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":995}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":327454.04050152097,\"moneyMax\":20271216350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":761,\"serverGrowth\":77}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"99.1.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":951}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"deltaone\",\"moduleSequenceNumber\":952}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":953}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":29.51799999999968,\"minDifficulty\":28,\"moneyAvailable\":270,\"moneyMax\":38934398850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":827,\"serverGrowth\":51}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"36.9.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1173}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1174}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1175}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":100,\"minDifficulty\":25,\"moneyAvailable\":4275221515.763133,\"moneyMax\":42380427850,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":836,\"serverGrowth\":82}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"0.8.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":1023}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"nova-med\",\"moduleSequenceNumber\":1024}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":1025}}],\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":100,\"minDifficulty\":26,\"moneyAvailable\":30179628325,\"moneyMax\":30179628325,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":782,\"serverGrowth\":85}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"11.4.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":969}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"zeus-med\",\"moduleSequenceNumber\":970}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":971}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":29.355999999999792,\"minDifficulty\":28,\"moneyAvailable\":320,\"moneyMax\":34416542400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"98.5.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":987}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"unitalife\",\"moduleSequenceNumber\":988}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":989}}],\"serversOnNetwork\":[\"snap-fitness\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25.03200000000001,\"minDifficulty\":25,\"moneyAvailable\":26381842450,\"moneyMax\":26381842450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":782,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"8.9.1.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":843}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":844}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":845}}],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":24.002,\"minDifficulty\":24,\"moneyAvailable\":280.89123697336413,\"moneyMax\":18040596625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":728,\"serverGrowth\":62}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"36.9.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1167}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1168}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1169}}],\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":20.412750000000003,\"minDifficulty\":18,\"moneyAvailable\":15912107625,\"moneyMax\":15912107625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":517,\"serverGrowth\":58}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"49.6.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":855}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":856}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":857}}],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":26.306375000000003,\"minDifficulty\":23,\"moneyAvailable\":16077417353.419209,\"moneyMax\":17162818625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":537,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"81.8.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":921}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"aevum-police\",\"moduleSequenceNumber\":922}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":923}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":3990639483,\"moneyMax\":6693730425,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":433,\"serverGrowth\":42}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"30.0.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":909}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":910}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":911}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":5623232125,\"moneyMax\":5623232125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":406,\"serverGrowth\":44}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"39.5.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":897}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"zb-institute\",\"moduleSequenceNumber\":898}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":899}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":2133326537.979024,\"moneyMax\":20928192300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":731,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"32.7.4.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1155}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1156}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1157}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":27.972000000000005,\"minDifficulty\":22,\"moneyAvailable\":7973050125,\"moneyMax\":7973050125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":425,\"serverGrowth\":54}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"29.9.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":1161}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"syscore\",\"moduleSequenceNumber\":1162}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":1163}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":27.55,\"minDifficulty\":24,\"moneyAvailable\":12285175275,\"moneyMax\":12285175275,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":568,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"47.9.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":915}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"catalyst\",\"moduleSequenceNumber\":916}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":917}}],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":24.082,\"minDifficulty\":22,\"moneyAvailable\":6027592248,\"moneyMax\":10104248775,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":438,\"serverGrowth\":43}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"40.2.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":885}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"the-hub\",\"moduleSequenceNumber\":886}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":887}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":12,\"minDifficulty\":12,\"moneyAvailable\":602695191,\"moneyMax\":4768166325,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":293,\"serverGrowth\":53}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"57.5.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":825}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"comptek\",\"moduleSequenceNumber\":826}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":827}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":21.778,\"minDifficulty\":19,\"moneyAvailable\":5812417725,\"moneyMax\":5812417725,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":380,\"serverGrowth\":61}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"78.4.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":891}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"netlink\",\"moduleSequenceNumber\":892}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":893}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":26.530249999999995,\"minDifficulty\":24,\"moneyAvailable\":5976045208.429534,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":397,\"serverGrowth\":75}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"1.6.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":903}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":904}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":905}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":18.35,\"minDifficulty\":18,\"moneyAvailable\":223597926,\"moneyMax\":1863772050,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":276,\"serverGrowth\":39}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"16.5.8.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":777}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"n00dles\",\"moduleSequenceNumber\":778}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":779}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"71.8.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":783}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":784}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":785}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.084,\"minDifficulty\":3,\"moneyAvailable\":27949202,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"32.1.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":795}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":796}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":797}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"27.3.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":801}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"joesguns\",\"moduleSequenceNumber\":802}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":803}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"8.3.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":873}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"zer0\",\"moduleSequenceNumber\":874}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":875}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":478.66200736235055,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"75.5.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":789}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"nectar-net\",\"moduleSequenceNumber\":790}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":791}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":9.491999999999999,\"minDifficulty\":7,\"moneyAvailable\":313978.4726145847,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"91.3.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":1143}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"neo-net\",\"moduleSequenceNumber\":1144}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1145}}],\"serversOnNetwork\":[\"max-hardware\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"54.1.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":879}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"silver-helix\",\"moduleSequenceNumber\":880}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":881}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.23,\"minDifficulty\":10,\"moneyAvailable\":275428064,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"59.1.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":807}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":808}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":809}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"7.7.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":867}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":868}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":869}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.052,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"62.0.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":819}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"phantasy\",\"moduleSequenceNumber\":820}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":821}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.002,\"minDifficulty\":7,\"moneyAvailable\":1995.965155718848,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"71.9.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1137}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1138}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1139}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"47.8.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":1179}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"omega-net\",\"moduleSequenceNumber\":1180}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1181}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":32,\"hackDifficulty\":11.002,\"minDifficulty\":11,\"moneyAvailable\":4397.689267752896,\"moneyMax\":1615592050,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":220,\"serverGrowth\":35}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"8.4.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1149}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1150}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1151}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":1172742525,\"moneyMax\":1172742525,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":239,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"16.5.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1185}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1186}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1187}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":79.60157726354419,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"65.4.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":927}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":928}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":929}}],\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":20.634,\"minDifficulty\":16,\"moneyAvailable\":6250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":500,\"serverGrowth\":34}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"11.2.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1083}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1084}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1085}}],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":21.364,\"minDifficulty\":19,\"moneyAvailable\":22500000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":958,\"serverGrowth\":57}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"44.1.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":933}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":934}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":935}}],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":17.067499999999995,\"minDifficulty\":15,\"moneyAvailable\":6739688572,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":775,\"serverGrowth\":44}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"9.6.8.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1011}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1012}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1013}}],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":549,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"23.9.0.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":837}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":838}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":839}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":343,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"23.2.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":831}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":832}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":833}}],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":212,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"16.8.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":1077}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\".\",\"moduleSequenceNumber\":1078}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1079}}],\"serversOnNetwork\":[\"helios\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":509,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"81.6.9.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":813}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"CSEC\",\"moduleSequenceNumber\":814}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":815}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"92.4.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1125}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1126}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1127}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"76.4.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"23.3.8.8\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":1191}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"darkweb\",\"moduleSequenceNumber\":1192}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":1193}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-0\",\"httpPortOpen\":false,\"ip\":\"18.9.3.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///d8e17a12-ca29-4514-9b28-22b76dfa5d2a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///d8e17a12-ca29-4514-9b28-22b76dfa5d2a\"}],\"ramUsage\":10.25,\"server\":\"blank-0\",\"moduleSequenceNumber\":1200}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-0\",\"moduleSequenceNumber\":636}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-0\",\"moduleSequenceNumber\":1197}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-0\",\"moduleSequenceNumber\":1198}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-0\",\"moduleSequenceNumber\":1199}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-1\",\"httpPortOpen\":false,\"ip\":\"6.8.3.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///b7b111bd-ff0a-4493-a74d-99f66d45f31c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///b7b111bd-ff0a-4493-a74d-99f66d45f31c\"}],\"ramUsage\":10.25,\"server\":\"blank-1\",\"moduleSequenceNumber\":1207}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-1\",\"moduleSequenceNumber\":641}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-1\",\"moduleSequenceNumber\":1204}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-1\",\"moduleSequenceNumber\":1205}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-1\",\"moduleSequenceNumber\":1206}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-2\",\"httpPortOpen\":false,\"ip\":\"97.0.5.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///382c5d39-b4b2-416e-b9c2-b5bd53d343c0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///382c5d39-b4b2-416e-b9c2-b5bd53d343c0\"}],\"ramUsage\":10.25,\"server\":\"blank-2\",\"moduleSequenceNumber\":1214}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-2\",\"moduleSequenceNumber\":646}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-2\",\"moduleSequenceNumber\":1211}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-2\",\"moduleSequenceNumber\":1212}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-2\",\"moduleSequenceNumber\":1213}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-3\",\"httpPortOpen\":false,\"ip\":\"42.2.3.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///51f044b4-d750-4f47-9108-ce1660255044\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///51f044b4-d750-4f47-9108-ce1660255044\"}],\"ramUsage\":10.25,\"server\":\"blank-3\",\"moduleSequenceNumber\":1221}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-3\",\"moduleSequenceNumber\":651}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-3\",\"moduleSequenceNumber\":1218}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-3\",\"moduleSequenceNumber\":1219}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-3\",\"moduleSequenceNumber\":1220}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-4\",\"httpPortOpen\":false,\"ip\":\"57.8.7.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///0ffa016d-759c-41ed-9a48-01c3298edd9f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///0ffa016d-759c-41ed-9a48-01c3298edd9f\"}],\"ramUsage\":10.25,\"server\":\"blank-4\",\"moduleSequenceNumber\":1228}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-4\",\"moduleSequenceNumber\":656}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-4\",\"moduleSequenceNumber\":1225}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-4\",\"moduleSequenceNumber\":1226}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-4\",\"moduleSequenceNumber\":1227}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-5\",\"httpPortOpen\":false,\"ip\":\"72.4.7.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///24601dd9-d74b-4c25-97a8-1b882643da54\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///24601dd9-d74b-4c25-97a8-1b882643da54\"}],\"ramUsage\":10.25,\"server\":\"blank-5\",\"moduleSequenceNumber\":1235}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-5\",\"moduleSequenceNumber\":661}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-5\",\"moduleSequenceNumber\":1232}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-5\",\"moduleSequenceNumber\":1233}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-5\",\"moduleSequenceNumber\":1234}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-6\",\"httpPortOpen\":false,\"ip\":\"51.3.0.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///54c14acb-40c1-4772-9aaa-98b2a41aa6a4\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///54c14acb-40c1-4772-9aaa-98b2a41aa6a4\"}],\"ramUsage\":10.25,\"server\":\"blank-6\",\"moduleSequenceNumber\":1242}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-6\",\"moduleSequenceNumber\":666}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-6\",\"moduleSequenceNumber\":1239}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-6\",\"moduleSequenceNumber\":1240}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-6\",\"moduleSequenceNumber\":1241}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-7\",\"httpPortOpen\":false,\"ip\":\"21.0.7.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///055da5ca-ba92-49d6-b243-d6d94b20d670\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///055da5ca-ba92-49d6-b243-d6d94b20d670\"}],\"ramUsage\":10.25,\"server\":\"blank-7\",\"moduleSequenceNumber\":1249}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-7\",\"moduleSequenceNumber\":671}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-7\",\"moduleSequenceNumber\":1246}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-7\",\"moduleSequenceNumber\":1247}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-7\",\"moduleSequenceNumber\":1248}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-8\",\"httpPortOpen\":false,\"ip\":\"91.3.0.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c5df4ac6-a4a8-4861-b50d-6ed9d3667fd6\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c5df4ac6-a4a8-4861-b50d-6ed9d3667fd6\"}],\"ramUsage\":10.25,\"server\":\"blank-8\",\"moduleSequenceNumber\":1256}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-8\",\"moduleSequenceNumber\":676}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-8\",\"moduleSequenceNumber\":1253}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-8\",\"moduleSequenceNumber\":1254}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-8\",\"moduleSequenceNumber\":1255}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-9\",\"httpPortOpen\":false,\"ip\":\"5.3.3.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///976a69c6-ad99-4fe5-88d4-1e3efad849b4\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///976a69c6-ad99-4fe5-88d4-1e3efad849b4\"}],\"ramUsage\":10.25,\"server\":\"blank-9\",\"moduleSequenceNumber\":1263}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-9\",\"moduleSequenceNumber\":681}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-9\",\"moduleSequenceNumber\":1260}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-9\",\"moduleSequenceNumber\":1261}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-9\",\"moduleSequenceNumber\":1262}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-10\",\"httpPortOpen\":false,\"ip\":\"43.8.4.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///991b3ac1-ca79-4373-a40a-fd44c6544319\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///991b3ac1-ca79-4373-a40a-fd44c6544319\"}],\"ramUsage\":10.25,\"server\":\"blank-10\",\"moduleSequenceNumber\":1270}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-10\",\"moduleSequenceNumber\":686}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-10\",\"moduleSequenceNumber\":1267}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-10\",\"moduleSequenceNumber\":1268}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-10\",\"moduleSequenceNumber\":1269}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-11\",\"httpPortOpen\":false,\"ip\":\"3.9.1.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///f471b598-8a59-4cf5-9cb0-3dbcf7efda52\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///f471b598-8a59-4cf5-9cb0-3dbcf7efda52\"}],\"ramUsage\":10.25,\"server\":\"blank-11\",\"moduleSequenceNumber\":1277}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-11\",\"moduleSequenceNumber\":691}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-11\",\"moduleSequenceNumber\":1274}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-11\",\"moduleSequenceNumber\":1275}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-11\",\"moduleSequenceNumber\":1276}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-12\",\"httpPortOpen\":false,\"ip\":\"67.9.6.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///3e5f89a8-8f81-489d-8b37-f59d056185d9\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///3e5f89a8-8f81-489d-8b37-f59d056185d9\"}],\"ramUsage\":10.25,\"server\":\"blank-12\",\"moduleSequenceNumber\":1284}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-12\",\"moduleSequenceNumber\":696}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-12\",\"moduleSequenceNumber\":1281}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-12\",\"moduleSequenceNumber\":1282}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-12\",\"moduleSequenceNumber\":1283}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-13\",\"httpPortOpen\":false,\"ip\":\"15.0.7.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///40754cd9-3a0e-4df2-901f-e98c423c36de\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///40754cd9-3a0e-4df2-901f-e98c423c36de\"}],\"ramUsage\":10.25,\"server\":\"blank-13\",\"moduleSequenceNumber\":1291}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-13\",\"moduleSequenceNumber\":701}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-13\",\"moduleSequenceNumber\":1288}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-13\",\"moduleSequenceNumber\":1289}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-13\",\"moduleSequenceNumber\":1290}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-14\",\"httpPortOpen\":false,\"ip\":\"93.4.1.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c0eac615-35cc-4a45-9497-e18c03af3598\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c0eac615-35cc-4a45-9497-e18c03af3598\"}],\"ramUsage\":10.25,\"server\":\"blank-14\",\"moduleSequenceNumber\":1298}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-14\",\"moduleSequenceNumber\":706}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-14\",\"moduleSequenceNumber\":1295}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-14\",\"moduleSequenceNumber\":1296}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-14\",\"moduleSequenceNumber\":1297}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-15\",\"httpPortOpen\":false,\"ip\":\"23.8.8.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c7135767-afaa-4012-9336-a65e2e8f1c09\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c7135767-afaa-4012-9336-a65e2e8f1c09\"}],\"ramUsage\":10.25,\"server\":\"blank-15\",\"moduleSequenceNumber\":1305}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-15\",\"moduleSequenceNumber\":711}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-15\",\"moduleSequenceNumber\":1302}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-15\",\"moduleSequenceNumber\":1303}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-15\",\"moduleSequenceNumber\":1304}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-16\",\"httpPortOpen\":false,\"ip\":\"2.7.2.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///17f82657-0427-474c-aa11-b56483842815\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///17f82657-0427-474c-aa11-b56483842815\"}],\"ramUsage\":10.25,\"server\":\"blank-16\",\"moduleSequenceNumber\":1312}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-16\",\"moduleSequenceNumber\":716}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-16\",\"moduleSequenceNumber\":1309}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-16\",\"moduleSequenceNumber\":1310}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-16\",\"moduleSequenceNumber\":1311}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-17\",\"httpPortOpen\":false,\"ip\":\"46.3.0.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///74f304ac-2043-4f72-9d42-95827f243604\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///74f304ac-2043-4f72-9d42-95827f243604\"}],\"ramUsage\":10.25,\"server\":\"blank-17\",\"moduleSequenceNumber\":1319}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-17\",\"moduleSequenceNumber\":721}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-17\",\"moduleSequenceNumber\":1316}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-17\",\"moduleSequenceNumber\":1317}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-17\",\"moduleSequenceNumber\":1318}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-18\",\"httpPortOpen\":false,\"ip\":\"80.7.9.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///9601be79-51ec-42f7-9f24-e03607841116\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///9601be79-51ec-42f7-9f24-e03607841116\"}],\"ramUsage\":10.25,\"server\":\"blank-18\",\"moduleSequenceNumber\":1326}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-18\",\"moduleSequenceNumber\":726}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-18\",\"moduleSequenceNumber\":1323}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-18\",\"moduleSequenceNumber\":1324}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-18\",\"moduleSequenceNumber\":1325}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-19\",\"httpPortOpen\":false,\"ip\":\"30.5.8.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///2586f206-757a-4cf8-b68d-bd1b0ccc1b10\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///2586f206-757a-4cf8-b68d-bd1b0ccc1b10\"}],\"ramUsage\":10.25,\"server\":\"blank-19\",\"moduleSequenceNumber\":1333}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-19\",\"moduleSequenceNumber\":731}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-19\",\"moduleSequenceNumber\":1330}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-19\",\"moduleSequenceNumber\":1331}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-19\",\"moduleSequenceNumber\":1332}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-20\",\"httpPortOpen\":false,\"ip\":\"22.0.0.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///97a3c12e-f765-40ad-b4ce-a376bd3ba0e0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///97a3c12e-f765-40ad-b4ce-a376bd3ba0e0\"}],\"ramUsage\":10.25,\"server\":\"blank-20\",\"moduleSequenceNumber\":1340}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-20\",\"moduleSequenceNumber\":736}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-20\",\"moduleSequenceNumber\":1337}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-20\",\"moduleSequenceNumber\":1338}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-20\",\"moduleSequenceNumber\":1339}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-21\",\"httpPortOpen\":false,\"ip\":\"63.5.6.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///0dc2b234-ba9d-4dfa-922b-1b33eed6f22f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///0dc2b234-ba9d-4dfa-922b-1b33eed6f22f\"}],\"ramUsage\":10.25,\"server\":\"blank-21\",\"moduleSequenceNumber\":1347}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-21\",\"moduleSequenceNumber\":741}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-21\",\"moduleSequenceNumber\":1344}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-21\",\"moduleSequenceNumber\":1345}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-21\",\"moduleSequenceNumber\":1346}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-22\",\"httpPortOpen\":false,\"ip\":\"56.6.2.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///6aef6e41-4b75-496e-b7ed-8dbdef2b8ea2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///6aef6e41-4b75-496e-b7ed-8dbdef2b8ea2\"}],\"ramUsage\":10.25,\"server\":\"blank-22\",\"moduleSequenceNumber\":1354}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-22\",\"moduleSequenceNumber\":746}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-22\",\"moduleSequenceNumber\":1351}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-22\",\"moduleSequenceNumber\":1352}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-22\",\"moduleSequenceNumber\":1353}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-23\",\"httpPortOpen\":false,\"ip\":\"83.2.8.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///2a5c0774-5e4c-48fc-9a29-d7efbc1eec45\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///2a5c0774-5e4c-48fc-9a29-d7efbc1eec45\"}],\"ramUsage\":10.25,\"server\":\"blank-23\",\"moduleSequenceNumber\":1361}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-23\",\"moduleSequenceNumber\":751}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-23\",\"moduleSequenceNumber\":1358}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-23\",\"moduleSequenceNumber\":1359}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-23\",\"moduleSequenceNumber\":1360}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-24\",\"httpPortOpen\":false,\"ip\":\"96.7.1.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    ns.tprint(wTime);\\r\\n\\r\\n    let offset = sleepTime / 8;\\r\\n    let gOffset = offset;\\r\\n    let hOffset = offset * 2;\\r\\n\\r\\n    //n00dles:          431 | 1.5 | 3 | 0 -> Works\\r\\n    //foodnstuff:       475 | 1.5 | 3 | 0 -> Works\\r\\n    //sigma-cosmetics:  739 | 1.5 | 3 | 0 -> Failed\\r\\n    //joesguns:         511 | 1.5 | 3 | 0 -> Works\\r\\n    //hong-fang-tea:     | 1.5 | 3 | 0 ->\\r\\n    //harakiri-sushi:    | 1.5 | 3 | 0 -> Failed\\r\\n\\r\\n    let globalOffset = offset * 0;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        gTime = ns.getGrowTime(target);\\r\\n        //ns.tprint(gTime);\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        if (totalRunCount == parallelRuns - 1) {\\r\\n            let player = ns.getPlayer();\\r\\n            let targetServer = ns.getServer(target);\\r\\n            targetServer.hackDifficulty += hSecGain;\\r\\n            gTime = ns.formulas.hacking.growTime(targetServer, player);\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///ea9dbe7a-58b6-4106-a4a1-549d0dcd172c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///ea9dbe7a-58b6-4106-a4a1-549d0dcd172c\"}],\"ramUsage\":10.25,\"server\":\"blank-24\",\"moduleSequenceNumber\":1368}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":16.6,\"server\":\"blank-24\",\"moduleSequenceNumber\":756}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-24\",\"moduleSequenceNumber\":1365}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getServerSecurityLevel(ns.getHostname()));\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"blank-24\",\"moduleSequenceNumber\":1366}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-24\",\"moduleSequenceNumber\":1367}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1011690.4853505769,\"favor\":102,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":92001,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"KuaiGong International\",\"playerReputation\":923697.0078048459}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":25.6145,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1266531.3407895172}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":115.4522,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":1164654.3105944097}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":148.479,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":1345148.3596119245}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":32.1556,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":98.6877,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":46.0861,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":34.0817,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":126.3819,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Volhaven\",\"playerReputation\":115513.58809615659}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":12.3769,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":306564.0531823894}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":41.3791,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":237950.1376022314}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":89.4779,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":1036578.0203769391}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":116.1676,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":1175335.8702218668}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":129.725,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":1237897.864966811}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"sync\":\"run syncScripts.js\",\"do\":\"run handler.js\",\"start\":\"run gameManager.js\",\"reSync\":\"run syncScripts.js restart\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":165043.7720008881,\"lastPrice\":164757.70938791792,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":false,\"otlkMag\":6.922114316445649,\"otlkMagForecast\":28.025786713409914,\"cap\":672134647,\"spreadPerc\":0.1,\"shareTxForMovement\":60392,\"shareTxUntilMovement\":24754,\"totalShares\":88200000,\"maxShares\":17600000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":133306.35822676704,\"lastPrice\":133522.0320317308,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":false,\"otlkMag\":10.38448185294866,\"otlkMagForecast\":34.175560126452964,\"cap\":769306758,\"spreadPerc\":0.1,\"shareTxForMovement\":49502,\"shareTxUntilMovement\":34580,\"totalShares\":73000000,\"maxShares\":14600000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":58103.596786302034,\"lastPrice\":57941.26297483681,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":8.084260570067917,\"otlkMagForecast\":64.99095274449235,\"cap\":343694566,\"spreadPerc\":0.4,\"shareTxForMovement\":85135,\"shareTxUntilMovement\":66870,\"totalShares\":77900000,\"maxShares\":15600000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":34571.451835275526,\"lastPrice\":34483.00523498647,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":8.277977667582988,\"otlkMagForecast\":35.5640791346993,\"cap\":169064072,\"spreadPerc\":0.2,\"shareTxForMovement\":83964,\"shareTxUntilMovement\":83964,\"totalShares\":71400000,\"maxShares\":14300000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":4915.38264075494,\"lastPrice\":4903.000248187196,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":9.089020565941786,\"otlkMagForecast\":63.88546906074289,\"cap\":917994383,\"spreadPerc\":0.4,\"shareTxForMovement\":44814,\"shareTxUntilMovement\":44814,\"totalShares\":42400000,\"maxShares\":8500000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":1813593.654881706,\"lastPrice\":1805755.491553596,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.1,\"b\":false,\"otlkMag\":11.685656413937092,\"otlkMagForecast\":39.557349131132916,\"cap\":1132715580,\"spreadPerc\":0.9,\"shareTxForMovement\":74381,\"shareTxUntilMovement\":46557,\"totalShares\":39100000,\"maxShares\":7800000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":138120.9678938711,\"lastPrice\":137702.56427490144,\"playerShares\":16900000,\"playerAvgPx\":133001.273258014,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":13.60965401127464,\"otlkMagForecast\":72.6129180284565,\"cap\":358919068,\"spreadPerc\":0.6,\"shareTxForMovement\":85019,\"shareTxUntilMovement\":31350,\"totalShares\":84600000,\"maxShares\":16900000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":1063485.5982371948,\"lastPrice\":1068689.3428900724,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":false,\"otlkMag\":7.806178317473614,\"otlkMagForecast\":34.90368171117054,\"cap\":53448832,\"spreadPerc\":1,\"shareTxForMovement\":55622,\"shareTxUntilMovement\":35112,\"totalShares\":63000000,\"maxShares\":12600000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":10518.238752322331,\"lastPrice\":10553.103376658906,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":true,\"otlkMag\":6.573978688298298,\"otlkMagForecast\":54.95754589024191,\"cap\":359341508,\"spreadPerc\":0.7,\"shareTxForMovement\":85395,\"shareTxUntilMovement\":85395,\"totalShares\":54000000,\"maxShares\":10800000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":11274.058287930127,\"lastPrice\":11301.640852578532,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":5.685910065598822,\"otlkMagForecast\":56.10094247053798,\"cap\":204391767,\"spreadPerc\":0.3,\"shareTxForMovement\":66427,\"shareTxUntilMovement\":66427,\"totalShares\":100800000,\"maxShares\":20200000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":8963.95263980192,\"lastPrice\":8943.835726283265,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":9.078150132184984,\"otlkMagForecast\":58.32806074496022,\"cap\":172400802,\"spreadPerc\":0.4,\"shareTxForMovement\":75159,\"shareTxUntilMovement\":75159,\"totalShares\":54700000,\"maxShares\":10900000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":15594.912505071423,\"lastPrice\":15546.44831513066,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":6.253963394404377,\"otlkMagForecast\":42.38929702099147,\"cap\":227503628,\"spreadPerc\":0.7,\"shareTxForMovement\":86198,\"shareTxUntilMovement\":86198,\"totalShares\":78900000,\"maxShares\":15800000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":9873.880585784902,\"lastPrice\":9847.456761377693,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":6.98383856134938,\"otlkMagForecast\":57.872308308459104,\"cap\":251657590,\"spreadPerc\":0.7,\"shareTxForMovement\":99336,\"shareTxUntilMovement\":99336,\"totalShares\":43600000,\"maxShares\":8700000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":43069.198933757216,\"lastPrice\":43171.1708836694,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":9.045946071768904,\"otlkMagForecast\":39.27315187924588,\"cap\":443242679,\"spreadPerc\":0.4,\"shareTxForMovement\":72176,\"shareTxUntilMovement\":69746,\"totalShares\":32400000,\"maxShares\":6500000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":75138.27283953359,\"lastPrice\":75304.31252973495,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":2.6163156357097477,\"otlkMagForecast\":53.773026046086535,\"cap\":145559565,\"spreadPerc\":1,\"shareTxForMovement\":46669,\"shareTxUntilMovement\":46669,\"totalShares\":53300000,\"maxShares\":10700000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":4784.565272866986,\"lastPrice\":4797.970170811408,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":5.89000736702985,\"otlkMagForecast\":45.432058264968376,\"cap\":221333583,\"spreadPerc\":0.8,\"shareTxForMovement\":89240,\"shareTxUntilMovement\":89240,\"totalShares\":42400000,\"maxShares\":8500000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":3023.4293019153984,\"lastPrice\":3032.9737865732823,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":5.502274136327407,\"otlkMagForecast\":47.696441305780155,\"cap\":297703436,\"spreadPerc\":0.9,\"shareTxForMovement\":69252,\"shareTxUntilMovement\":69252,\"totalShares\":45600000,\"maxShares\":9100000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":66238.08258224544,\"lastPrice\":66079.02435546667,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":8.99500474901281,\"otlkMagForecast\":34.14884445228059,\"cap\":435357768,\"spreadPerc\":0.4,\"shareTxForMovement\":107739,\"shareTxUntilMovement\":27500,\"totalShares\":29700000,\"maxShares\":5900000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":36444.04708815907,\"lastPrice\":36342.22721131397,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":7.363514971290839,\"otlkMagForecast\":41.35455926652973,\"cap\":408149618,\"spreadPerc\":0.9,\"shareTxForMovement\":43789,\"shareTxUntilMovement\":43789,\"totalShares\":22500000,\"maxShares\":4500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":9833.858191712887,\"lastPrice\":9735.89146810795,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.55,\"b\":false,\"otlkMag\":6.224922583338881,\"otlkMagForecast\":43.16960841344813,\"cap\":145054778,\"spreadPerc\":0.6,\"shareTxForMovement\":37616,\"shareTxUntilMovement\":27390,\"totalShares\":70500000,\"maxShares\":14100000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":20938.294297544428,\"lastPrice\":21033.311408099296,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.15,\"b\":false,\"otlkMag\":8.837016045575046,\"otlkMagForecast\":41.50282817907279,\"cap\":125770467,\"spreadPerc\":0.8,\"shareTxForMovement\":66618,\"shareTxUntilMovement\":66618,\"totalShares\":56400000,\"maxShares\":11300000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":15397.497914254873,\"lastPrice\":15357.500937513709,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":5.171757504952761,\"otlkMagForecast\":54.33770425841584,\"cap\":52314262,\"spreadPerc\":0.8,\"shareTxForMovement\":92419,\"shareTxUntilMovement\":92419,\"totalShares\":29700000,\"maxShares\":5900000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":8339.400322453419,\"lastPrice\":8281.233184483175,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.78,\"b\":false,\"otlkMag\":1.525282026790806,\"otlkMagForecast\":52.40423313705151,\"cap\":73865209,\"spreadPerc\":1.5,\"shareTxForMovement\":73277,\"shareTxUntilMovement\":73277,\"totalShares\":30100000,\"maxShares\":6000000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":6584.637904583812,\"lastPrice\":6624.912044572061,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.55,\"b\":true,\"otlkMag\":7.762354057954824,\"otlkMagForecast\":58.05101226403506,\"cap\":80921893,\"spreadPerc\":0.6,\"shareTxForMovement\":78125,\"shareTxUntilMovement\":55210,\"totalShares\":47600000,\"maxShares\":9500000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1664.1715671979039,\"lastPrice\":1658.934575021604,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":5.641696276914362,\"otlkMagForecast\":53.63414580818822,\"cap\":84275733,\"spreadPerc\":0.5,\"shareTxForMovement\":103650,\"shareTxUntilMovement\":103650,\"totalShares\":54200000,\"maxShares\":10800000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":19900.151164906893,\"lastPrice\":20092.54233643131,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.45,\"b\":false,\"otlkMag\":12.584383816336336,\"otlkMagForecast\":38.36351663545001,\"cap\":15272652,\"spreadPerc\":1.4,\"shareTxForMovement\":31329,\"shareTxUntilMovement\":22527,\"totalShares\":22200000,\"maxShares\":4400000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":2989.259630300928,\"lastPrice\":3001.055400860936,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":false,\"otlkMag\":10.557916568992834,\"otlkMagForecast\":39.81676115887769,\"cap\":20300455,\"spreadPerc\":1.3,\"shareTxForMovement\":54307,\"shareTxUntilMovement\":26362,\"totalShares\":51100000,\"maxShares\":10200000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":570.1577113237446,\"lastPrice\":571.7776186827064,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":8.827712640807706,\"otlkMagForecast\":38.816053634184186,\"cap\":27061871,\"spreadPerc\":0.7,\"shareTxForMovement\":133317,\"shareTxUntilMovement\":45014,\"totalShares\":33500000,\"maxShares\":6700000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":4098.276742515318,\"lastPrice\":4118.006592883764,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":false,\"otlkMag\":11.154309282655433,\"otlkMagForecast\":38.03186296673225,\"cap\":51002286,\"spreadPerc\":1.2,\"shareTxForMovement\":67563,\"shareTxUntilMovement\":30775,\"totalShares\":11300000,\"maxShares\":2300000}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":4523.859522177265,\"lastPrice\":4570.273109646827,\"playerShares\":6900000,\"playerAvgPx\":2316.217461843792,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.6,\"b\":true,\"otlkMag\":16.993761170286643,\"otlkMagForecast\":67.91348207595529,\"cap\":10924522,\"spreadPerc\":0.7,\"shareTxForMovement\":32538,\"shareTxUntilMovement\":27390,\"totalShares\":34700000,\"maxShares\":6900000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":2140.1773802260855,\"lastPrice\":2128.335467000994,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.41,\"b\":true,\"otlkMag\":8.999435951731867,\"otlkMagForecast\":60.001427360008975,\"cap\":8556124,\"spreadPerc\":1.1,\"shareTxForMovement\":49894,\"shareTxUntilMovement\":49894,\"totalShares\":136600000,\"maxShares\":27300000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":204961.26831635836,\"lastPrice\":204396.67653829264,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":6.737306665357479,\"otlkMagForecast\":57.012268275050936,\"cap\":726452909,\"spreadPerc\":0.7,\"shareTxForMovement\":144636,\"shareTxUntilMovement\":144636,\"totalShares\":12100000,\"maxShares\":2400000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":65203.42780009273,\"lastPrice\":65352.65950497061,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":12.14153621991779,\"otlkMagForecast\":37.00249473070039,\"cap\":203830816,\"spreadPerc\":0.3,\"shareTxForMovement\":132082,\"shareTxUntilMovement\":111172,\"totalShares\":21600000,\"maxShares\":4300000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":436137,\"lastUpdate\":1640430998379,\"ticksUntilCycle\":57}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":100,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":18,\"MonacoVim\":false,\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"}}","VersionSave":"7","AllGangsSave":"","LastExportBonus":"1640285717681","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}