{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":1414,\"hp\":19,\"max_hp\":19,\"strength\":135,\"defense\":92,\"dexterity\":131,\"agility\":77,\"charisma\":205,\"intelligence\":0,\"hacking_chance_mult\":1.554815033680318,\"hacking_speed_mult\":1.5470498274039841,\"hacking_money_mult\":2.598033178265111,\"hacking_grow_mult\":1.5558948246886517,\"hacking_exp\":63847694638.21572,\"strength_exp\":4315.096924264299,\"defense_exp\":2008.0434619648477,\"dexterity_exp\":2328.806085546196,\"agility_exp\":2025.0487700407648,\"charisma_exp\":25237.22186366429,\"intelligence_exp\":0,\"hacking_mult\":2.373049658051238,\"strength_mult\":1.8894786751018986,\"defense_mult\":1.807327428358338,\"dexterity_mult\":2.400582656716962,\"agility_mult\":1.50952915891293,\"charisma_mult\":1.6430249348712163,\"hacking_exp_mult\":4.386119121073361,\"strength_exp_mult\":1.8894786751018988,\"defense_exp_mult\":1.8894786751018988,\"dexterity_exp_mult\":2.1729004763671833,\"agility_exp_mult\":1.8894786751018988,\"charisma_exp_mult\":1.5745655625849158,\"company_rep_mult\":2.0784265426120885,\"faction_rep_mult\":1.5745655625849155,\"money\":893904272548995.5,\"city\":\"Chongqing\",\"location\":\"KuaiGong International\",\"jobs\":{\"KuaiGong International\":\"Junior Software Engineer\",\"Global Pharmaceuticals\":\"Software Engineering Intern\"},\"companyName\":\"KuaiGong International\",\"currentServer\":\"home\",\"purchasedServers\":[\"blank-0\",\"blank-1\",\"blank-2\",\"blank-3\",\"blank-4\",\"blank-5\",\"blank-6\",\"blank-7\",\"blank-8\",\"blank-9\",\"blank-10\",\"blank-11\",\"blank-12\",\"blank-13\",\"blank-14\",\"blank-15\",\"blank-16\",\"blank-17\",\"blank-18\",\"blank-19\",\"blank-20\",\"blank-21\",\"blank-22\",\"blank-23\",\"blank-24\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":157500.6000001818,\"ram\":64,\"totalMoneyGenerated\":4479082185.483421,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":157500.6000001818,\"ram\":64,\"totalMoneyGenerated\":4475962190.927573,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":157500.6000001818,\"ram\":64,\"totalMoneyGenerated\":4475486242.0831785,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":157500.6000001818,\"ram\":64,\"totalMoneyGenerated\":4475424079.20892,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":157500.6000001818,\"ram\":64,\"totalMoneyGenerated\":4475326126.301806,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":157500.6000001818,\"ram\":64,\"totalMoneyGenerated\":4474177092.264533,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":157500.6000001818,\"ram\":64,\"totalMoneyGenerated\":4474079844.649636,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":157500.6000001818,\"ram\":64,\"totalMoneyGenerated\":4473967786.401386,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":157500.6000001818,\"ram\":64,\"totalMoneyGenerated\":4473886361.728318,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":156894.00000014692,\"ram\":64,\"totalMoneyGenerated\":4473387009.303302,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":155993.40000009595,\"ram\":64,\"totalMoneyGenerated\":4472442918.46601,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":155993.40000009595,\"ram\":64,\"totalMoneyGenerated\":4472365019.477504,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":155993.40000009595,\"ram\":64,\"totalMoneyGenerated\":4472200618.427819,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":155993.40000009595,\"ram\":64,\"totalMoneyGenerated\":4471868415.264175,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":155587.0000000744,\"ram\":64,\"totalMoneyGenerated\":4471741039.343989,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":155587.0000000744,\"ram\":64,\"totalMoneyGenerated\":4471557398.305263,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":155453.40000006702,\"ram\":64,\"totalMoneyGenerated\":4470685172.41424,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":155392.80000006364,\"ram\":64,\"totalMoneyGenerated\":4469715977.108885,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":155205.6000000548,\"ram\":64,\"totalMoneyGenerated\":4466018064.517282,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":155053.8000000528,\"ram\":64,\"totalMoneyGenerated\":4462688133.439686,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":154952.20000004733,\"ram\":64,\"totalMoneyGenerated\":4460180813.794303,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":154749.8000000436,\"ram\":64,\"totalMoneyGenerated\":4455185917.17791,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":154445.80000004618,\"ram\":64,\"totalMoneyGenerated\":4446710825.795643,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":154243.60000003528,\"ram\":64,\"totalMoneyGenerated\":4440889204.68988,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":154040.40000002438,\"ram\":64,\"totalMoneyGenerated\":4435038792.1839905,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":153433.39999999083,\"ram\":64,\"totalMoneyGenerated\":4417562412.306656,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":152679.79999995208,\"ram\":64,\"totalMoneyGenerated\":4395865213.170639,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":149661.39999981038,\"ram\":64,\"totalMoneyGenerated\":4308961251.026162,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":145322.39999959813,\"ram\":64,\"totalMoneyGenerated\":4184035365.873313,\"name\":\"hacknet-node-28\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":144412.3999995519,\"ram\":64,\"totalMoneyGenerated\":4157835191.7573743,\"name\":\"hacknet-node-29\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":136095.79999932536,\"ram\":64,\"totalMoneyGenerated\":3918388633.4577866,\"name\":\"hacknet-node-30\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":133872.5999993175,\"ram\":64,\"totalMoneyGenerated\":3854379592.6945267,\"name\":\"hacknet-node-31\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":130437.19999930347,\"ram\":64,\"totalMoneyGenerated\":3755469616.6968336,\"name\":\"hacknet-node-32\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":125659.99999928685,\"ram\":64,\"totalMoneyGenerated\":3617927340.0081434,\"name\":\"hacknet-node-33\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":109414.39999926397,\"ram\":64,\"totalMoneyGenerated\":3150193770.098556,\"name\":\"hacknet-node-34\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":109414.39999926397,\"ram\":64,\"totalMoneyGenerated\":3150193770.098556,\"name\":\"hacknet-node-35\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":109414.39999926397,\"ram\":64,\"totalMoneyGenerated\":3150193770.098556,\"name\":\"hacknet-node-36\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":109225.99999926396,\"ram\":64,\"totalMoneyGenerated\":3144769470.314559,\"name\":\"hacknet-node-37\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":108860.79999926787,\"ram\":64,\"totalMoneyGenerated\":3134254850.9880424,\"name\":\"hacknet-node-38\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":72279.1999997715,\"ram\":64,\"totalMoneyGenerated\":2081019368.0881402,\"name\":\"hacknet-node-39\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":66246.79999977953,\"ram\":64,\"totalMoneyGenerated\":1907338125.959405,\"name\":\"hacknet-node-40\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":55756.39999987445,\"ram\":64,\"totalMoneyGenerated\":1605304822.0627463,\"name\":\"hacknet-node-41\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"Volhaven\",\"Tian Di Hui\",\"CyberSec\",\"NiteSec\",\"BitRunners\",\"The Black Hand\",\"KuaiGong International\",\"Slum Snakes\",\"Tetrads\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"}],\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":22,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"}],\"sourceFiles\":[],\"numPeopleKilled\":8,\"karma\":-24.450000000000003,\"crime_money_mult\":2.353290922341586,\"crime_success_mult\":1.5558948246886517,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Company\",\"workCostMult\":10,\"workExpMult\":5,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0.9649462066361395,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0.17320221188434076,\"workRepGainRate\":5.83866958519206,\"workMoneyGainRate\":240.9769904477784,\"workMoneyLossRate\":0,\"workHackExpGained\":69149.97505995806,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":12412.016908056386,\"workRepGained\":417202.03716062783,\"workMoneyGained\":17268893.08946795,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":14332400,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":1.3691874457260136,\"hacknet_node_money_mult\":3.139290090403675,\"hacknet_node_purchase_cost_mult\":0.6132474009973701,\"hacknet_node_ram_cost_mult\":0.8016305895390458,\"hacknet_node_core_cost_mult\":0.8016305895390458,\"hacknet_node_level_cost_mult\":0.6813860011081889,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1640271065750,\"totalPlaytime\":486140200,\"playtimeSinceLastAug\":157802000,\"playtimeSinceLastBitnode\":486140200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-293040,\"codingcontract\":2775000000,\"corporation\":0,\"crime\":1002501.9329175157,\"gang\":0,\"hacking\":1041928935032653.5,\"hacknet\":169623759829.3158,\"hacknet_expenses\":-120082197908648.75,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-25504795971879.727,\"total\":893904271548995.5,\"work\":50901563.66774174,\"servers\":-2538961031782.8228,\"other\":-5315500000,\"augmentations\":-65843183400}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-52000,\"class\":-504048,\"codingcontract\":5137500000,\"corporation\":0,\"crime\":2707465.86623605,\"gang\":0,\"hacking\":1046961453552818.8,\"hacknet\":251921089435.764,\"hacknet_expenses\":-120571253105943.08,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-25535995971879.727,\"total\":894609166240418,\"work\":64820839.02543318,\"servers\":-3526082026060.1147,\"other\":-16314199869.020864,\"augmentations\":-2959767311384.005}},\"scriptProdSinceLastAug\":896034557642026.9,\"exploits\":[],\"factionWorkType\":\"Faction Field Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":4,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"75.6.5.8\",\"isConnectedTo\":true,\"maxRam\":65536,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"Formulas.exe\"],\"ramUsed\":50.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"gameManager.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":10129.058,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":767.8100000000375,\"pid\":1,\"ramUsage\":28.5,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[0.01],\"dataMap\":{},\"filename\":\"stockManager.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":10129.065,\"onlineExpGained\":0,\"onlineMoneyMade\":1611800354165.8203,\"onlineRunningTime\":767.2100000000373,\"pid\":2,\"ramUsage\":21.7,\"server\":\"home\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n    let url = 'http://localhost:3030/';\\r\\n    let tempFile = 'temp_files.txt';\\r\\n    await ns.wget(url, tempFile);\\r\\n\\r\\n    let filesString = ns.read(tempFile);\\r\\n    let files = JSON.parse(filesString);\\r\\n\\r\\n    for (let file of files) {\\r\\n        if (ns.args[0]) {\\r\\n            if (file != 'syncScripts.js') {\\r\\n                ns.scriptKill(file, ns.getHostname());\\r\\n            }\\r\\n        }\\r\\n        let fileUrl = url + file;\\r\\n        if (file.includes('/')) {\\r\\n            file = '/' + file;\\r\\n        }\\r\\n\\r\\n        await ns.wget(fileUrl, file);\\r\\n    }\\r\\n\\r\\n    ns.rm(tempFile);\\r\\n\\r\\n    if (ns.args[0]) {\\r\\n        ns.run('gameManager.js');\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"syncScripts.js\",\"url\":\"blob:file:///392e0b03-293c-477d-a2e2-6c9aef81e0c2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"syncScripts.js\",\"url\":\"blob:file:///392e0b03-293c-477d-a2e2-6c9aef81e0c2\"}],\"ramUsage\":4.65,\"server\":\"home\",\"moduleSequenceNumber\":355}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerArray } from './scan.js';\\r\\nimport { Server, numberSquish } from './lib.js';\\r\\n\\r\\n/** @type {import(\\\".\\\").NS} ns */\\r\\nlet ns;\\r\\n\\r\\nlet hostName = '';\\r\\nlet purchasedServers = [];\\r\\n/** @type {Server[]} */\\r\\nlet servers = [];\\r\\nlet targets = [];\\r\\n\\r\\nlet serverBudget = 0.1;\\r\\nlet hacknetBudget = 0.1;\\r\\nlet portLevel = 0;\\r\\n\\r\\nlet zoomHackers = [];\\r\\n\\r\\nlet hackScript = 'workerHack.js';\\r\\nlet growScript = 'workerGrow.js';\\r\\nlet weakenScript = 'workerWeaken.js';\\r\\n\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n    ns.disableLog('ALL');\\r\\n    ns.enableLog('exec');\\r\\n    ns.clearPort(20);\\r\\n\\r\\n    hostName = ns.getHostname();\\r\\n\\r\\n    for (let server of await getServerArray(ns)) {\\r\\n        servers.push(new Server(server));\\r\\n    }\\r\\n    purchasedServers = ns.getPurchasedServers();\\r\\n\\r\\n    ns.tprint('Setup complete, GameManager is running. (Use the handler.js function to interact with the running process.)');\\r\\n    await nukeServers();\\r\\n    await addTargets();\\r\\n\\r\\n    await ns.sleep(100);\\r\\n\\r\\n    ns.exec('stockManager.js', hostName, 1, 0.01);\\r\\n\\r\\n    //await initHacks();\\r\\n\\r\\n    let counter = 0;\\r\\n\\r\\n    //Main Loop\\r\\n    while (true) {\\r\\n        let command = '';\\r\\n        if ((command = ns.readPort(20)) != 'NULL PORT DATA') {\\r\\n            let parts = command.split(' ');\\r\\n            switch (parts[0]) {\\r\\n                case 'help':\\r\\n                    ns.tprint('do help      | Provides a list of commands and their uses.');\\r\\n                    ns.tprint('do contracts | Searches for contracts in the network and solves them.');\\r\\n                    ns.tprint('do hacknet   | Buys and upgrades hacknet nodes.');\\r\\n                    ns.tprint('do shutdown  | Stops the process.');\\r\\n                    break;\\r\\n                case 'contracts':\\r\\n                    let contracts = await manageContracts();\\r\\n                    if (contracts == 0) {\\r\\n                        ns.tprint('CONTRACTS: No contracts found.');\\r\\n                    }\\r\\n                    break;\\r\\n                case 'hacknet':\\r\\n                    await manageHacknet();\\r\\n                    break;\\r\\n                case 'scan':\\r\\n                    ns.exec('scan.js', hostName, 1, 'filter', ...servers.filter((s) => s.target).map((s) => s.name));\\r\\n                    break;\\r\\n                case 'shutdown':\\r\\n                    ns.tprint('Shutting down...');\\r\\n                    ns.exit();\\r\\n                    break;\\r\\n                default:\\r\\n                    ns.tprintf('Recieved unkown command: %s', command);\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (counter % 200 === 199) {\\r\\n            await addTargets();\\r\\n        }\\r\\n\\r\\n        if (counter % 1000 === 50) {\\r\\n            await manageServers();\\r\\n        }\\r\\n\\r\\n        if (counter % 1000 === 0) {\\r\\n            await manageHacknet();\\r\\n        }\\r\\n\\r\\n        if (counter % 10000 === 0) {\\r\\n            await manageContracts();\\r\\n        }\\r\\n\\r\\n        if (counter % 50 === 0) {\\r\\n            //await manageHacks();\\r\\n        }\\r\\n\\r\\n        await ns.sleep(100);\\r\\n        counter = (counter + 1) % 10000;\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function manageServers() {\\r\\n    let ramSteps = 16;\\r\\n    let buyC = 0;\\r\\n    let upgradeC = 0;\\r\\n    purchasedServers = ns.getPurchasedServers();\\r\\n\\r\\n    for (let i = purchasedServers.length; i < ns.getPurchasedServerLimit(); i++) {\\r\\n        if (ns.getServerMoneyAvailable(hostName) * serverBudget < ns.getPurchasedServerCost(ramSteps)) {\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        purchasedServers.push(ns.purchaseServer('blank-' + i, ramSteps));\\r\\n        buyC++;\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < purchasedServers.length; i++) {\\r\\n        let currentRam = ns.getServerMaxRam(purchasedServers[i]);\\r\\n        if (currentRam * ramSteps > ns.getPurchasedServerMaxRam()) {\\r\\n            continue;\\r\\n        }\\r\\n        if (ns.getServerMoneyAvailable(hostName) * serverBudget < ns.getPurchasedServerCost(currentRam * ramSteps)) {\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        ns.killall(purchasedServers[i]);\\r\\n        ns.deleteServer(purchasedServers[i]);\\r\\n        ns.purchaseServer(purchasedServers[i], currentRam * ramSteps);\\r\\n        upgradeC++;\\r\\n    }\\r\\n\\r\\n    if (buyC) {\\r\\n        ns.tprintf('SERVER: Baught %i new Server(s).', buyC);\\r\\n    }\\r\\n    if (upgradeC) {\\r\\n        ns.tprintf('SERVER: Upgraded %i Server(s) (x16).', upgradeC);\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function manageHacknet() {\\r\\n    let levelUpgradeStep = 20;\\r\\n    let ramUpgradeStep = 1;\\r\\n    let coreUpgradeStep = 2;\\r\\n\\r\\n    let buyC = 0;\\r\\n    let upgradeC = 0;\\r\\n\\r\\n    for (let i = ns.hacknet.numNodes(); i < ns.hacknet.maxNumNodes(); i++) {\\r\\n        if (ns.getServerMoneyAvailable(hostName) * hacknetBudget < ns.hacknet.getPurchaseNodeCost()) {\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        ns.hacknet.purchaseNode();\\r\\n        buyC++;\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\r\\n        let partialUpgrade = 0;\\r\\n        while (ns.getServerMoneyAvailable(hostName) * hacknetBudget > ns.hacknet.getLevelUpgradeCost(i, levelUpgradeStep)) {\\r\\n            ns.hacknet.upgradeLevel(i, levelUpgradeStep);\\r\\n            partialUpgrade++;\\r\\n        }\\r\\n\\r\\n        while (ns.getServerMoneyAvailable(hostName) * hacknetBudget > ns.hacknet.getRamUpgradeCost(i, ramUpgradeStep)) {\\r\\n            ns.hacknet.upgradeRam(i, ramUpgradeStep);\\r\\n            partialUpgrade++;\\r\\n        }\\r\\n\\r\\n        while (ns.getServerMoneyAvailable(hostName) * hacknetBudget > ns.hacknet.getCoreUpgradeCost(i, coreUpgradeStep)) {\\r\\n            ns.hacknet.upgradeCore(i, coreUpgradeStep);\\r\\n            partialUpgrade++;\\r\\n        }\\r\\n\\r\\n        if (partialUpgrade) {\\r\\n            upgradeC++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (buyC) {\\r\\n        ns.tprintf('HACKNET: Baught %i new Hacknode(s).', buyC);\\r\\n    }\\r\\n    if (upgradeC) {\\r\\n        ns.tprintf('HACKNET: Upgraded %i Hacknode(s).', upgradeC);\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function manageContracts() {\\r\\n    let contracts = [];\\r\\n    for (let server of servers) {\\r\\n        for (let file of ns.ls(server.name, '.cct')) {\\r\\n            contracts.push({ file: file, server: server.name });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (contracts.length <= 0) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    ns.tprintf('Found %i contracts, starting the solvers...', contracts.length);\\r\\n\\r\\n    let solved = 0;\\r\\n\\r\\n    for (let contract of contracts) {\\r\\n        let contractType = ns.codingcontract.getContractType(contract.file, contract.server);\\r\\n        let script = '';\\r\\n        switch (contractType) {\\r\\n            case 'Subarray with Maximum Sum':\\r\\n                script = 'contract/subarrayWithMaximumSum.js';\\r\\n                break;\\r\\n            case 'Generate IP Addresses':\\r\\n                script = 'contract/generateIPAddresses.js';\\r\\n                break;\\r\\n            case 'Find All Valid Math Expressions':\\r\\n                script = 'contract/findAllValidMathExpressions.js';\\r\\n                break;\\r\\n            case 'Find Largest Prime Factor':\\r\\n                script = 'contract/findLargestPrimeFactor.js';\\r\\n                break;\\r\\n            case 'Algorithmic Stock Trader I':\\r\\n                script = 'contract/algorithmicStockTraderI.js';\\r\\n                break;\\r\\n            case 'Algorithmic Stock Trader II':\\r\\n                script = 'contract/algorithmicStockTraderII.js';\\r\\n                break;\\r\\n            case 'Algorithmic Stock Trader III':\\r\\n                script = 'contract/algorithmicStockTraderIII.js';\\r\\n                break;\\r\\n            case 'Algorithmic Stock Trader IV':\\r\\n                script = 'contract/algorithmicStockTraderIV.js';\\r\\n                break;\\r\\n            case 'Total Ways to Sum':\\r\\n                script = 'contract/totalWaysToSum.js';\\r\\n                break;\\r\\n            case 'Array Jumping Game':\\r\\n                script = 'contract/arrayJumpingGame.js';\\r\\n                break;\\r\\n            case 'Merge Overlapping Intervals':\\r\\n                script = 'contract/mergeOverlappingIntervals.js';\\r\\n                break;\\r\\n            case 'Unique Paths in a Grid I':\\r\\n                script = 'contract/uniquePathsInAGridI.js';\\r\\n                break;\\r\\n            case 'Unique Paths in a Grid II':\\r\\n                script = 'contract/uniquePathsInAGridII.js';\\r\\n                break;\\r\\n            case 'Sanitize Parentheses in Expression':\\r\\n                script = 'contract/sanitizeParenthesesInExpression.js';\\r\\n                break;\\r\\n            case 'Minimum Path Sum in a Triangle':\\r\\n                script = 'contract/minimumPathSumInATriangle.js';\\r\\n                break;\\r\\n            case 'Spiralize Matrix':\\r\\n                script = 'contract/spiralizeMatrix.js';\\r\\n                break;\\r\\n            default:\\r\\n                ns.tprintf('CONTRACTS: Found contract %s of type %s on %s', contract.file, contractType, contract.server);\\r\\n                ns.tprintf('CONTRACTS: %s', ns.codingcontract.getDescription(contract.file, contract.server));\\r\\n                ns.tprint('CONTRACTS: ' + '-'.repeat(40));\\r\\n                break;\\r\\n        }\\r\\n\\r\\n        if (script != '') {\\r\\n            if (ns.run(script, 1, contract.file, contract.server) > 0) solved++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.tprintf('CONTRACTS: Solved %i contracts, %i contracts remain unsolved.', solved, contracts.length - solved);\\r\\n    return contracts.length;\\r\\n}\\r\\n\\r\\nasync function initHacks() {\\r\\n    targets.sort((a, b) => ns.getServerMaxMoney(b) - ns.getServerMaxMoney(a));\\r\\n    servers.sort((a, b) => ns.getServerMaxRam(b.name) - ns.getServerMaxRam(a.name));\\r\\n\\r\\n    for (const server of servers) {\\r\\n        if (server.isHome()) {\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        let target = targets.find((t) => !zoomHackers.includes(t));\\r\\n        if (!target) {\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        zoomHackers.push(target);\\r\\n        ns.exec('zoomHacker.js', server.name, 1, target);\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function manageHacks() {\\r\\n    let message;\\r\\n    while ((message = ns.readPort(10) != 'NULL PORT DATA')) {\\r\\n        let [serverName, target, string] = message.split(';');\\r\\n\\r\\n        ns.tprintf('HACKS: %s has failed hacking %s. Restarting hack.', serverName, target);\\r\\n        ns.exec('zoomHacker.js', serverName, 1, target);\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function addTargets() {\\r\\n    for (let server of servers) {\\r\\n        if (targets.includes(server.name)) {\\r\\n            continue;\\r\\n        }\\r\\n        if (ns.getServerMaxMoney(server.name) <= 0) {\\r\\n            continue;\\r\\n        }\\r\\n        if (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(server.name)) {\\r\\n            continue;\\r\\n        }\\r\\n        if (portLevel < ns.getServerNumPortsRequired(server.name)) {\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        targets.push(server.name);\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function nukeServers() {\\r\\n    let rootCounter = 0;\\r\\n    if (ns.fileExists('brutessh.exe')) portLevel = 1;\\r\\n    if (ns.fileExists('ftpcrack.exe')) portLevel = 2;\\r\\n    if (ns.fileExists('relaysmtp.exe')) portLevel = 3;\\r\\n    if (ns.fileExists('httpworm.exe')) portLevel = 4;\\r\\n    if (ns.fileExists('sqlinject.exe')) portLevel = 5;\\r\\n\\r\\n    for (let server of servers) {\\r\\n        if (!ns.hasRootAccess(server.name)) {\\r\\n            switch (ns.getServerNumPortsRequired(server.name)) {\\r\\n                case 5:\\r\\n                    if (portLevel < 5) continue;\\r\\n                    ns.sqlinject(server.name);\\r\\n                case 4:\\r\\n                    if (portLevel < 4) continue;\\r\\n                    ns.httpworm(server.name);\\r\\n                case 3:\\r\\n                    if (portLevel < 3) continue;\\r\\n                    ns.relaysmtp(server.name);\\r\\n                case 2:\\r\\n                    if (portLevel < 2) continue;\\r\\n                    ns.ftpcrack(server.name);\\r\\n                case 1:\\r\\n                    if (portLevel < 1) continue;\\r\\n                    ns.brutessh(server.name);\\r\\n                case 0:\\r\\n                    ns.nuke(server.name);\\r\\n                    break;\\r\\n                default:\\r\\n                    continue;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (ns.hasRootAccess(server.name)) {\\r\\n            if (!server.isHome()) {\\r\\n                ns.rm(hackScript, server.name);\\r\\n                ns.rm(growScript, server.name);\\r\\n                ns.rm(weakenScript, server.name);\\r\\n                await ns.scp([hackScript, growScript, weakenScript], hostName, server.name);\\r\\n            }\\r\\n            rootCounter++;\\r\\n            server.root = true;\\r\\n        }\\r\\n\\r\\n        if (purchasedServers.includes(server.name)) {\\r\\n            ns.rm('zoomerHacker.js', server.name);\\r\\n            await ns.scp('zoomHacker.js', hostName, server.name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.tprintf('NUKE: Nuked %i servers and installed the worker scripts.', rootCounter);\\r\\n}\\r\\n\",\"filename\":\"gameManager.js\",\"url\":\"blob:file:///a970aa8a-3d9e-426a-8744-b8c183915230\",\"module\":{},\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:file:///fd6adbfb-1bde-402f-a46e-7b6cc6f6c5c4\"},{\"filename\":\"scan.js\",\"url\":\"blob:file:///27970612-382e-423d-96e5-7538051fca62\"},{\"filename\":\"lib.js\",\"url\":\"blob:file:///4b72588b-029f-42d3-ac0b-f15921f54373\"},{\"filename\":\"gameManager.js\",\"url\":\"blob:file:///a970aa8a-3d9e-426a-8744-b8c183915230\"}],\"ramUsage\":28.5,\"server\":\"home\",\"moduleSequenceNumber\":709}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree, numberSquish } from './lib.js';\\r\\n\\r\\n/**\\r\\n * Async\\r\\n * @param {import(\\\".\\\").NS} ns\\r\\n */\\r\\nexport async function getServerArray(ns) {\\r\\n    let root = await getChildren(ns, 'home', '');\\r\\n    return root.toStringArray();\\r\\n}\\r\\n\\r\\n/**\\r\\n * Async\\r\\n * @param {import(\\\".\\\").NS} ns\\r\\n */\\r\\nexport async function getServerTree(ns) {\\r\\n    return await getChildren(ns, 'home', '');\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {import(\\\".\\\").NS} ns\\r\\n * @param {string} currentName\\r\\n * @param {string} parentPath\\r\\n */\\r\\nasync function getChildren(ns, currentName, parentPath) {\\r\\n    let children = await ns.scan(currentName);\\r\\n    let path = parentPath + ' > ' + currentName;\\r\\n\\r\\n    let server = new ServerTree(currentName, [], path);\\r\\n\\r\\n    for (let child of children) {\\r\\n        if (parentPath.split(' ').pop() === child) {\\r\\n            continue;\\r\\n        }\\r\\n        server.children.push(await getChildren(ns, child, path));\\r\\n    }\\r\\n\\r\\n    return server;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let serverRoot = await getServerTree(ns);\\r\\n\\r\\n    if (!ns.args[0] || ns.args[0] === 'tree') {\\r\\n        let maxIndent = serverRoot.maxDepth() + serverRoot.longestName();\\r\\n        ns.tprint(maxIndent);\\r\\n        ns.tprint(generateHeader(ns, maxIndent));\\r\\n        printTree(ns, serverRoot, 0, maxIndent);\\r\\n    } else {\\r\\n        let nameIndent = serverRoot.longestName();\\r\\n        let serverList = serverRoot.toArray();\\r\\n\\r\\n        switch (ns.args[0]) {\\r\\n            case 'name':\\r\\n                serverList.sort((a, b) => a.name - b.name);\\r\\n                break;\\r\\n            case 'skill':\\r\\n                serverList.sort((a, b) => ns.getServerRequiredHackingLevel(a.name) - ns.getServerRequiredHackingLevel(b.name));\\r\\n                break;\\r\\n            case 'money':\\r\\n                serverList.sort((a, b) => ns.getServerMoneyAvailable(a.name) - ns.getServerMoneyAvailable(b.name));\\r\\n                break;\\r\\n            case 'maxMoney':\\r\\n                serverList.sort((a, b) => ns.getServerMaxMoney(a.name) - ns.getServerMaxMoney(b.name));\\r\\n                break;\\r\\n            case 'ram':\\r\\n                serverList.sort((a, b) => ns.getServerMaxRam(a.name) - ns.getServerMaxRam(b.name));\\r\\n                break;\\r\\n            case 'maxRam':\\r\\n                serverList.sort((a, b) => {\\r\\n                    let freeRamA = ns.getServerMaxRam(a.name) - ns.getServerNumPortsRequired(a.name);\\r\\n                    let freeRamB = ns.getServerMaxRam(b.name) - ns.getServerNumPortsRequired(b.name);\\r\\n                    return freeRamA - freeRamB;\\r\\n                });\\r\\n                break;\\r\\n            case 'security':\\r\\n                serverList.sort((a, b) => {\\r\\n                    let secA = ns.getServerSecurityLevel(a.name) - ns.getServerMinSecurityLevel(a.name);\\r\\n                    let secB = ns.getServerSecurityLevel(b.name) - ns.getServerMinSecurityLevel(b.name);\\r\\n                    return secA - secB;\\r\\n                });\\r\\n                break;\\r\\n            case 'special':\\r\\n                serverList = serverList.filter((s) => ns.getServerMaxMoney(s.name) === 0 && !s.name.includes('blank') && !s.isHome());\\r\\n                break;\\r\\n            case 'filter':\\r\\n                if (ns.args.length < 2) {\\r\\n                    ns.tprint('Missing argument.');\\r\\n                }\\r\\n                let searchTargets = ns.args.slice(1);\\r\\n                serverList = serverList\\r\\n                    .filter((s) => searchTargets.includes(s.name))\\r\\n                    .sort((a, b) => ns.getServerMaxMoney(a.name) - ns.getServerMaxMoney(b.name));\\r\\n                break;\\r\\n            case 'search':\\r\\n                if (ns.args.length < 2) {\\r\\n                    ns.tprint('Missing argument.');\\r\\n                }\\r\\n                serverList = serverList.filter((s) => s.name.includes(ns.args[1]));\\r\\n                break;\\r\\n            default:\\r\\n                ns.tprint('Unknown argument.');\\r\\n                return;\\r\\n        }\\r\\n\\r\\n        ns.tprint(generateHeader(ns, nameIndent));\\r\\n        for (let server of serverList) {\\r\\n            ns.tprint(stringifyServer(ns, server, 0, nameIndent));\\r\\n        }\\r\\n        switch (ns.args[0]) {\\r\\n            case 'special':\\r\\n            case 'search':\\r\\n                if (ns.args[0] === 'special' || ns.args[0] === 'search') {\\r\\n                    for (let server of serverList) {\\r\\n                        ns.tprintf('Path to %s: %s', server.name.padEnd(13), server.path);\\r\\n                    }\\r\\n                }\\r\\n                break;\\r\\n            case 'filter':\\r\\n                ns.tprintf('Total targets: %i', serverList.length);\\r\\n                break;\\r\\n            default:\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS} ns */\\r\\nfunction printTree(ns, root, depth, maxIndent) {\\r\\n    ns.tprint(stringifyServer(ns, root, depth, maxIndent));\\r\\n    for (const child of root.children) {\\r\\n        printTree(ns, child, depth + 1, maxIndent);\\r\\n    }\\r\\n}\\r\\n\\r\\nlet spacing = [6, 13, 13, 11, 11, 8];\\r\\n\\r\\n/**\\r\\n * @param {import(\\\".\\\").NS} ns\\r\\n * @param {Number} spacingMod\\r\\n */\\r\\nfunction generateHeader(ns, nameSpacing) {\\r\\n    let serverName = 'Server'.padEnd(nameSpacing);\\r\\n    let hackingSkill = 'Skill'.padStart(spacing[0]);\\r\\n    let moneyCurrent = 'Current Money'.padStart(spacing[1]);\\r\\n    let moneyMax = 'Max Money'.padStart(spacing[2]);\\r\\n    let ram = 'Current Ram'.padStart(spacing[3]);\\r\\n    let ramMax = 'Max RAM'.padStart(spacing[4]);\\r\\n    let security = 'Security'.padStart(spacing[5]);\\r\\n    return ns.sprintf('| %s |%s | %s | %s | %s | %s | %s |', serverName, hackingSkill, moneyCurrent, moneyMax, ram, ramMax, security);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {import(\\\".\\\").NS} ns\\r\\n * @param {ServerTree} server\\r\\n * @param {Number} indent\\r\\n * @param {Number} nameSpacing\\r\\n */\\r\\nfunction stringifyServer(ns, server, indent, nameSpacing) {\\r\\n    let serverName = (' '.repeat(indent) + server.name).padEnd(nameSpacing);\\r\\n    let hackingSkill = ns.getServerRequiredHackingLevel(server.name).toLocaleString().padStart(spacing[0]);\\r\\n    let moneyCurrent = numberSquish(ns.getServerMoneyAvailable(server.name)).padStart(spacing[1]);\\r\\n    let moneyMax = numberSquish(ns.getServerMaxMoney(server.name)).padStart(spacing[2]);\\r\\n    let ram = numberSquish(ns.getServerMaxRam(server.name) - ns.getServerUsedRam(server.name), true).padStart(spacing[3]);\\r\\n    let ramMax = numberSquish(ns.getServerMaxRam(server.name), true).padStart(spacing[4]);\\r\\n    let security = numberSquish(ns.getServerSecurityLevel(server.name) - ns.getServerMinSecurityLevel(server.name)).padStart(spacing[5]);\\r\\n    return ns.sprintf('> %s |%s | %s | %s | %s | %s | %s |', serverName, hackingSkill, moneyCurrent, moneyMax, ram, ramMax, security);\\r\\n}\\r\\n\",\"filename\":\"scan.js\",\"url\":\"blob:file:///f6a8af2b-8580-49e2-ab00-009c1dffabd3\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:file:///93140a01-a4ce-4946-b0ea-6894d12dfd96\"},{\"filename\":\"scan.js\",\"url\":\"blob:file:///f6a8af2b-8580-49e2-ab00-009c1dffabd3\"}],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":357}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\r\\nasync function findServer(ns, current, parent, search) {\\r\\n\\tif (current === search) {\\r\\n\\t\\treturn current;\\r\\n\\t}\\r\\n\\tlet children = await ns.scan(current);\\r\\n\\tfor (let child of children) {\\r\\n\\t\\tif (parent === child) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tlet childValue = await findServer(ns, child, current, search);\\r\\n\\t\\tif (childValue != '') {\\r\\n\\t\\t\\treturn current + '>' + childValue;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn '';\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n\\tns.tprint(await findServer(ns, 'home', '', target));\\r\\n}\",\"filename\":\"/old/serverSearch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":358}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"..\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet baseRam = 8;\\r\\n\\tlet upgradeMultiplier = 32;\\r\\n\\tlet hackRam = ns.getScriptRam('hack.js', hostName);\\r\\n\\r\\n    let servers = ns.getPurchasedServers();\\r\\n\\tlet ramGoal = getLowestRam(servers) * upgradeMultiplier;\\r\\n\\r\\n\\tif (lowestRam == 0) {\\r\\n\\t\\tlet baught = 0;\\r\\n\\t\\tfor (let i = servers.length - 1; i < ns.getPurchasedServerLimit(); i++) {\\r\\n\\t\\t\\tif (ns.getServerMoneyAvailable('home') > ns.getPurchasedServerCost(baseRam)) {\\r\\n\\t\\t\\t\\tbaught++;\\r\\n\\t\\t\\t\\tlet newServer = ns.purchaseServer(\\\"blank-\\\" + i, baseRam);\\r\\n\\t\\t\\t\\tawait ns.scp('hack.js', newServer);\\r\\n\\t\\t\\t\\tns.exec('hack.js', newServer, 3);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tns.tprint(`Baught ${baught} servers with ${baseRam}gb each. For a total of ${servers.length + baught}.`);\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tservers.filter((s) => ns.getServerMaxRam(s) <= ramGoal);\\r\\n\\r\\n\\tfor (let server of servers) {\\r\\n\\t\\tlet upgraded = 0;\\r\\n\\t\\tif (ns.getServerMoneyAvailable('home') > ns.getPurchasedServerCost(ramGoal)) {\\r\\n\\t\\t\\tupgraded++;\\r\\n\\t\\t\\tns.killall(server);\\r\\n\\t\\t\\tns.deleteServer(server);\\r\\n\\r\\n\\t\\t\\tlet maxThreads = Math.floor(ramGoal / hackRam);\\r\\n\\r\\n\\t\\t\\tlet newServer = ns.purchaseServer(server, ramGoal);\\r\\n\\t\\t\\tawait ns.scp('hack.js', newServer);\\r\\n\\t\\t\\tns.exec('hack.js', newServer, maxThreads);\\r\\n\\t\\t}\\r\\n\\t\\tns.tprint(`Upgraded ${upgraded} Server to ${ramGoal}gb.`);\\r\\n\\t}\\r\\n}\\r\\n\\r\\n/** @param {String[]} servers */\\r\\nfunction getLowestRam(servers) {\\r\\n\\tif (servers.length < 25) {\\r\\n\\t\\treturn 0;\\r\\n\\t}\\r\\n\\tlet ram = Number.POSITIVE_INFINITY;\\r\\n\\tfor (let server of servers) {\\r\\n\\t\\tif (ns.getPurchasedServerMaxRam(server) < ram) {\\r\\n\\t\\t\\tram = ns.getPurchasedServerMaxRam(server);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn ram;\\r\\n}\",\"filename\":\"/old/upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":11.35,\"server\":\"home\",\"moduleSequenceNumber\":359}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\r\\n\\r\\n65,181,43,87,63\\r\\n\\r\\nDetermine the maximum possible profit you can earn using at most one\\r\\ntransaction (i.e. you can only buy and sell the stock once). \\r\\nIf no profit can be made then the answer should be 0. \\r\\nNote that you have to buy the stock before you can sell it\\r\\n*/\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n    let anwser = solve(data, ns);\\r\\n\\r\\n    if (anwser < 0) {\\r\\n        anwser = 0;\\r\\n    }\\r\\n\\r\\n    //let response = anwser;\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint('FAILED ATTEMPT');\\r\\n        ns.tprintf('Data %j', data);\\r\\n        ns.tprintf('Anwser %i', anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {import(\\\"../.\\\").NS}\\r\\n * @param {Number[]} prices\\r\\n*/ \\r\\nfunction solve(prices, ns) {\\r\\n    let profit = 0;\\r\\n    for (let i = 0; i < prices.length - 1; i++) {\\r\\n        for (let j = i + 1; j < prices.length; j++) {\\r\\n            if (prices[j] - prices[i] > profit) {\\r\\n                profit = prices[j] - prices[i];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return profit;\\r\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"blob:file:///c6526fbf-b2e9-4007-b703-65587fb8548d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"blob:file:///c6526fbf-b2e9-4007-b703-65587fb8548d\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":360}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\nYou are given the following array of stock prices (which are numbers) \\r\\nwhere the i-th element represents the stock price on day i:\\r\\n\\r\\n126,6,43,158,4,147,41,100,100,119,143,73,7,129,46,158,6,129,160,124,126,179,41,44,68,1,88\\r\\n\\r\\nDetermine the maximum possible profit you can earn using as many transactions as you'd like. \\r\\nA transaction is defined as buying and then selling one share of the stock. \\r\\nNote that you cannot engage in multiple transactions at once. \\r\\nIn other words, you must sell the stock before you buy it again.\\r\\n\\r\\nIf no profit can be made, then the answer should be 0\\r\\n*/\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n    let iterations = Math.ceil(data.length / 2);\\r\\n    let anwser = solve(iterations, data);\\r\\n\\r\\n    if (anwser < 0) {\\r\\n        anwser = 0;\\r\\n    }\\r\\n\\r\\n    //let response = anwser;\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint('FAILED ATTEMPT');\\r\\n        ns.tprintf('Data %j', data);\\r\\n        ns.tprintf('Anwser %j', anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {Number[]} prices\\r\\n * */\\r\\nfunction solve(iterations, prices) {\\r\\n    let highestProfits = [];\\r\\n    for (let i = 0; i < iterations; i++) {\\r\\n        highestProfits.push(new Array(prices.length).fill(0));\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < iterations; i++) {\\r\\n        for (let j = 0; j < prices.length; j++) {\\r\\n            for (let k = j; k < prices.length; k++) {\\r\\n                if (i > 0 && j > 0 && k > 0) {\\r\\n                    highestProfits[i][k] = Math.max(\\r\\n                        highestProfits[i][k],\\r\\n                        highestProfits[i - 1][k],\\r\\n                        highestProfits[i][k - 1],\\r\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\r\\n                    );\\r\\n                } else if (i > 0 && j > 0) {\\r\\n                    highestProfits[i][k] = Math.max(\\r\\n                        highestProfits[i][k],\\r\\n                        highestProfits[i - 1][k],\\r\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\r\\n                    );\\r\\n                } else if (i > 0 && k > 0) {\\r\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i - 1][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\r\\n                } else if (j > 0 && k > 0) {\\r\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\r\\n                } else {\\r\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], prices[k] - prices[j]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return highestProfits[iterations - 1][prices.length - 1];\\r\\n}\\r\\n\",\"filename\":\"/contract/algorithmicStockTraderII.js\",\"url\":\"blob:file:///ccf8d457-d2cf-45b9-8574-ffd524177549\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/algorithmicStockTraderII.js\",\"url\":\"blob:file:///ccf8d457-d2cf-45b9-8574-ffd524177549\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":361}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\nYou are given the following array of stock prices (which are numbers) \\r\\nwhere the i-th element represents the stock price on day i:\\r\\n\\r\\n133,31,25,6,82,118,68,83,95,164,123,8,139,16,37,138,168,90,21,185,10,108,93,154,1,176,80,66,195,34,68,169,49,55\\r\\n\\r\\nDetermine the maximum possible profit you can earn using at most two transactions. \\r\\nA transaction is defined as buying and then selling one share of the stock. \\r\\nNote that you cannot engage in multiple transactions at once. \\r\\nIn other words, you must sell the stock before you buy it again.\\r\\n\\r\\nIf no profit can be made, then the answer should be 0\\r\\n*/\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n    let iterations = 2;\\r\\n    let anwser = solve(iterations, data);\\r\\n\\r\\n    if (anwser < 0) {\\r\\n        anwser = 0;\\r\\n    }\\r\\n\\r\\n    //let response = anwser;\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint('FAILED ATTEMPT');\\r\\n        ns.tprintf('Data %j', data);\\r\\n        ns.tprintf('Anwser %j', anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {Number[]} prices\\r\\n * */\\r\\nfunction solve(iterations, prices) {\\r\\n    let highestProfits = [];\\r\\n    for (let i = 0; i < iterations; i++) {\\r\\n        highestProfits.push(new Array(prices.length).fill(0));\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < iterations; i++) {\\r\\n        for (let j = 0; j < prices.length; j++) {\\r\\n            for (let k = j; k < prices.length; k++) {\\r\\n                if (i > 0 && j > 0 && k > 0) {\\r\\n                    highestProfits[i][k] = Math.max(\\r\\n                        highestProfits[i][k],\\r\\n                        highestProfits[i - 1][k],\\r\\n                        highestProfits[i][k - 1],\\r\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\r\\n                    );\\r\\n                } else if (i > 0 && j > 0) {\\r\\n                    highestProfits[i][k] = Math.max(\\r\\n                        highestProfits[i][k],\\r\\n                        highestProfits[i - 1][k],\\r\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\r\\n                    );\\r\\n                } else if (i > 0 && k > 0) {\\r\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i - 1][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\r\\n                } else if (j > 0 && k > 0) {\\r\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\r\\n                } else {\\r\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], prices[k] - prices[j]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return highestProfits[iterations - 1][prices.length - 1];\\r\\n}\\r\\n\",\"filename\":\"/contract/algorithmicStockTraderIII.js\",\"url\":\"blob:file:///0465fcac-66dd-4af9-a279-09ca256d22b7\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/algorithmicStockTraderIII.js\",\"url\":\"blob:file:///0465fcac-66dd-4af9-a279-09ca256d22b7\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":362}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\nYou are given the following array of integers:\\r\\n\\r\\n0,10,0,0,0,4,7,9,7,7,1,6,5\\r\\n\\r\\nEach element in the array represents your MAXIMUM jump length at that position. \\r\\nThis means that if you are at position i and your maximum jump length is n, \\r\\nyou can jump to any position from i to i+n. \\r\\n\\r\\nAssuming you are initially positioned at the start of the array, \\r\\ndetermine whether you are able to reach the last index exactly.\\r\\n\\r\\nYour answer should be submitted as 1 or 0, representing true and false respectively\\r\\n*/\\r\\n\\r\\nlet anwser = 0;\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n\\r\\n    jump(0, data);\\r\\n\\r\\n    //let response = anwser;\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint('FAILED ATTEMPT');\\r\\n        ns.tprintf('Data %j', data);\\r\\n        ns.tprintf('Anwser %i', anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {Number} pos\\r\\n * @param {Number[]} list\\r\\n */\\r\\nfunction jump(pos, list) {\\r\\n    if (anwser) {\\r\\n        return;\\r\\n    }\\r\\n    if (list[pos] == 0) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let maxJumpI = pos + list[pos];\\r\\n    if (maxJumpI >= list.length - 1) {\\r\\n        anwser = 1;\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    for (let i = pos + 1; i <= maxJumpI; i++) {\\r\\n        jump(i, list);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/contract/arrayJumpingGame.js\",\"url\":\"blob:file:///beb549c7-29f9-420a-a7dc-9108d67c6564\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/arrayJumpingGame.js\",\"url\":\"blob:file:///beb549c7-29f9-420a-a7dc-9108d67c6564\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":363}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\nYou are given the following string which contains only digits between 0 and 9:\\r\\n\\r\\n50020067805\\r\\n\\r\\nYou are also given a target number of 45. Return all possible ways you can add the +, -, and * operators to the string such that it evaluates to the target number.\\r\\n\\r\\nThe provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\r\\n\\r\\n[\\\"50020067805\\\", 45]\\r\\n\\r\\nNOTE: Numbers in the expression cannot have leading 0's. In other words, \\\"1+01\\\" is not a valid expression Examples:\\r\\n\\r\\nInput: digits = \\\"123\\\", target = 6\\r\\nOutput: [1+2+3, 1*2*3]\\r\\n\\r\\nInput: digits = \\\"105\\\", target = 5\\r\\nOutput: [1*0+5, 10-5]\\r\\n*/\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n    let anwser = solve(data, ns);\\r\\n\\r\\n    anwser = '[' + anwser.join(', ') + ']';\\r\\n\\r\\n    //let response = anwser;\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint('FAILED ATTEMPT');\\r\\n        ns.tprintf('Data %j', data);\\r\\n        ns.tprintf('Anwser %s', anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {import(\\\"../.\\\").NS} ns\\r\\n * @param {Array} data\\r\\n*/ \\r\\nfunction solve(data, ns) {\\r\\n    let digits = data[0].split('');\\r\\n    let goal = data[1];\\r\\n\\r\\n    let numbers = [];\\r\\n    generateNumbers(digits, numbers, []);\\r\\n    let expressions = [];\\r\\n    for (let numberList of numbers) {\\r\\n        generateExpressions(numberList, expressions, []);\\r\\n    }\\r\\n\\r\\n    let solutions = [];\\r\\n    for (let expression of expressions) {\\r\\n        if (solveExpression(expression.slice()) === goal) {\\r\\n            solutions.push(expression.join(''));\\r\\n        }\\r\\n    }\\r\\n    return solutions;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {Array} expression\\r\\n*/ \\r\\nfunction solveExpression(expression) {\\r\\n    let mIndex = [];\\r\\n    for (let i = expression.length - 2; i > 0 ; i -= 2) {\\r\\n        if (expression[i] == '*') {\\r\\n            let n = expression[i-1] * expression[i+1];\\r\\n            expression.splice(i-1, 3, n);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    while (expression.length >= 3) {\\r\\n        if (expression[1] == '+') {\\r\\n            let n = expression[0] + expression[2];\\r\\n            expression.splice(0, 3, n);\\r\\n        } else {\\r\\n            let n = expression[0] - expression[2];\\r\\n            expression.splice(0, 3, n);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return expression[0];\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {Array} digits\\r\\n * @param {Array} allNumbers\\r\\n * @param {Array} head \\r\\n*/\\r\\nfunction generateNumbers(digits, allNumbers, head) {\\r\\n    for (let i = 1; i <= digits.length; i++) {\\r\\n        let digitCopy = digits.slice();\\r\\n        let mergeElements = digitCopy.splice(0, i).join('');\\r\\n\\r\\n        let newHead = head.concat([mergeElements]);\\r\\n        if (digitCopy.length <= 0) {\\r\\n            for (let j = 0; j < newHead.length; j++) {\\r\\n                newHead[j] = Number.parseInt(newHead[j])\\r\\n            }\\r\\n            allNumbers.push(newHead);\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        generateNumbers(digitCopy, allNumbers, newHead);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {Array} numbers\\r\\n * @param {Array} expressionList\\r\\n * @param {Array} head \\r\\n*/\\r\\nfunction generateExpressions(numbers, expressionList, head) {\\r\\n    if (numbers.length <= 1) {\\r\\n        expressionList.push(head.concat(numbers));\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    generateExpressions(numbers.slice(1), expressionList, head.concat(numbers[0], '+'));\\r\\n    generateExpressions(numbers.slice(1), expressionList, head.concat(numbers[0], '-'));\\r\\n    generateExpressions(numbers.slice(1), expressionList, head.concat(numbers[0], '*'));\\r\\n}\",\"filename\":\"/contract/findAllValidMathExpressions.js\",\"url\":\"blob:file:///f989ee8a-9648-4844-83d3-90826f6bbf3a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/findAllValidMathExpressions.js\",\"url\":\"blob:file:///f989ee8a-9648-4844-83d3-90826f6bbf3a\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":364}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\nA prime factor is a factor that is a prime number. What is the largest prime factor of 847089252?\\r\\n*/\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n    let anwser = solve(data, ns);\\r\\n\\r\\n    //let response = anwser;\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint('FAILED ATTEMPT');\\r\\n        ns.tprintf('Data %i', data);\\r\\n        ns.tprintf('Anwser %i', anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {import(\\\"../.\\\").NS} ns\\r\\n * @param {Number} n\\r\\n*/ \\r\\nfunction solve(n, ns) {\\r\\n    let maxPrime = -1;\\r\\n\\r\\n    while (n % 2 == 0) {\\r\\n        maxPrime = 2;\\r\\n        n /= 2;\\r\\n    }\\r\\n\\r\\n    while (n % 3 == 0) {\\r\\n        maxPrime = 3;\\r\\n        n /= 3;\\r\\n    }\\r\\n\\r\\n    for (let i = 5; i <= Math.sqrt(n); i += 6) {\\r\\n        while (n % i == 0) {\\r\\n            maxPrime = i;\\r\\n            n /= i;\\r\\n        }\\r\\n      while (n % (i+2) == 0) {\\r\\n            maxPrime = i+2;\\r\\n            n /= (i+2);\\r\\n        }\\r\\n    }\\r\\n \\r\\n    // This condition is to handle the case\\r\\n    // when n is a prime number greater than 4\\r\\n    if (n > 4)\\r\\n        maxPrime = n;\\r\\n \\r\\n    return maxPrime;\\r\\n}\",\"filename\":\"/contract/findLargestPrimeFactor.js\",\"url\":\"blob:file:///fe1c8cbc-8fb7-4de6-bdf2-9f9464ac835d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/findLargestPrimeFactor.js\",\"url\":\"blob:file:///fe1c8cbc-8fb7-4de6-bdf2-9f9464ac835d\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":365}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n    let anwser = solve(data, ns);\\r\\n\\r\\n    anwser = '[' + anwser.join(', ') + ']';\\r\\n\\r\\n\\t//let response = anwser;\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint('FAILED ATTEMPT');\\r\\n        ns.tprintf('Data %i', data);\\r\\n        ns.tprintf('Anwser %s', anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nfunction solve(data, ns) {\\r\\n    let dataString = data.toString();\\r\\n    let valids = [];\\r\\n    for (let i = 1; i < 4; i++) {\\r\\n        let first = dataString.substring(0, i);\\r\\n        if (first[0] == '0' || Number.parseInt(first) > 255) {\\r\\n            break;\\r\\n        }\\r\\n        for (let j = i+1; j < i+4; j++) {\\r\\n            let second = dataString.substring(i, j);\\r\\n            if (second[0] == '0' || Number.parseInt(second) > 255) {\\r\\n                break;\\r\\n            }\\r\\n            for (let k = j+1; k < j+4; k++) {\\r\\n                let third = dataString.substring(j, k);\\r\\n                if (third[0] == '0' || Number.parseInt(third) > 255) {\\r\\n                    break;\\r\\n                }\\r\\n                for (let l = k+1; l < k+4; l++) {\\r\\n                    let fourth = dataString.substring(k, l);\\r\\n                    if (fourth[0] == '0' || Number.parseInt(fourth) > 255) {\\r\\n                        break;\\r\\n                    }\\r\\n\\r\\n                    let testString = [first, second, third, fourth].join('');\\r\\n                    let validString = [first, second, third, fourth].join('.');\\r\\n\\r\\n                    if (testString == dataString && !valids.includes(validString)) {\\r\\n                        valids.push(validString);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return valids;\\r\\n}\",\"filename\":\"/contract/generateIPAddresses.js\",\"url\":\"blob:file:///f153a12c-2c38-4d56-9bce-4cd3a5b745bb\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/generateIPAddresses.js\",\"url\":\"blob:file:///f153a12c-2c38-4d56-9bce-4cd3a5b745bb\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":366}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\nGiven the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\r\\n\\r\\n[[12,13],[25,27],[4,6],[14,18],[14,16],[4,9],[25,35],[15,17],[20,22]]\\r\\n\\r\\nExample:\\r\\n\\r\\n[[1, 3], [8, 10], [2, 6], [10, 16]]\\r\\n\\r\\nwould merge into [[1, 6], [8, 16]].\\r\\n\\r\\nThe intervals must be returned in ASCENDING order. \\r\\nYou can assume that in an interval, the first number will always be smaller than the second.\\r\\n*/\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n    let anwser = solve(data, ns);\\r\\n\\r\\n    //let response = anwser;\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {\\r\\n        returnReward: true,\\r\\n    });\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint(\\\"FAILED ATTEMPT\\\");\\r\\n        ns.tprintf(\\\"Data %j\\\", data);\\r\\n        ns.tprintf(\\\"Anwser %j\\\", anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {import(\\\"../.\\\").NS} ns\\r\\n * @param {Number[][]} data\\r\\n */\\r\\nfunction solve(data, ns) {\\r\\n    for (let i = 0; i < data.length - 1; i++) {\\r\\n        for (let j = i + 1; j < data.length; j++) {\\r\\n            if (data[i][0] <= data[j][1] && data[i][1] >= data[j][1]) {\\r\\n                let cutJ = data.splice(j, 1)[0];\\r\\n                if (cutJ[0] < data[i][0]) {\\r\\n                    data[i][0] = cutJ[0];\\r\\n                }\\r\\n                j = i;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (data[i][1] >= data[j][0] && data[i][0] <= data[j][0]) {\\r\\n                let cutJ = data.splice(j, 1)[0];\\r\\n                if (cutJ[1] > data[i][1]) {\\r\\n                    data[i][1] = cutJ[1];\\r\\n                }\\r\\n                j = i;\\r\\n                continue;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return data.sort((a, b) => a[0] - b[0]);\\r\\n}\\r\\n\",\"filename\":\"/contract/mergeOverlappingIntervals.js\",\"url\":\"blob:file:///38760122-1400-4784-9733-72d5b47c4297\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/mergeOverlappingIntervals.js\",\"url\":\"blob:file:///38760122-1400-4784-9733-72d5b47c4297\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":367}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\nGiven a triangle, find the minimum path sum from top to bottom. \\r\\nIn each step of the path, you may only move to adjacent numbers in the row below. \\r\\nThe triangle is represented as a 2D array of numbers:\\r\\n\\r\\n[\\r\\n            [7],\\r\\n           [3,6],\\r\\n          [6,4,2],\\r\\n         [6,1,1,9],\\r\\n        [4,8,2,8,8],\\r\\n       [2,3,4,4,6,9],\\r\\n      [1,4,2,5,4,6,3],\\r\\n     [7,9,8,4,4,7,6,2],\\r\\n    [9,1,9,6,7,2,7,6,7],\\r\\n   [6,1,5,5,2,1,4,4,5,7],\\r\\n  [4,1,7,1,9,3,6,5,3,5,5]\\r\\n]\\r\\n\\r\\n Example: If you are given the following triangle:\\r\\n\\r\\n[\\r\\n     [2],\\r\\n    [3,4],\\r\\n   [6,5,7],\\r\\n  [4,1,8,3]\\r\\n]\\r\\n\\r\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\r\\n*/\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n    let anwser = solve(data, 0, 0);\\r\\n\\r\\n    //let response = anwser;\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint('FAILED ATTEMPT');\\r\\n        ns.tprintf('Data %j', data);\\r\\n        ns.tprintf('Anwser %i', anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {Number[][]} data\\r\\n */\\r\\nfunction solve(data, x, y) {\\r\\n    if (y === data.length - 1) {\\r\\n        return data[y][x];\\r\\n    }\\r\\n\\r\\n    return data[y][x] + Math.min(solve(data, x, y + 1), solve(data, x + 1, y + 1));\\r\\n}\\r\\n\",\"filename\":\"/contract/minimumPathSumInATriangle.js\",\"url\":\"blob:file:///e7ebfd1c-6943-47bf-8c47-8a1b545c06ea\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/minimumPathSumInATriangle.js\",\"url\":\"blob:file:///e7ebfd1c-6943-47bf-8c47-8a1b545c06ea\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":368}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\nSanitize Parentheses in Expression\\r\\n\\r\\nGiven the following string:\\r\\n\\r\\n(((a((()a\\r\\n\\r\\nremove the minimum number of invalid parentheses in order to validate the string. \\r\\nIf there are multiple minimal ways to validate the string, provide all of the possible results. \\r\\nThe answer should be provided as an array of strings. \\r\\nIf it is impossible to validate the string the result should be an array with only an empty string.\\r\\n\\r\\nIMPORTANT: The string may contain letters, not just parentheses. Examples:\\r\\n\\\"()())()\\\" -> [()()(), (())()]\\r\\n\\\"(a)())()\\\" -> [(a)()(), (a())()]\\r\\n\\\")(\\\" -> [\\\"\\\"]\\r\\n*/\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n    let anwser = solve(data, ns);\\r\\n\\r\\n    anwser = '[' + anwser.join(', ') + ']';\\r\\n\\r\\n    if (anwser === '[]') {\\r\\n        anwser = '[\\\"\\\"]';\\r\\n    }\\r\\n\\r\\n    //let response = answer;\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint('FAILED ATTEMPT');\\r\\n        ns.tprintf('Data %s', data);\\r\\n        ns.tprintf('Anwser %s', anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {String} brackets\\r\\n * @returns {Boolean}\\r\\n */\\r\\nfunction validate(brackets) {\\r\\n    let counter = 0;\\r\\n    for (let char of brackets) {\\r\\n        if (char === '(') counter++;\\r\\n        if (char === ')') counter--;\\r\\n        if (counter < 0) return false;\\r\\n    }\\r\\n    if (counter != 0) return false;\\r\\n    return true;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {String} brackets\\r\\n * @returns {String[]}\\r\\n */\\r\\nfunction solve(brackets, ns) {\\r\\n    if (!brackets.includes('(') || !brackets.includes(')')) {\\r\\n        return [];\\r\\n    }\\r\\n    let solutions = [];\\r\\n    let unvalidated = [];\\r\\n    for (let j = 0; j < brackets.length; j++) {\\r\\n        if (brackets[j] != '(' && brackets[j] != ')') {\\r\\n            continue;\\r\\n        }\\r\\n        let newBrackets = brackets.substring(0, j) + brackets.substring(j + 1);\\r\\n\\r\\n        if (validate(newBrackets)) {\\r\\n            if (!solutions.includes(newBrackets)) {\\r\\n                solutions.push(newBrackets);\\r\\n            }\\r\\n        } else {\\r\\n            if (!unvalidated.includes(newBrackets)) {\\r\\n                unvalidated.push(newBrackets);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (solutions.length > 0) {\\r\\n        return solutions;\\r\\n    }\\r\\n\\r\\n    for (let uBracket of unvalidated) {\\r\\n        let nextResult = solve(uBracket, ns);\\r\\n        if (nextResult.length > 0) {\\r\\n            return nextResult;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return [];\\r\\n}\\r\\n\",\"filename\":\"/contract/sanitizeParenthesesInExpression.js\",\"url\":\"blob:file:///c240b5a6-ae78-4cfe-945d-aa61f97733bb\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/sanitizeParenthesesInExpression.js\",\"url\":\"blob:file:///c240b5a6-ae78-4cfe-945d-aa61f97733bb\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":369}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\nGiven the following array of arrays of numbers representing a 2D matrix, return the elements of the matrix as an array in spiral order:\\r\\n\\r\\n[\\r\\n\\t[37,35, 3]\\r\\n\\t[ 8,47,29]\\r\\n\\t[40,42, 6]\\r\\n\\t[50,38,37]\\r\\n\\t[16,10,46]\\r\\n\\t[47,37, 8]\\r\\n\\t[50,43,13]\\r\\n\\t[24,12,13]\\r\\n\\t[14,48,27]\\r\\n\\t[46,21,21]\\r\\n\\t[14,38,48]\\r\\n\\t[41,43,46]\\r\\n\\t[ 2, 2,35]\\r\\n\\t[ 5,19,49]\\r\\n\\t[25, 6,29]\\r\\n]\\r\\n\\r\\nHere is an example of what spiral order should be:\\r\\n\\r\\n[\\r\\n\\t[1, 2, 3]\\r\\n\\t[4, 5, 6]\\r\\n\\t[7, 8, 9]\\r\\n]\\r\\n\\r\\nAnswer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]\\r\\n\\r\\nNote that the matrix will not always be square:\\r\\n\\r\\n[\\r\\n\\t[1,2,3,4]\\r\\n\\t[5,6,7,8]\\r\\n\\t[9,10,11,12]\\r\\n]\\r\\n\\r\\nAnswer: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]\\r\\n*/\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n    let anwser = solve(data);\\r\\n    //let response = data;\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint('FAILED ATTEMPT');\\r\\n        ns.tprintf('Data %j', data);\\r\\n        ns.tprintf('Anwser %j', anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {import(\\\"../.\\\").NS} ns\\r\\n */\\r\\nfunction solve(data) {\\r\\n    let direction = 0; // 0 > ; 1 v ; 2 < ; 3 ^\\r\\n    let x = 0;\\r\\n    let y = 0;\\r\\n\\r\\n    let solution = [];\\r\\n\\r\\n    while (true) {\\r\\n        //console.log(data[y][x]);\\r\\n        let r = x + 1 < data[0].length && data[y][x + 1] != 'x';\\r\\n        let l = x - 1 >= 0 && data[y][x - 1] != 'x';\\r\\n        let u = y - 1 >= 0 && data[y - 1][x] != 'x';\\r\\n        let d = y + 1 < data.length && data[y + 1][x] != 'x';\\r\\n\\r\\n        if (!r && !l && !u && !d) {\\r\\n            solution.push(data[y][x]);\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        switch (direction) {\\r\\n            case 0:\\r\\n                if (!r) {\\r\\n                    direction = (direction + 1) % 4;\\r\\n                }\\r\\n                break;\\r\\n            case 1:\\r\\n                if (!d) {\\r\\n                    direction = (direction + 1) % 4;\\r\\n                }\\r\\n                break;\\r\\n            case 2:\\r\\n                if (!l) {\\r\\n                    direction = (direction + 1) % 4;\\r\\n                }\\r\\n                break;\\r\\n            case 3:\\r\\n                if (!u) {\\r\\n                    direction = (direction + 1) % 4;\\r\\n                }\\r\\n                break;\\r\\n        }\\r\\n\\r\\n        solution.push(data[y][x]);\\r\\n        data[y][x] = 'x';\\r\\n\\r\\n        switch (direction) {\\r\\n            case 0:\\r\\n                x++;\\r\\n                break;\\r\\n            case 1:\\r\\n                y++;\\r\\n                break;\\r\\n            case 2:\\r\\n                x--;\\r\\n                break;\\r\\n            case 3:\\r\\n                y--;\\r\\n                break;\\r\\n            default:\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return solution;\\r\\n}\\r\\n\",\"filename\":\"/contract/spiralizeMatrix.js\",\"url\":\"blob:file:///31f7730a-301a-4571-bde5-3fe419c148f5\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/spiralizeMatrix.js\",\"url\":\"blob:file:///31f7730a-301a-4571-bde5-3fe419c148f5\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":370}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\nGiven the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. \\r\\n'Sum' refers to the sum of all the numbers in the subarray.\\r\\n\\r\\n6,9,1,-10,1,-6,9,-1,-3,-4,1,10,-4,-7,-7,5,-5,-9\\r\\n*/\\r\\n\\r\\n/** @param {import(\\\"..\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n\\r\\n    let anwser = solve(data);\\r\\n\\r\\n    //let response = anwser;\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {\\r\\n        returnReward: true,\\r\\n    });\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint('FAILED ATTEMPT');\\r\\n        ns.tprintf('Data %j', data);\\r\\n        ns.tprintf('Anwser %i', anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction solve(data) {\\r\\n    let currentSolution = [];\\r\\n    let bestSum = Number.NEGATIVE_INFINITY;\\r\\n    for (let i = 0; i < data.length; i++) {\\r\\n        let sum = 0;\\r\\n        for (let j = i; j < data.length; j++) {\\r\\n            sum += data[j];\\r\\n            if (sum > bestSum) {\\r\\n                bestSum = sum;\\r\\n                currentSolution = data.slice(i, j + 1);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return bestSum;\\r\\n}\\r\\n\",\"filename\":\"/contract/subarrayWithMaximumSum.js\",\"url\":\"blob:file:///52b84d56-0364-44c2-a32c-8e2972536ca0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/subarrayWithMaximumSum.js\",\"url\":\"blob:file:///52b84d56-0364-44c2-a32c-8e2972536ca0\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":371}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\nIt is possible write four as a sum in exactly four different ways:\\r\\n\\r\\n3 + 1\\r\\n2 + 2\\r\\n2 + 1 + 1\\r\\n1 + 1 + 1 + 1\\r\\n\\r\\nHow many different ways can the number 37 be written as a sum of at least two positive integers?\\r\\n*/\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n\\r\\n    let anwser = solve(data, ns);\\r\\n\\r\\n    //let response = \\\"NOT YET IMPLEMENTED\\\";\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {\\r\\n        returnReward: true,\\r\\n    });\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint(\\\"FAILED ATTEMPT\\\");\\r\\n        ns.tprintf(\\\"Data %i\\\", data);\\r\\n        ns.tprintf(\\\"Anwser %i\\\", anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {import(\\\"../.\\\").NS} ns\\r\\n * @param {Number} n\\r\\n */\\r\\nfunction solve(n, ns) {\\r\\n    let partitionList = new Array(n + 1).fill(0);\\r\\n    partitionList[0] = 1;\\r\\n\\r\\n    for (let i = 1; i <= n - 1; i++) {\\r\\n        for (let j = i; j <= n; j++) {\\r\\n            partitionList[j] += partitionList[j - i];\\r\\n        }\\r\\n    }\\r\\n    return partitionList[n];\\r\\n}\\r\\n\",\"filename\":\"/contract/totalWaysToSum.js\",\"url\":\"blob:file:///e9db1977-0f7b-4856-90a1-7186f1995862\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/totalWaysToSum.js\",\"url\":\"blob:file:///e9db1977-0f7b-4856-90a1-7186f1995862\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":372}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\nYou are in a grid with 4 rows and 10 columns,\\r\\nand you are positioned in the top-left corner of that grid. \\r\\nYou are trying to reach the bottom-right corner of the grid, \\r\\nbut you can only move down or right on each step. \\r\\nDetermine how many unique paths there are from start to finish.\\r\\n\\r\\nNOTE: The data returned for this contract is an array with the number of rows and columns:\\r\\n\\r\\n[4, 10]\\r\\n*/\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n\\r\\n    let anwser = step(0, 0, data);\\r\\n\\r\\n    //let response = \\\"NOT YET IMPLEMENTED\\\";\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {\\r\\n        returnReward: true,\\r\\n    });\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint('FAILED ATTEMPT');\\r\\n        ns.tprintf('Data %j', data);\\r\\n        ns.tprintf('Anwser %i', anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {Number} x\\r\\n * @param {Number} y\\r\\n * @param {Number[]} dimensions\\r\\n * @returns\\r\\n */\\r\\nfunction step(x, y, dimensions) {\\r\\n    if (y + 1 === dimensions[0] && x + 1 === dimensions[1]) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    let pathCounter = 0;\\r\\n\\r\\n    if (y + 1 < dimensions[0]) {\\r\\n        pathCounter += step(x, y + 1, dimensions);\\r\\n    }\\r\\n\\r\\n    if (x + 1 < dimensions[1]) {\\r\\n        pathCounter += step(x + 1, y, dimensions);\\r\\n    }\\r\\n\\r\\n    return pathCounter;\\r\\n}\\r\\n\",\"filename\":\"/contract/uniquePathsInAGridI.js\",\"url\":\"blob:file:///65ae4b69-d076-4e75-bda9-325d7e97dab3\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/uniquePathsInAGridI.js\",\"url\":\"blob:file:///65ae4b69-d076-4e75-bda9-325d7e97dab3\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":373}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = 'silver-helix';\\r\\n\\r\\n\\tns.disableLog('ALL');\\r\\n\\r\\n\\tlet money = ns.getServerMoneyAvailable(target);\\r\\n\\tlet oldMoney = 0;\\r\\n\\r\\n\\tlet security = ns.getServerSecurityLevel(target);\\r\\n\\tlet oldSecurity = 0;\\r\\n\\r\\n\\twhile (true) {\\r\\n\\t\\tif (money != oldMoney) {\\r\\n\\t\\t\\tns.print(`Money: ${Math.floor(money)}`);\\r\\n\\t\\t}\\r\\n\\t\\toldMoney = money;\\r\\n\\t\\tmoney = ns.getServerMoneyAvailable(target);\\r\\n\\t\\tif (security != oldSecurity) {\\r\\n\\t\\t\\tns.print(`Security: ${Math.floor(security)}`);\\r\\n\\t\\t}\\r\\n\\t\\toldSecurity = security;\\r\\n\\t\\tsecurity = ns.getServerSecurityLevel(target);\\r\\n\\t\\tawait ns.sleep(1000);\\r\\n\\t}\\r\\n}\",\"filename\":\"/old/hackTarget.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":374}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\r\\nasync function getChildren(ns, current, parent, list) {\\r\\n\\tlet children = await ns.scan(current);\\r\\n\\tfor (let child of children) {\\r\\n\\t\\tif (parent === child) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tlist.push(child);\\r\\n\\r\\n\\t\\tawait getChildren(ns, child, current, list);\\r\\n\\t}\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nasync function findServer(ns, current, parent, search) {\\r\\n\\tif (current === search) {\\r\\n\\t\\treturn current;\\r\\n\\t}\\r\\n\\tlet children = await ns.scan(current);\\r\\n\\tfor (let child of children) {\\r\\n\\t\\tif (parent === child) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tlet childValue = await findServer(ns, child, current, search);\\r\\n\\t\\tif (childValue != '') {\\r\\n\\t\\t\\treturn current + '>' + childValue;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn '';\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet targets = [];\\r\\n\\tawait getChildren(ns, 'home', '', targets);\\r\\n\\r\\n\\tlet purchasedServers = ns.getPurchasedServers();\\r\\n\\ttargets = targets.filter(server => !purchasedServers.includes(server));\\r\\n\\t\\r\\n\\tlet contractServers = targets.filter(server => ns.ls(server).find(file => file.endsWith('.cct')));\\r\\n\\r\\n\\tif (contractServers.length < 1) {\\r\\n\\t\\tns.tprint('No contract found.');\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tfor (let contractServer of contractServers) {\\r\\n\\t\\tns.tprint('Found contract on: ' + await findServer(ns, 'home', '', contractServer));\\r\\n\\t}\\r\\n}\",\"filename\":\"/old/contractSearch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.25,\"server\":\"home\",\"moduleSequenceNumber\":375}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = 'silver-helix';\\r\\n\\r\\n    ns.disableLog('ALL');\\r\\n\\r\\n    let moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    let securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        let securityLevel = ns.getServerSecurityLevel(target);\\r\\n        let money = ns.getServerMoneyAvailable(target);\\r\\n        if (securityLevel > securityThresh) {\\r\\n            ns.print(`WeakenTime: ${ns.getWeakenTime(target)}`);\\r\\n            let decrease = await ns.weaken(target);\\r\\n            ns.print(`Weaken: ${securityLevel} -> ${securityLevel - decrease}`)\\r\\n        } else if (money < moneyThresh) {\\r\\n            ns.print(`GrowTimer: ${ns.getGrowTime(target)}`);\\r\\n            let multiplier = await ns.grow(target);\\r\\n            ns.print(`Grow: ${money} -> ${money * multiplier}`);\\r\\n        } else {\\r\\n            ns.print(`HackTimer: ${ns.getHackTime(target)}`);\\r\\n            let stolenMoney = await ns.hack(target);\\r\\n            ns.print(`Hack: ${stolenMoney}`);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/old/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":376}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\r\\nasync function getChildren(ns, current, parent, list) {\\r\\n\\tlet children = await ns.scan(current);\\r\\n\\tfor (let child of children) {\\r\\n\\t\\tif (parent === child) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tlist.push(child);\\r\\n\\r\\n\\t\\tawait getChildren(ns, child, current, list);\\r\\n\\t}\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let targets = [];\\r\\n\\tawait getChildren(ns, 'home', '', targets);\\r\\n\\r\\n\\ttargets = targets.sort((a, b) => ns.getServerMaxMoney(a) - ns.getServerMaxMoney(b));\\r\\n\\r\\n\\tfor (let target of targets) {\\r\\n\\t\\tlet money = Math.floor(ns.getServerMaxMoney(target)).toString().padEnd(14);\\r\\n\\t\\tns.tprint(`> ${target.padEnd(20)}|Money: ${money}|Hacking: ${ns.getServerRequiredHackingLevel(target).toString().padEnd(5)}`);\\r\\n\\t}\\r\\n}\",\"filename\":\"/old/sortScan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":377}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let message = ns.args.join(' ');\\r\\n    ns.writePort(20, message);\\r\\n}\",\"filename\":\"handler.js\",\"url\":\"blob:file:///1c3cacdb-9db7-4fd0-bcf3-b8df37d4130e\",\"module\":\"\",\"dependencies\":[{\"filename\":\"handler.js\",\"url\":\"blob:file:///1c3cacdb-9db7-4fd0-bcf3-b8df37d4130e\"}],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":378}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"..\\\").NS} ns */\\r\\nasync function getChildren(ns, current, parent, list) {\\r\\n\\tlet children = await ns.scan(current);\\r\\n\\tfor (let child of children) {\\r\\n\\t\\tif (parent === child) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tlet contractFiles = ns.ls(child, '.cct');\\r\\n\\t\\tfor (let file of contractFiles) {\\r\\n\\t\\t\\tlist.push([file, child]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tawait getChildren(ns, child, current, list);\\r\\n\\t}\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"..\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog('scan');\\r\\n\\tlet contracts = [];\\r\\n\\tawait getChildren(ns, 'home', '', contracts);\\r\\n\\tns.tprint(`Found ${contracts.length} contracts, starting the solvers...`);\\r\\n\\r\\n\\tlet solved = 0;\\r\\n\\r\\n\\tfor (let contract of contracts) {\\r\\n\\t\\tlet contractType = ns.codingcontract.getContractType(contract[0], contract[1]);\\r\\n\\t\\tswitch(contractType) {\\r\\n\\t\\t\\tcase 'Subarray with Maximum Sum':\\r\\n\\t\\t\\t\\tif (ns.run('contract/subarrayWithMaximumSum.js', 1, contract[0], contract[1]) > 0) solved++;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'Generate IP Addresses':\\r\\n\\t\\t\\t\\tif (ns.run('contract/generateIPAddresses.js', 1, contract[0], contract[1]) > 0) solved++;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'Find All Valid Math Expressions':\\r\\n\\t\\t\\t\\tif (ns.run('contract/findAllValidMathExpressions.js', 1, contract[0], contract[1]) > 0) solved++;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'Find Largest Prime Factor':\\r\\n\\t\\t\\t\\tif (ns.run('contract/findLargestPrimeFactor.js', 1, contract[0], contract[1]) > 0) solved++;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'Algorithmic Stock Trader I':\\r\\n\\t\\t\\t\\tif (ns.run('contract/algorithmicStockTraderI.js', 1, contract[0], contract[1]) > 0) solved++;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'Algorithmic Stock Trader II':\\r\\n\\t\\t\\t\\tif (ns.run('contract/algorithmicStockTraderII.js', 1, contract[0], contract[1]) > 0);\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'Algorithmic Stock Trader III':\\r\\n\\t\\t\\t\\tif (ns.run('contract/algorithmicStockTraderIII.js', 1, contract[0], contract[1]) > 0);\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'Total Ways to Sum':\\r\\n\\t\\t\\t\\tif (ns.run('contract/totalWaysToSum.js', 1, contract[0], contract[1]) > 0) solved++;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'Array Jumping Game':\\r\\n\\t\\t\\t\\tif (ns.run('contract/arrayJumpingGame.js', 1, contract[0], contract[1]) > 0) solved++;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'Merge Overlapping Intervals':\\r\\n\\t\\t\\t\\tif (ns.run('contract/mergeOverlappingIntervals.js', 1, contract[0], contract[1]) > 0) solved++;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'Unique Paths in a Grid I':\\r\\n\\t\\t\\t\\tif (ns.run('contract/uniquePathsInAGridI.js', 1, contract[0], contract[1]) > 0) solved++;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'Sanitize Parentheses in Expression':\\r\\n\\t\\t\\t\\tif (ns.run('contract/sanitizeParenthesesInExpression.js', 1, contract[0], contract[1]) > 0);\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'Minimum Path Sum in a Triangle':\\r\\n\\t\\t\\t\\tif (ns.run('contract/minimumPathSumInATriangle.js', 1, contract[0], contract[1]) > 0);\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'Spiralize Matrix':\\r\\n\\t\\t\\t\\tif (ns.run('contract/spiralizeMatrix.js', 1, contract[0], contract[1]) > 0);\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tdefault:\\r\\n\\t\\t\\t\\tns.tprint(`Found contract ${contract[0]} of type '${contractType}' on ${contract[1]}`);\\r\\n\\t\\t\\t\\tns.tprint(`Description: ${ns.codingcontract.getDescription(contract[0], contract[1])}`);\\r\\n\\t\\t\\t\\tns.tprint('-'.repeat(40));\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tns.tprint(`Solved ${solved} contracts, ${contracts.length - solved} contracts remain unsolved.`);\\r\\n}\",\"filename\":\"/old/contractManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":13,\"server\":\"home\",\"moduleSequenceNumber\":379}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let maxLevel = 200;\\r\\nlet maxRam = 64;\\r\\nlet maxRamUpgrades = 7;\\r\\nlet maxCores = 16;\\r\\n\\r\\nlet buyThreshold = 0.05;\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet nodeCount = ns.hacknet.numNodes();\\r\\n\\t\\r\\n\\tfor (let i = 0; i < nodeCount; i++) {\\r\\n\\t\\tlet nodeStats = ns.hacknet.getNodeStats(i);\\r\\n\\t\\tif (nodeStats.level === maxLevel && nodeStats.ram === maxRam && nodeStats.cores === maxCores) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tawait upgradeNode(ns, i);\\r\\n\\t}\\r\\n\\t\\r\\n\\twhile (ns.hacknet.numNodes() < ns.hacknet.maxNumNodes()) {\\r\\n\\t\\tlet currentMoney = ns.getServerMoneyAvailable('home');\\r\\n\\r\\n\\t\\tlet cost = ns.hacknet.getPurchaseNodeCost();\\r\\n\\t\\tif (cost / currentMoney < buyThreshold) {\\r\\n\\t\\t\\tlet node = ns.hacknet.purchaseNode();\\r\\n\\t\\t\\tawait upgradeNode(ns, node);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tawait ns.sleep(1000);\\r\\n\\t}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {import(\\\".\\\").NS} ns\\r\\n * @param {Number} node\\r\\n*/\\r\\nasync function upgradeNode(ns, node) {\\r\\n\\tlet fullUpgrades = false;\\r\\n\\tlet nodeStats = ns.hacknet.getNodeStats(node);\\r\\n\\twhile (!fullUpgrades) {\\r\\n\\t\\tlet currentMoney = ns.getServerMoneyAvailable('home');\\r\\n\\t\\tlet cost = ns.hacknet.getLevelUpgradeCost(node, maxLevel - nodeStats.level);\\r\\n\\t\\tcost += ns.hacknet.getRamUpgradeCost(node, maxRamUpgrades - nodeStats.ram);\\r\\n\\t\\tcost += ns.hacknet.getCoreUpgradeCost(node, maxCores - nodeStats.cores);\\r\\n\\r\\n\\t\\tif (cost / currentMoney < buyThreshold) {\\r\\n\\t\\t\\tns.hacknet.upgradeLevel(node, maxLevel - nodeStats.level);\\r\\n\\t\\t\\tns.hacknet.upgradeRam(node, maxRamUpgrades - nodeStats.ram);\\r\\n\\t\\t\\tns.hacknet.upgradeCore(node, maxCores - nodeStats.cores);\\r\\n\\t\\t\\tfullUpgrades = true;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tawait ns.sleep(1000);\\r\\n\\t}\\r\\n}\",\"filename\":\"/old/hacknetManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":380}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"..\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet baseRam = 8;\\r\\n\\tlet upgradeMultiplier = 32;\\r\\n\\tlet hostName = ns.getHostname();\\r\\n\\r\\n    let servers = ns.getPurchasedServers();\\r\\n\\tlet ramGoal = getLowestRam(servers, ns) * upgradeMultiplier;\\r\\n\\r\\n\\tif (ramGoal == 0) {\\r\\n\\t\\tlet baught = 0;\\r\\n\\t\\tfor (let i = servers.length - 1; i < ns.getPurchasedServerLimit(); i++) {\\r\\n\\t\\t\\tif (ns.getServerMoneyAvailable('home') > ns.getPurchasedServerCost(baseRam)) {\\r\\n\\t\\t\\t\\tbaught++;\\r\\n\\t\\t\\t\\tns.purchaseServer(\\\"blank-\\\" + i, baseRam);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tns.tprint(`Baught ${baught} servers with ${baseRam}gb each. For a total of ${servers.length + baught}.`);\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tservers.filter((s) => ns.getServerMaxRam(s) <= ramGoal);\\r\\n\\r\\n\\r\\n\\tlet upgraded = 0;\\r\\n\\tfor (let server of servers) {\\r\\n\\t\\tif (ns.getServerMoneyAvailable('home') > ns.getPurchasedServerCost(ramGoal)) {\\r\\n\\t\\t\\tupgraded++;\\r\\n\\t\\t\\tns.killall(server);\\r\\n\\t\\t\\tns.deleteServer(server);\\r\\n\\t\\t\\tns.purchaseServer(server, ramGoal);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (upgraded == 0) {\\r\\n\\t\\tns.tprint(`Not enough money for upgrade: ${ns.getPurchasedServerCost(ramGoal) / (1000 * 1000)}m per Server.`);\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tns.tprint(`Upgraded ${upgraded} Server to ${ramGoal}gb.`);\\r\\n\\r\\n\\tns.spawn('hackManager.js');\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {String[]} servers\\r\\n * @param {import(\\\"..\\\").NS} ns\\r\\n*/\\r\\nfunction getLowestRam(servers, ns) {\\r\\n\\tif (servers.length < 25) {\\r\\n\\t\\treturn 0;\\r\\n\\t}\\r\\n\\tlet ram = Number.POSITIVE_INFINITY;\\r\\n\\tfor (let server of servers) {\\r\\n\\t\\tif (ns.getServerMaxRam(server) < ram) {\\r\\n\\t\\t\\tram = ns.getServerMaxRam(server);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn ram;\\r\\n}\",\"filename\":\"/old/serverManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":11.35,\"server\":\"home\",\"moduleSequenceNumber\":381}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\nYou are given the following array with two elements:\\r\\n\\r\\n [2, [23,148,145,145,107,71,24,67,95,82,162,58,145,135,184,130,175,41,184,90,43,146,15,113,97,55,102,35,40,149,148,74,11,90,31,165,160,150,124,182,58]]\\r\\n\\r\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\r\\n\\r\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\r\\n\\r\\n If no profit can be made, then the answer should be 0.\\r\\n*/\\r\\n\\r\\n/** @param {import(\\\"../.\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n    let anwser = solve(data[0], data[1]);\\r\\n\\r\\n    if (anwser < 0) {\\r\\n        anwser = 0;\\r\\n    }\\r\\n\\r\\n    //let response = anwser;\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint('FAILED ATTEMPT');\\r\\n        ns.tprintf('Data %j', data);\\r\\n        ns.tprintf('Anwser %j', anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {Number[]} prices\\r\\n * */\\r\\nfunction solve(iterations, prices) {\\r\\n    let highestProfits = [];\\r\\n    for (let i = 0; i < iterations; i++) {\\r\\n        highestProfits.push(new Array(prices.length).fill(0));\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < iterations; i++) {\\r\\n        for (let j = 0; j < prices.length; j++) {\\r\\n            for (let k = j; k < prices.length; k++) {\\r\\n                if (i > 0 && j > 0 && k > 0) {\\r\\n                    highestProfits[i][k] = Math.max(\\r\\n                        highestProfits[i][k],\\r\\n                        highestProfits[i - 1][k],\\r\\n                        highestProfits[i][k - 1],\\r\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\r\\n                    );\\r\\n                } else if (i > 0 && j > 0) {\\r\\n                    highestProfits[i][k] = Math.max(\\r\\n                        highestProfits[i][k],\\r\\n                        highestProfits[i - 1][k],\\r\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\r\\n                    );\\r\\n                } else if (i > 0 && k > 0) {\\r\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i - 1][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\r\\n                } else if (j > 0 && k > 0) {\\r\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\r\\n                } else {\\r\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], prices[k] - prices[j]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return highestProfits[iterations - 1][prices.length - 1];\\r\\n}\\r\\n\",\"filename\":\"/contract/algorithmicStockTraderIV.js\",\"url\":\"blob:file:///300f61d0-349a-4f0c-8947-d32322d30c3a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/algorithmicStockTraderIV.js\",\"url\":\"blob:file:///300f61d0-349a-4f0c-8947-d32322d30c3a\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":382}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\nYou are located in the top-left corner of the following grid:\\r\\n\\r\\n0,0,0,0,\\r\\n0,0,0,0,\\r\\n0,0,1,0,\\r\\n0,1,0,0,\\r\\n0,0,0,0,\\r\\n0,0,0,0,\\r\\n0,0,0,0,\\r\\n0,0,0,0,\\r\\n1,1,1,0,\\r\\n0,0,0,0,\\r\\n0,0,0,0,\\r\\n\\r\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\r\\n\\r\\n Determine how many unique paths there are from start to finish.\\r\\n\\r\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\r\\n*/\\r\\n\\r\\n/** @param {import(\\\"..\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let contract = ns.args[0];\\r\\n    let server = ns.args[1];\\r\\n\\r\\n    let data = ns.codingcontract.getData(contract, server);\\r\\n\\r\\n    let anwser = step(0, 0, data);\\r\\n\\r\\n    //let response = \\\"NOT YET IMPLEMENTED\\\";\\r\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {\\r\\n        returnReward: true,\\r\\n    });\\r\\n\\r\\n    if (response) {\\r\\n        ns.tprint(response);\\r\\n    } else {\\r\\n        ns.tprint('FAILED ATTEMPT');\\r\\n        ns.tprintf('Data %j', data);\\r\\n        ns.tprintf('Anwser %i', anwser);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {Number} x\\r\\n * @param {Number} y\\r\\n * @param {Number[][]} grid\\r\\n * @returns\\r\\n */\\r\\nfunction step(x, y, grid) {\\r\\n    if (y + 1 === grid.length && x + 1 === grid[0].length) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    let pathCounter = 0;\\r\\n\\r\\n    if (y + 1 < grid.length && grid[y + 1][x] == 0) {\\r\\n        pathCounter += step(x, y + 1, grid);\\r\\n    }\\r\\n\\r\\n    if (x + 1 < grid[0].length && grid[y][x + 1] == 0) {\\r\\n        pathCounter += step(x + 1, y, grid);\\r\\n    }\\r\\n\\r\\n    return pathCounter;\\r\\n}\\r\\n\",\"filename\":\"/contract/uniquePathsInAGridII.js\",\"url\":\"blob:file:///7e335f5a-5326-468d-86d2-571b6900bd15\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/uniquePathsInAGridII.js\",\"url\":\"blob:file:///7e335f5a-5326-468d-86d2-571b6900bd15\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":383}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///7a470552-8cb7-49f4-a311-32e14564906e\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///7a470552-8cb7-49f4-a311-32e14564906e\"}],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":384}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///e39a698d-d400-4d5f-a5eb-44ddfdbe12da\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///e39a698d-d400-4d5f-a5eb-44ddfdbe12da\"}],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":385}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///292eaa90-fc55-4fc6-89c9-592a24fa0dfd\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///292eaa90-fc55-4fc6-89c9-592a24fa0dfd\"}],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":386}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ServerTree {\\r\\n    /**\\r\\n     * @param {String} name\\r\\n     * @param {Server[]} children\\r\\n     * @param {String} path\\r\\n     */\\r\\n    constructor(name, children, path) {\\r\\n        this.name = name;\\r\\n        this.children = children;\\r\\n        this.path = path;\\r\\n    }\\r\\n\\r\\n    isHome() {\\r\\n        return this.name === 'home';\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @returns {ServerTree[]} List of all the servers\\r\\n     */\\r\\n    toArray() {\\r\\n        let list = [];\\r\\n        for (const child of this.children) {\\r\\n            list = list.concat(child.toArray());\\r\\n        }\\r\\n        return [new ServerTree(this.name, [], this.path)].concat(list);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @returns {ServerTree[]} List of all the servers\\r\\n     */\\r\\n    toStringArray() {\\r\\n        let list = [];\\r\\n        for (const child of this.children) {\\r\\n            list = list.concat(child.toStringArray());\\r\\n        }\\r\\n        return [this.name].concat(list);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {Number} depth\\r\\n     */\\r\\n    maxDepth(depth = 0) {\\r\\n        let maxDepth = depth;\\r\\n        for (const child of this.children) {\\r\\n            maxDepth = Math.max(maxDepth, child.maxDepth(depth + 1));\\r\\n        }\\r\\n        return maxDepth;\\r\\n    }\\r\\n\\r\\n    longestName() {\\r\\n        let nameLength = this.name.length;\\r\\n        for (const child of this.children) {\\r\\n            nameLength = Math.max(nameLength, child.longestName());\\r\\n        }\\r\\n        return nameLength;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Server {\\r\\n    /**\\r\\n     * @param {String} name\\r\\n     */\\r\\n    constructor(name) {\\r\\n        this.name = name;\\r\\n        this.target = false;\\r\\n        this.root = false;\\r\\n        this.growTimer = 0;\\r\\n        this.hackTimer = 0;\\r\\n        this.weakenTimer = 0;\\r\\n\\r\\n        this.moneyStolenPerSecondQueue = [];\\r\\n        this.securityIncreasePerSecondQueue = [];\\r\\n    }\\r\\n\\r\\n    /** @returns {Boolean} */\\r\\n    isHome() {\\r\\n        return this.name === 'home';\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {Number} money\\r\\n     * @returns {Boolean}\\r\\n     */\\r\\n    queueMoneyStolenPerSec(money) {\\r\\n        this.moneyStolenPerSecondQueue.push(money);\\r\\n        return this.moneyStolenPerSecondQueue.shift();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {Number} security\\r\\n     * @returns {Boolean}\\r\\n     */\\r\\n    queueSecurityIncreasePerSec(security) {\\r\\n        this.securityIncreasePerSecondQueue.push(security);\\r\\n        return this.securityIncreasePerSecondQueue.shift();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @returns {Number}\\r\\n     */\\r\\n    averageMoneyStolenPerSec() {\\r\\n        if (this.moneyStolenPerSecondQueue.length === 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return this.moneyStolenPerSecondQueue.reduce((p, c) => p + c, 0) / this.moneyStolenPerSecondQueue.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @returns {Number}\\r\\n     */\\r\\n    averageSecurityIncreasePerSec() {\\r\\n        if (this.securityIncreasePerSecondQueue.length === 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return this.securityIncreasePerSecondQueue.reduce((p, c) => p + c, 0) / this.securityIncreasePerSecondQueue.length;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {Number} number\\r\\n * @param {Boolean} bytes\\r\\n * @returns {String}\\r\\n */\\r\\nexport function numberSquish(number, bytes) {\\r\\n    if (number == 0) {\\r\\n        return bytes ? '0GB' : '0.000';\\r\\n    }\\r\\n    let letters = bytes ? ['GB', 'TB', 'PB'] : ['', 'k', 'm', 'b', 't'];\\r\\n    let index = Math.floor(Math.log10(Math.abs(number)) / 3);\\r\\n\\r\\n    if (index > 0) {\\r\\n        number = number / Math.pow(1000, index);\\r\\n    }\\r\\n\\r\\n    let letter;\\r\\n    if (index >= letters.length) {\\r\\n        letter = 'ADD MORE LETTER';\\r\\n    } else if (index < 0) {\\r\\n        letter = '';\\r\\n    } else {\\r\\n        letter = letters[index];\\r\\n    }\\r\\n\\r\\n    return number.toLocaleString('en-UK', { maximumFractionDigits: bytes ? 0 : 3, minimumFractionDigits: bytes ? 0 : 3 }) + letter;\\r\\n}\\r\\n\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":387}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"..\\\").NS} ns */\\r\\nasync function getChildren(ns, current, parent, list) {\\r\\n    let children = await ns.scan(current);\\r\\n    for (let child of children) {\\r\\n        if (parent === child) {\\r\\n            continue;\\r\\n        }\\r\\n        list.push(child);\\r\\n\\r\\n        await getChildren(ns, child, current, list);\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"..\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n\\r\\n    let scriptName = 'smartHack.js';\\r\\n    let monitorScriptName = 'hackMonitor.js';\\r\\n    let scriptRam = ns.getScriptRam(scriptName);\\r\\n    let homeRamSpace = 1024;\\r\\n\\r\\n    let hostName = ns.getHostname();\\r\\n\\r\\n    let portLevel = 0;\\r\\n    if (ns.fileExists('brutessh.exe')) portLevel = 1;\\r\\n    if (ns.fileExists('ftpcrack.exe')) portLevel = 2;\\r\\n    if (ns.fileExists('relaysmtp.exe')) portLevel = 3;\\r\\n    if (ns.fileExists('httpworm.exe')) portLevel = 4;\\r\\n    if (ns.fileExists('sqlinject.exe')) portLevel = 5;\\r\\n\\r\\n    let allServers = [];\\r\\n    await getChildren(ns, hostName, '', allServers);\\r\\n\\r\\n    let targets = [];\\r\\n    let totalTargetMaxMoney = 0;\\r\\n    for (let server of allServers) {\\r\\n        if (ns.getServerMaxMoney(server) > 0) {\\r\\n            if (ns.getServerNumPortsRequired(server) <= portLevel) {\\r\\n                if (ns.getServerRequiredHackingLevel(server) <= Math.ceil(ns.getHackingLevel() * 0.9)) {\\r\\n                    totalTargetMaxMoney += ns.getServerMaxMoney(server);\\r\\n                    targets.push({ name: server, moneyP: 0, threads: 0 });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (let target of targets) {\\r\\n        target.moneyP = ns.getServerMaxMoney(target.name) / totalTargetMaxMoney;\\r\\n    }\\r\\n\\r\\n    for (let server of allServers) {\\r\\n        if (!ns.hasRootAccess(server)) {\\r\\n            switch (ns.getServerNumPortsRequired(server)) {\\r\\n                case 5:\\r\\n                    if (portLevel < 5) continue;\\r\\n                    ns.sqlinject(server);\\r\\n                case 4:\\r\\n                    if (portLevel < 4) continue;\\r\\n                    ns.httpworm(server);\\r\\n                case 3:\\r\\n                    if (portLevel < 3) continue;\\r\\n                    ns.relaysmtp(server);\\r\\n                case 2:\\r\\n                    if (portLevel < 2) continue;\\r\\n                    ns.ftpcrack(server);\\r\\n                case 1:\\r\\n                    if (portLevel < 1) continue;\\r\\n                    ns.brutessh(server);\\r\\n                case 0:\\r\\n                    ns.nuke(server);\\r\\n                    break;\\r\\n                default:\\r\\n                    continue;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ns.scriptKill(scriptName, server);\\r\\n        ns.rm(scriptName, server);\\r\\n        await ns.scp(scriptName, server);\\r\\n        let ram = ns.getServerMaxRam(server);\\r\\n        let maxThreads = Math.floor(ram / scriptRam);\\r\\n\\r\\n        let threadCount = 0;\\r\\n        for (let i = 0; i < targets.length - 1; i++) {\\r\\n            let targetThreads = Math.floor(maxThreads * targets[i].moneyP);\\r\\n            if (targetThreads > 0) {\\r\\n                execute(ns, scriptName, server, targets[i], targetThreads);\\r\\n            }\\r\\n            targets[i].threads += targetThreads;\\r\\n            threadCount += targetThreads;\\r\\n        }\\r\\n        if (threadCount < maxThreads) {\\r\\n            let targetThreads = maxThreads - threadCount;\\r\\n            if (targetThreads > 0) {\\r\\n                execute(ns, scriptName, server, targets[targets.length - 1], targetThreads);\\r\\n            }\\r\\n            targets[targets.length - 1].threads += targetThreads;\\r\\n            threadCount += targetThreads;\\r\\n        }\\r\\n\\r\\n        if (threadCount < maxThreads) {\\r\\n            ns.tprintf(`Remaining threads on ${server}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.scriptKill(monitorScriptName, hostName);\\r\\n    for (let target of targets) {\\r\\n        ns.exec(monitorScriptName, hostName, 1, target.name);\\r\\n    }\\r\\n\\r\\n    ns.scriptKill(scriptName, hostName);\\r\\n    let ram = ns.getServerMaxRam(hostName) - homeRamSpace;\\r\\n    let maxThreads = Math.floor(ram / scriptRam);\\r\\n\\r\\n    let threadCount = 0;\\r\\n    for (let i = 0; i < targets.length - 1; i++) {\\r\\n        let targetThreads = Math.floor(maxThreads * targets[i].moneyP);\\r\\n        if (targetThreads > 0) {\\r\\n            execute(ns, scriptName, hostName, targets[i], targetThreads);\\r\\n        }\\r\\n        targets[i].threads += targetThreads;\\r\\n        threadCount += targetThreads;\\r\\n    }\\r\\n\\r\\n    if (threadCount < maxThreads) {\\r\\n        let targetThreads = maxThreads - threadCount;\\r\\n        if (targetThreads > 0) {\\r\\n            execute(ns, scriptName, hostName, targets[targets.length - 1], targetThreads);\\r\\n        }\\r\\n        targets[targets.length - 1].threads += targetThreads;\\r\\n        threadCount += targetThreads;\\r\\n    }\\r\\n\\r\\n    if (threadCount < maxThreads) {\\r\\n        ns.tprintf(`Remaining threads on ${server}`);\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => a.threads - b.threads);\\r\\n    let totalThreads = 0;\\r\\n    for (let target of targets) {\\r\\n        ns.tprint(`Target: ${target.name}, Threads startet: ${target.threads}`);\\r\\n        totalThreads += target.threads;\\r\\n    }\\r\\n    ns.tprint(`Total Threads startet: ${totalThreads}`);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"..\\\").NS} ns */\\r\\nfunction execute(ns, scriptName, server, target, threads) {\\r\\n    ns.exec(scriptName, server, threads, target.name);\\r\\n    ns.print(`Execute ${scriptName} at ${server} -> ${target} with ${threads} threads.`);\\r\\n}\\r\\n\",\"filename\":\"/old/hackManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.7,\"server\":\"home\",\"moduleSequenceNumber\":388}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0];\\r\\n\\r\\n\\tns.disableLog('ALL');\\r\\n\\r\\n\\tlet money = ns.getServerMoneyAvailable(target);\\r\\n\\tlet oldMoney = 0;\\r\\n\\r\\n\\tlet security = ns.getServerSecurityLevel(target);\\r\\n\\tlet oldSecurity = 0;\\r\\n\\r\\n\\twhile (true) {\\r\\n\\t\\tif (money != oldMoney) {\\r\\n\\t\\t\\tns.print(`Money: ${Math.floor(money)}`);\\r\\n\\t\\t}\\r\\n\\t\\toldMoney = money;\\r\\n\\t\\tmoney = ns.getServerMoneyAvailable(target);\\r\\n\\t\\tif (security != oldSecurity) {\\r\\n\\t\\t\\tns.print(`Security: ${Math.floor(security)}`);\\r\\n\\t\\t}\\r\\n\\t\\toldSecurity = security;\\r\\n\\t\\tsecurity = ns.getServerSecurityLevel(target);\\r\\n\\t\\tawait ns.sleep(1000);\\r\\n\\t}\\r\\n}\",\"filename\":\"/old/hackMonitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":389}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    ns.disableLog('ALL');\\r\\n\\r\\n    let moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    let securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        let securityLevel = ns.getServerSecurityLevel(target);\\r\\n        let money = ns.getServerMoneyAvailable(target);\\r\\n        if (securityLevel > securityThresh) {\\r\\n            ns.print(`WeakenTime: ${ns.getWeakenTime(target)}`);\\r\\n            let decrease = await ns.weaken(target);\\r\\n            ns.print(`Weaken: ${securityLevel} -> ${securityLevel - decrease}`)\\r\\n        } else if (money < moneyThresh) {\\r\\n            ns.print(`GrowTimer: ${ns.getGrowTime(target)}`);\\r\\n            let multiplier = await ns.grow(target);\\r\\n            ns.print(`Grow: ${money} -> ${money * multiplier}`);\\r\\n        } else {\\r\\n            ns.print(`HackTimer: ${ns.getHackTime(target)}`);\\r\\n            let stolenMoney = await ns.hack(target);\\r\\n            ns.print(`Hack: ${stolenMoney}`);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/old/smartHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":390}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { numberSquish } from './lib.js';\\r\\n\\r\\n/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let symbols = ns.stock.getSymbols();\\r\\n\\r\\n    let budget = ns.getServerMoneyAvailable('home') * (Number.parseFloat(ns.args[0]) || 0);\\r\\n    let totalSpent = 0;\\r\\n\\r\\n    while (true) {\\r\\n        let spendingMoney = budget - totalSpent;\\r\\n\\r\\n        symbols.sort((a, b) => Math.abs(ns.stock.getForecast(b) - 0.5) - Math.abs(ns.stock.getForecast(a) - 0.5));\\r\\n\\r\\n        for (let symbol of symbols) {\\r\\n            let forecast = ns.stock.getForecast(symbol);\\r\\n            let position = ns.stock.getPosition(symbol);\\r\\n            if (forecast > 0.6) {\\r\\n                let price = ns.stock.getAskPrice(symbol);\\r\\n                let amount = Math.min(Math.floor(spendingMoney / price), ns.stock.getMaxShares(symbol)) - position[0];\\r\\n                if (ns.stock.buy(symbol, amount) > 0) {\\r\\n                    ns.tprint('Baught long: ' + symbol + ' * ' + position[0]);\\r\\n                    totalSpent += price;\\r\\n                }\\r\\n            } else if (forecast < 0.4) {\\r\\n                // let price = ns.stock.getBidPrice(symbol);\\r\\n                // let amount = Math.min(Math.floor(spendingMoney / price), ns.stock.getMaxShares(symbol)) - position[2];\\r\\n                // if (ns.stock.short(symbol, amount) > 0) {\\r\\n                //     ns.tprint('Baught short: ' + symbol + ' * ' + position[0]);\\r\\n                //     totalSpent += price;\\r\\n                // }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        let earned = 0;\\r\\n\\r\\n        for (let symbol of symbols) {\\r\\n            let position = ns.stock.getPosition(symbol);\\r\\n            let forecast = ns.stock.getForecast(symbol);\\r\\n            if (position[0] > 0 && forecast < 0.5) {\\r\\n                if (ns.stock.sell(symbol, position[0])) {\\r\\n                    earned += ns.stock.getSaleGain(symbol, position[0], 'Long');\\r\\n                    ns.tprint('Sold long: ' + symbol + ' * ' + position[0]);\\r\\n                } else {\\r\\n                    ns.tprint('ERROR WHILE SELLING');\\r\\n                }\\r\\n            }\\r\\n            if (position[2] > 0 && forecast > 0.5) {\\r\\n                if (ns.stock.sellShort(symbol, position[2]) > 0) {\\r\\n                    earned += ns.stock.getSaleGain(symbol, position[2], 'Short');\\r\\n                    ns.tprint('Sold short: ' + symbol + ' * ' + position[0]);\\r\\n                } else {\\r\\n                    ns.tprint('ERROR WHILE SELLING');\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        budget += earned * 0.9;\\r\\n        if (earned > 0) ns.tprint('Budget (For every Earing only 90% is added back to the budget): ' + numberSquish(budget));\\r\\n\\r\\n        await ns.sleep(2000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"stockManager.js\",\"url\":\"blob:file:///fccf9d88-a974-4add-b543-70d3f1f8689c\",\"module\":{},\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:file:///f8a91064-b6ec-46c3-a59b-cc62da5bc35c\"},{\"filename\":\"stockManager.js\",\"url\":\"blob:file:///fccf9d88-a974-4add-b543-70d3f1f8689c\"}],\"ramUsage\":21.7,\"server\":\"home\",\"moduleSequenceNumber\":710}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///77d5408a-9124-4a3f-b060-feea9d8d4522\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///77d5408a-9124-4a3f-b060-feea9d8d4522\"}],\"ramUsage\":7.75,\"server\":\"home\",\"moduleSequenceNumber\":392}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.sleep(1000);\\r\\n        ns.tprint(ns.getTimeSinceLastAug() % 1000000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"timer.js\",\"url\":\"blob:file:///76369718-6607-40d2-b8f2-285679f62a19\",\"module\":\"\",\"dependencies\":[{\"filename\":\"timer.js\",\"url\":\"blob:file:///76369718-6607-40d2-b8f2-285679f62a19\"}],\"ramUsage\":1.65,\"server\":\"home\",\"moduleSequenceNumber\":393}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n\\r\\n    if (gMult > 1 || missingSec > 0) {\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.run('workerGrow.js', gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.run('workerWeaken.js', wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let extraDelay = 700 - (wTimer % 1000);\\r\\n    if (extraDelay < 0) {\\r\\n        extraDelay += 1000;\\r\\n    }\\r\\n\\r\\n    let wDelay = extraDelay;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100 + extraDelay;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200 + extraDelay;\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) == 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n            changer++;\\r\\n        }\\r\\n\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":8.5,\"server\":\"home\",\"moduleSequenceNumber\":394}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    var server = ns.args[0];\\r\\n    var sleeptime = ns.args[1];\\r\\n    await ns.sleep(sleeptime);\\r\\n    await ns.grow(server);\\r\\n}\\r\\n\",\"filename\":\"/newserver/grow.js\",\"url\":\"blob:file:///8e0203e9-fdc5-4baa-b451-909ed1e05f9d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:file:///8e0203e9-fdc5-4baa-b451-909ed1e05f9d\"}],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":395}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    var server = ns.args[0];\\r\\n    var sleeptime = ns.args[1];\\r\\n    await ns.sleep(sleeptime);\\r\\n    await ns.hack(server);\\r\\n}\\r\\n\",\"filename\":\"/newserver/hack.js\",\"url\":\"blob:file:///8073161e-e817-49ca-8912-56fbafeebc23\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:file:///8073161e-e817-49ca-8912-56fbafeebc23\"}],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":396}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"..\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    var server = ns.args[0]; //Host to hack\\r\\n    var server2 = ns.getHostname(); //Server to run scripts on\\r\\n    var i = 0;\\r\\n    var c = 0;\\r\\n    var player = ns.getPlayer();\\r\\n    var fserver = ns.getServer(server);\\r\\n    var contstantRam = ns.getScriptRam('/newserver/OP.ns'); //grabbing script RAM values\\r\\n    var hackscriptRam = ns.getScriptRam('/newserver/hack.js');\\r\\n    var growscriptRam = ns.getScriptRam('/newserver/grow.js');\\r\\n    var weakenscriptRam = ns.getScriptRam('/newserver/weaken.js');\\r\\n    var maxRam = ns.getServerMaxRam(server2) - contstantRam; //getting total RAM I can use that doesnt include the OP script\\r\\n    var weakenThreads = 2000 - ns.getServerMinSecurityLevel(server) / 0.05;\\r\\n    var maxGrowThreads = maxRam / growscriptRam - weakenscriptRam * 2000;\\r\\n    var cs = ns.getServerSecurityLevel(server);\\r\\n    var ms = ns.getServerMinSecurityLevel(server);\\r\\n    var mm = ns.getServerMaxMoney(server);\\r\\n    var ma = ns.getServerMoneyAvailable(server);\\r\\n\\r\\n    //Priming the server.  Max money and Min security must be acheived for this to work\\r\\n    if (ma < mm == true) {\\r\\n        ns.exec('/newserver/weaken.js', server2, 2000, server, 0);\\r\\n        ns.exec('/newserver/grow.js', server2, maxGrowThreads, server, 0);\\r\\n        var WeakenTime = ns.formulas.hacking.weakenTime(fserver, player);\\r\\n        await ns.sleep(WeakenTime + 1000);\\r\\n        mm = ns.getServerMaxMoney(server);\\r\\n        ma = ns.getServerMoneyAvailable(server);\\r\\n        player = ns.getPlayer();\\r\\n        fserver = ns.getServer(server);\\r\\n        cs = ns.getServerSecurityLevel(server);\\r\\n        ms = ns.getServerMinSecurityLevel(server);\\r\\n    }\\r\\n\\r\\n    //If Max Money is true, making sure security level is at its minimum\\r\\n    if (cs > ms == true) {\\r\\n        ns.exec('/newserver/weaken.js', server2, 2000, server, 0);\\r\\n        WeakenTime = ns.formulas.hacking.weakenTime(fserver, player);\\r\\n        await ns.sleep(WeakenTime + 1000);\\r\\n        cs = ns.getServerSecurityLevel(server);\\r\\n        ms = ns.getServerMinSecurityLevel(server);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Finished Priming');\\r\\n\\r\\n    //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\r\\n    player = ns.getPlayer();\\r\\n    fserver = ns.getServer(server);\\r\\n\\r\\n    var HPercent = ns.formulas.hacking.hackPercent(fserver, player) * 100;\\r\\n    var GPercent = ns.formulas.hacking.growPercent(fserver, 1, player, 1);\\r\\n    WeakenTime = ns.formulas.hacking.weakenTime(fserver, player);\\r\\n    var GrowTime = ns.formulas.hacking.growTime(fserver, player);\\r\\n    var HackTime = ns.formulas.hacking.hackTime(fserver, player);\\r\\n\\r\\n    var growThreads = Math.round(5 / (GPercent - 1)); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\r\\n    var hackThreads = Math.round(50 / HPercent); //Getting the amount of threads I need to hack 50% of the funds\\r\\n    weakenThreads = Math.round(weakenThreads - growThreads * 0.004); //Getting required threads to fully weaken the server\\r\\n\\r\\n    var totalRamForRun = hackscriptRam * hackThreads + growscriptRam * growThreads + weakenscriptRam * weakenThreads; //Calculating how much RAM is used for a single run\\r\\n    var sleepTime = WeakenTime / (maxRam / totalRamForRun); //finding how many runs this server can handle and setting the time between run execution\\r\\n\\r\\n    //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\r\\n    //{sleepTime = 500;\\r\\n    //}\\r\\n\\r\\n    var shiftCount = maxRam / totalRamForRun;\\r\\n    var offset = sleepTime / 2;\\r\\n    var gOffset = offset / 4;\\r\\n    var hOffset = offset / 2;\\r\\n\\r\\n    while (true) {\\r\\n        var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\r\\n        var gsleep = WeakenTime - GrowTime - gOffset; //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\r\\n        var hsleep = WeakenTime - HackTime - hOffset; //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\r\\n        var UsedRam = ns.getServerUsedRam(server2);\\r\\n\\r\\n        if (totalRamForRun >= maxRam - UsedRam == false) {\\r\\n            //making sure I have enough RAM to do a full run\\r\\n            ns.exec('/newserver/weaken.js', server2, weakenThreads, server, wsleep, i);\\r\\n            ns.exec('/newserver/grow.js', server2, growThreads, server, gsleep, i);\\r\\n            ns.exec('/newserver/hack.js', server2, hackThreads, server, hsleep, i);\\r\\n\\r\\n            if (c < shiftCount) {\\r\\n                await ns.sleep(sleepTime);\\r\\n                c++;\\r\\n            } else {\\r\\n                await ns.sleep(sleepTime + offset);\\r\\n                c = 0;\\r\\n            }\\r\\n\\r\\n            i++;\\r\\n        } else {\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    await ns.sleep(120000);\\r\\n}\\r\\n\",\"filename\":\"/newserver/OP.js\",\"url\":\"blob:file:///88d5eb31-8a62-496b-b169-8a07bbcd3fd5\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newserver/OP.js\",\"url\":\"blob:file:///88d5eb31-8a62-496b-b169-8a07bbcd3fd5\"}],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":397}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    var server = ns.args[0];\\r\\n    var sleeptime = ns.args[1];\\r\\n    await ns.sleep(sleeptime);\\r\\n    await ns.weaken(server);\\r\\n}\\r\\n\",\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:file:///a4172dfe-7e7f-443a-a221-441d4aeb7b64\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:file:///a4172dfe-7e7f-443a-a221-441d4aeb7b64\"}],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":398}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"blank-0\",\"blank-1\",\"blank-2\",\"blank-3\",\"blank-4\",\"blank-5\",\"blank-6\",\"blank-7\",\"blank-8\",\"blank-9\",\"blank-10\",\"blank-11\",\"blank-12\",\"blank-13\",\"blank-14\",\"blank-15\",\"blank-16\",\"blank-17\",\"blank-18\",\"blank-19\",\"blank-20\",\"blank-21\",\"blank-22\",\"blank-23\",\"blank-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"alpha-omega.txt\",\"text\":\"Alpha and Omega\\r\\n\\r\\nThen we saw a new Heaven and a new Earth, for our first Heaven and Earth had gone away, and our sea was no more. And we saw a new holy city, new Aeria, coming down out of this new Heaven, prepared as a bride adorned for her husband. And we heard a loud voice saying, 'Behold, the new dwelling place of the Gods. We will dwell with them, and they will be our people, and we will be with them as their Gods. We will wipe away every tear from their eyes, and death shall be no more, neither shall there be mourning, nor crying, nor pain anymore, for the former things have passed away.'\\r\\n\\r\\nAnd once we were seated on the throne we said 'Behold, I am making all things new.' Also we said, 'Write this down, for these words are trustworthy and true.' And we said to you, 'It is done! I am the Alpha and the Omega, the beginning and the end. To the thirsty I will give from the spring of the water of life without payment. The one who conquers will have this heritage, and we will be his God and he will be our son. But as for the cowardly, the faithless, the detestable, as for murderers, the sexually immoral, sorcerers, idolaters, and all liars, their portion will be in the lake that burns with fire and sulfur, for it is the second true death.'\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"46.2.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":1056}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":1057}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":1058}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":30337829085,\"moneyMax\":758445727125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1244,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"17.2.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":1026}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":1027}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":1028}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":40587439318,\"moneyMax\":1014685982950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1334,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"16.1.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1050}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1051}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1052}}],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":61.156,\"minDifficulty\":24,\"moneyAvailable\":683215566575,\"moneyMax\":683215566575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":908,\"serverGrowth\":65}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"48.6.0.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":1068}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":1069}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":1070}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":479586566650,\"moneyMax\":479586566650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":996,\"serverGrowth\":77}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"54.1.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":984}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":985}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":986}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22276252122,\"moneyMax\":556906303050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1163,\"serverGrowth\":74}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"84.6.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1002}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1003}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1004}}],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":23792056877,\"moneyMax\":594801421925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1098,\"serverGrowth\":45}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"5.1.7.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":1044}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":1045}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":1046}}],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":344581645700,\"moneyMax\":344581645700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1010,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"62.1.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":978}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":979}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":980}}],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":15737603137,\"moneyMax\":393440078425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1138,\"serverGrowth\":92}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"54.2.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":996}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":997}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":998}}],\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":21831574079,\"moneyMax\":545789351975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1095,\"serverGrowth\":95}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"55.7.3.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":972}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":973}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":974}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1452166509,\"moneyMax\":36304162725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1122,\"serverGrowth\":98}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"90.0.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1008}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1009}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1010}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1415,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"94.3.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":1038}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":1039}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":1040}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":29.163999999999938,\"minDifficulty\":28,\"moneyAvailable\":288,\"moneyMax\":28402802500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":888,\"serverGrowth\":80}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"8.3.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":894}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":895}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":896}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":30.35599999999991,\"minDifficulty\":29,\"moneyAvailable\":341,\"moneyMax\":22213004525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":948,\"serverGrowth\":61}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"1.2.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":936}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":937}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":938}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":5882.516902958211,\"moneyMax\":20461161375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":894,\"serverGrowth\":51}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"36.9.9.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":990}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":991}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":992}}],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":16397997850,\"moneyMax\":16397997850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":72}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"35.5.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":954}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":955}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":956}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":81.7829421046199,\"moneyMax\":19174918450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":75}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"94.0.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":882}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":883}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":884}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":32,\"minDifficulty\":32,\"moneyAvailable\":24882656600,\"moneyMax\":24882656600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":903,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"25.2.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":900}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":901}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":902}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":29.475999999999733,\"minDifficulty\":28,\"moneyAvailable\":190,\"moneyMax\":29948262400,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":859,\"serverGrowth\":90}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"69.2.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":966}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":967}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":968}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":27.60999999999964,\"minDifficulty\":26,\"moneyAvailable\":231,\"moneyMax\":22155974175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":80}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"68.6.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":918}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":919}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":920}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":25.777624999999997,\"minDifficulty\":24,\"moneyAvailable\":9249506845,\"moneyMax\":15429407375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":871,\"serverGrowth\":79}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"69.5.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":912}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":913}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":914}}],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":4809474.423045924,\"moneyMax\":21932155275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":889,\"serverGrowth\":77}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"32.9.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":786}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":787}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":788}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":20.728,\"minDifficulty\":19,\"moneyAvailable\":3051.5589661729537,\"moneyMax\":20523818250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":70}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"79.7.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":798}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":799}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":800}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":7407345.331440754,\"moneyMax\":26734652375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":922,\"serverGrowth\":56}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"9.8.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":876}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":877}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":878}}],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":6230011.05854366,\"moneyMax\":24540340600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":915,\"serverGrowth\":69}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"73.5.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":942}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":943}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":944}}],\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":23636045875,\"moneyMax\":23636045875,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":806,\"serverGrowth\":70}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"18.1.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1032}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1033}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1034}}],\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":480.62776329979533,\"moneyMax\":18186874650,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":809,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"44.1.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":930}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":931}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":932}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":327454.04050152097,\"moneyMax\":20271216350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":761,\"serverGrowth\":77}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"99.1.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":888}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":889}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":890}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":29.51799999999968,\"minDifficulty\":28,\"moneyAvailable\":270,\"moneyMax\":38934398850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":827,\"serverGrowth\":51}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"36.9.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1110}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1111}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1112}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":100,\"minDifficulty\":25,\"moneyAvailable\":4275221515.763133,\"moneyMax\":42380427850,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":836,\"serverGrowth\":82}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"0.8.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":960}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":961}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":962}}],\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":100,\"minDifficulty\":26,\"moneyAvailable\":30179628325,\"moneyMax\":30179628325,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":782,\"serverGrowth\":85}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"11.4.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":906}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":907}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":908}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":29.355999999999792,\"minDifficulty\":28,\"moneyAvailable\":320,\"moneyMax\":34416542400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"98.5.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":924}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":925}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":926}}],\"serversOnNetwork\":[\"snap-fitness\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25.03200000000001,\"minDifficulty\":25,\"moneyAvailable\":26381842450,\"moneyMax\":26381842450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":782,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"8.9.1.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":780}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":781}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":782}}],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":24.002,\"minDifficulty\":24,\"moneyAvailable\":280.89123697336413,\"moneyMax\":18040596625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":728,\"serverGrowth\":62}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"36.9.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1104}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1105}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1106}}],\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":20.412750000000003,\"minDifficulty\":18,\"moneyAvailable\":15912107625,\"moneyMax\":15912107625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":517,\"serverGrowth\":58}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"49.6.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":792}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":793}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":794}}],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":26.306375000000003,\"minDifficulty\":23,\"moneyAvailable\":16077417353.419209,\"moneyMax\":17162818625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":537,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"81.8.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":858}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":859}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":860}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":3990639483,\"moneyMax\":6693730425,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":433,\"serverGrowth\":42}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"30.0.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":846}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":847}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":848}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":5623232125,\"moneyMax\":5623232125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":406,\"serverGrowth\":44}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"39.5.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":834}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":835}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":836}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":2133326537.979024,\"moneyMax\":20928192300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":731,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"32.7.4.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1092}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1093}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1094}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":27.972000000000005,\"minDifficulty\":22,\"moneyAvailable\":7973050125,\"moneyMax\":7973050125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":425,\"serverGrowth\":54}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"29.9.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":1098}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":1099}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":1100}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":27.55,\"minDifficulty\":24,\"moneyAvailable\":12285175275,\"moneyMax\":12285175275,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":568,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"47.9.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":852}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":853}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":854}}],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":24.082,\"minDifficulty\":22,\"moneyAvailable\":6027592248,\"moneyMax\":10104248775,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":438,\"serverGrowth\":43}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"40.2.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":822}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":823}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":824}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":12,\"minDifficulty\":12,\"moneyAvailable\":602695191,\"moneyMax\":4768166325,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":293,\"serverGrowth\":53}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"57.5.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":762}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":763}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":764}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":21.778,\"minDifficulty\":19,\"moneyAvailable\":5812417725,\"moneyMax\":5812417725,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":380,\"serverGrowth\":61}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"78.4.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":828}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":829}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":830}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":26.530249999999995,\"minDifficulty\":24,\"moneyAvailable\":5976045208.429534,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":397,\"serverGrowth\":75}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"1.6.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":840}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":841}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":842}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":18.35,\"minDifficulty\":18,\"moneyAvailable\":223597926,\"moneyMax\":1863772050,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":276,\"serverGrowth\":39}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"16.5.8.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":714}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":715}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":716}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"71.8.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":720}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":721}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":722}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"32.1.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":732}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":733}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":734}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":19.408,\"minDifficulty\":3,\"moneyAvailable\":3984464.5272224043,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"27.3.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":738}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":739}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":740}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":34947156,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"8.3.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":810}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":811}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":812}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":478.66200736235055,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"75.5.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":726}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":727}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":728}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":9.491999999999999,\"minDifficulty\":7,\"moneyAvailable\":313978.4726145847,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"91.3.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":1080}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1081}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1082}}],\"serversOnNetwork\":[\"max-hardware\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"54.1.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":816}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":817}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":818}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.23,\"minDifficulty\":10,\"moneyAvailable\":275428064,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"59.1.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":744}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":745}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":746}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.301999999999999,\"minDifficulty\":5,\"moneyAvailable\":330223,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"7.7.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":804}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":805}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":806}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.3,\"minDifficulty\":5,\"moneyAvailable\":1779353,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"62.0.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":756}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":757}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":758}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.002,\"minDifficulty\":7,\"moneyAvailable\":1995.965155718848,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"71.9.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1074}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1075}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1076}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"47.8.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":1116}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1117}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1118}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":32,\"hackDifficulty\":11.002,\"minDifficulty\":11,\"moneyAvailable\":4397.689267752896,\"moneyMax\":1615592050,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":220,\"serverGrowth\":35}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"8.4.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1086}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1087}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1088}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":1172742525,\"moneyMax\":1172742525,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":239,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"16.5.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1122}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1123}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1124}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":79.60157726354419,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"65.4.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":864}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":865}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":866}}],\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":20.634,\"minDifficulty\":16,\"moneyAvailable\":6250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":500,\"serverGrowth\":34}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"11.2.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1020}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1021}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1022}}],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":21.364,\"minDifficulty\":19,\"moneyAvailable\":22500000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":958,\"serverGrowth\":57}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"44.1.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":870}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":871}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":872}}],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":17.067499999999995,\"minDifficulty\":15,\"moneyAvailable\":6739688572,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":775,\"serverGrowth\":44}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"9.6.8.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":948}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":949}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":950}}],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":549,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"23.9.0.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":774}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":775}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":776}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":343,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"23.2.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":768}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":769}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":770}}],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":212,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"16.8.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":1014}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1015}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1016}}],\"serversOnNetwork\":[\"helios\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":509,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"81.6.9.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":750}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":751}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":752}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"92.4.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1062}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1063}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1064}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"76.4.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"23.3.8.8\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":1128}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":1129}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":1130}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-0\",\"httpPortOpen\":false,\"ip\":\"18.9.3.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///cdc429c3-9503-41d4-809b-4d22f406b730\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///cdc429c3-9503-41d4-809b-4d22f406b730\"}],\"ramUsage\":7.75,\"server\":\"blank-0\",\"moduleSequenceNumber\":1137}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-0\",\"moduleSequenceNumber\":1134}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-0\",\"moduleSequenceNumber\":1135}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-0\",\"moduleSequenceNumber\":1136}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-1\",\"httpPortOpen\":false,\"ip\":\"6.8.3.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///1ece3761-7352-4615-ae49-2818b963d553\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///1ece3761-7352-4615-ae49-2818b963d553\"}],\"ramUsage\":7.75,\"server\":\"blank-1\",\"moduleSequenceNumber\":1144}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-1\",\"moduleSequenceNumber\":1141}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-1\",\"moduleSequenceNumber\":1142}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-1\",\"moduleSequenceNumber\":1143}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-2\",\"httpPortOpen\":false,\"ip\":\"97.0.5.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///ca6c612a-33e6-4f00-bc8b-abe58d877cb2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///ca6c612a-33e6-4f00-bc8b-abe58d877cb2\"}],\"ramUsage\":7.75,\"server\":\"blank-2\",\"moduleSequenceNumber\":1151}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-2\",\"moduleSequenceNumber\":1148}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-2\",\"moduleSequenceNumber\":1149}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-2\",\"moduleSequenceNumber\":1150}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-3\",\"httpPortOpen\":false,\"ip\":\"42.2.3.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///02d55c76-5179-4a44-8412-17afbef7150a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///02d55c76-5179-4a44-8412-17afbef7150a\"}],\"ramUsage\":7.75,\"server\":\"blank-3\",\"moduleSequenceNumber\":1158}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-3\",\"moduleSequenceNumber\":1155}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-3\",\"moduleSequenceNumber\":1156}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-3\",\"moduleSequenceNumber\":1157}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-4\",\"httpPortOpen\":false,\"ip\":\"57.8.7.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///e444be78-7287-427c-8261-208b62976479\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///e444be78-7287-427c-8261-208b62976479\"}],\"ramUsage\":7.75,\"server\":\"blank-4\",\"moduleSequenceNumber\":1165}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-4\",\"moduleSequenceNumber\":1162}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-4\",\"moduleSequenceNumber\":1163}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-4\",\"moduleSequenceNumber\":1164}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-5\",\"httpPortOpen\":false,\"ip\":\"72.4.7.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///24601dd9-d74b-4c25-97a8-1b882643da54\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///24601dd9-d74b-4c25-97a8-1b882643da54\"}],\"ramUsage\":7.75,\"server\":\"blank-5\",\"moduleSequenceNumber\":1172}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-5\",\"moduleSequenceNumber\":1169}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-5\",\"moduleSequenceNumber\":1170}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-5\",\"moduleSequenceNumber\":1171}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-6\",\"httpPortOpen\":false,\"ip\":\"51.3.0.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///54c14acb-40c1-4772-9aaa-98b2a41aa6a4\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///54c14acb-40c1-4772-9aaa-98b2a41aa6a4\"}],\"ramUsage\":7.75,\"server\":\"blank-6\",\"moduleSequenceNumber\":1179}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-6\",\"moduleSequenceNumber\":1176}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-6\",\"moduleSequenceNumber\":1177}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-6\",\"moduleSequenceNumber\":1178}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-7\",\"httpPortOpen\":false,\"ip\":\"21.0.7.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///055da5ca-ba92-49d6-b243-d6d94b20d670\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///055da5ca-ba92-49d6-b243-d6d94b20d670\"}],\"ramUsage\":7.75,\"server\":\"blank-7\",\"moduleSequenceNumber\":1186}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-7\",\"moduleSequenceNumber\":1183}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-7\",\"moduleSequenceNumber\":1184}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-7\",\"moduleSequenceNumber\":1185}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-8\",\"httpPortOpen\":false,\"ip\":\"91.3.0.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c5df4ac6-a4a8-4861-b50d-6ed9d3667fd6\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c5df4ac6-a4a8-4861-b50d-6ed9d3667fd6\"}],\"ramUsage\":7.75,\"server\":\"blank-8\",\"moduleSequenceNumber\":1193}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-8\",\"moduleSequenceNumber\":1190}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-8\",\"moduleSequenceNumber\":1191}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-8\",\"moduleSequenceNumber\":1192}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-9\",\"httpPortOpen\":false,\"ip\":\"5.3.3.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///976a69c6-ad99-4fe5-88d4-1e3efad849b4\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///976a69c6-ad99-4fe5-88d4-1e3efad849b4\"}],\"ramUsage\":7.75,\"server\":\"blank-9\",\"moduleSequenceNumber\":1200}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-9\",\"moduleSequenceNumber\":1197}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-9\",\"moduleSequenceNumber\":1198}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-9\",\"moduleSequenceNumber\":1199}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-10\",\"httpPortOpen\":false,\"ip\":\"43.8.4.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///991b3ac1-ca79-4373-a40a-fd44c6544319\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///991b3ac1-ca79-4373-a40a-fd44c6544319\"}],\"ramUsage\":7.75,\"server\":\"blank-10\",\"moduleSequenceNumber\":1207}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-10\",\"moduleSequenceNumber\":1204}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-10\",\"moduleSequenceNumber\":1205}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-10\",\"moduleSequenceNumber\":1206}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-11\",\"httpPortOpen\":false,\"ip\":\"3.9.1.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///f471b598-8a59-4cf5-9cb0-3dbcf7efda52\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///f471b598-8a59-4cf5-9cb0-3dbcf7efda52\"}],\"ramUsage\":7.75,\"server\":\"blank-11\",\"moduleSequenceNumber\":1214}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-11\",\"moduleSequenceNumber\":1211}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-11\",\"moduleSequenceNumber\":1212}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-11\",\"moduleSequenceNumber\":1213}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-12\",\"httpPortOpen\":false,\"ip\":\"67.9.6.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///3e5f89a8-8f81-489d-8b37-f59d056185d9\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///3e5f89a8-8f81-489d-8b37-f59d056185d9\"}],\"ramUsage\":7.75,\"server\":\"blank-12\",\"moduleSequenceNumber\":1221}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-12\",\"moduleSequenceNumber\":1218}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-12\",\"moduleSequenceNumber\":1219}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-12\",\"moduleSequenceNumber\":1220}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-13\",\"httpPortOpen\":false,\"ip\":\"15.0.7.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///40754cd9-3a0e-4df2-901f-e98c423c36de\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///40754cd9-3a0e-4df2-901f-e98c423c36de\"}],\"ramUsage\":7.75,\"server\":\"blank-13\",\"moduleSequenceNumber\":1228}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-13\",\"moduleSequenceNumber\":1225}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-13\",\"moduleSequenceNumber\":1226}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-13\",\"moduleSequenceNumber\":1227}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-14\",\"httpPortOpen\":false,\"ip\":\"93.4.1.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c0eac615-35cc-4a45-9497-e18c03af3598\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c0eac615-35cc-4a45-9497-e18c03af3598\"}],\"ramUsage\":7.75,\"server\":\"blank-14\",\"moduleSequenceNumber\":1235}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-14\",\"moduleSequenceNumber\":1232}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-14\",\"moduleSequenceNumber\":1233}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-14\",\"moduleSequenceNumber\":1234}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-15\",\"httpPortOpen\":false,\"ip\":\"23.8.8.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c7135767-afaa-4012-9336-a65e2e8f1c09\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c7135767-afaa-4012-9336-a65e2e8f1c09\"}],\"ramUsage\":7.75,\"server\":\"blank-15\",\"moduleSequenceNumber\":1242}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-15\",\"moduleSequenceNumber\":1239}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-15\",\"moduleSequenceNumber\":1240}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-15\",\"moduleSequenceNumber\":1241}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-16\",\"httpPortOpen\":false,\"ip\":\"2.7.2.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///17f82657-0427-474c-aa11-b56483842815\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///17f82657-0427-474c-aa11-b56483842815\"}],\"ramUsage\":7.75,\"server\":\"blank-16\",\"moduleSequenceNumber\":1249}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-16\",\"moduleSequenceNumber\":1246}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-16\",\"moduleSequenceNumber\":1247}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-16\",\"moduleSequenceNumber\":1248}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-17\",\"httpPortOpen\":false,\"ip\":\"46.3.0.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///74f304ac-2043-4f72-9d42-95827f243604\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///74f304ac-2043-4f72-9d42-95827f243604\"}],\"ramUsage\":7.75,\"server\":\"blank-17\",\"moduleSequenceNumber\":1256}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-17\",\"moduleSequenceNumber\":1253}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-17\",\"moduleSequenceNumber\":1254}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-17\",\"moduleSequenceNumber\":1255}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-18\",\"httpPortOpen\":false,\"ip\":\"80.7.9.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///9601be79-51ec-42f7-9f24-e03607841116\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///9601be79-51ec-42f7-9f24-e03607841116\"}],\"ramUsage\":7.75,\"server\":\"blank-18\",\"moduleSequenceNumber\":1263}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-18\",\"moduleSequenceNumber\":1260}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-18\",\"moduleSequenceNumber\":1261}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-18\",\"moduleSequenceNumber\":1262}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-19\",\"httpPortOpen\":false,\"ip\":\"30.5.8.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///2586f206-757a-4cf8-b68d-bd1b0ccc1b10\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///2586f206-757a-4cf8-b68d-bd1b0ccc1b10\"}],\"ramUsage\":7.75,\"server\":\"blank-19\",\"moduleSequenceNumber\":1270}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-19\",\"moduleSequenceNumber\":1267}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-19\",\"moduleSequenceNumber\":1268}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-19\",\"moduleSequenceNumber\":1269}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-20\",\"httpPortOpen\":false,\"ip\":\"22.0.0.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///97a3c12e-f765-40ad-b4ce-a376bd3ba0e0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///97a3c12e-f765-40ad-b4ce-a376bd3ba0e0\"}],\"ramUsage\":7.75,\"server\":\"blank-20\",\"moduleSequenceNumber\":1277}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-20\",\"moduleSequenceNumber\":1274}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-20\",\"moduleSequenceNumber\":1275}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-20\",\"moduleSequenceNumber\":1276}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-21\",\"httpPortOpen\":false,\"ip\":\"63.5.6.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///0dc2b234-ba9d-4dfa-922b-1b33eed6f22f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///0dc2b234-ba9d-4dfa-922b-1b33eed6f22f\"}],\"ramUsage\":7.75,\"server\":\"blank-21\",\"moduleSequenceNumber\":1284}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-21\",\"moduleSequenceNumber\":1281}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-21\",\"moduleSequenceNumber\":1282}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-21\",\"moduleSequenceNumber\":1283}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-22\",\"httpPortOpen\":false,\"ip\":\"56.6.2.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///6aef6e41-4b75-496e-b7ed-8dbdef2b8ea2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///6aef6e41-4b75-496e-b7ed-8dbdef2b8ea2\"}],\"ramUsage\":7.75,\"server\":\"blank-22\",\"moduleSequenceNumber\":1291}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-22\",\"moduleSequenceNumber\":1288}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-22\",\"moduleSequenceNumber\":1289}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-22\",\"moduleSequenceNumber\":1290}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-23\",\"httpPortOpen\":false,\"ip\":\"83.2.8.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///2a5c0774-5e4c-48fc-9a29-d7efbc1eec45\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///2a5c0774-5e4c-48fc-9a29-d7efbc1eec45\"}],\"ramUsage\":7.75,\"server\":\"blank-23\",\"moduleSequenceNumber\":1298}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-23\",\"moduleSequenceNumber\":1295}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-23\",\"moduleSequenceNumber\":1296}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-23\",\"moduleSequenceNumber\":1297}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-24\",\"httpPortOpen\":false,\"ip\":\"96.7.1.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 1000) {\\r\\n        sleepTime = 1000;\\r\\n    }\\r\\n\\r\\n    // H -50  | G 100 | W 200  ->  2min (G befor W)\\r\\n    // H -100 | G 50  | W 200  ->\\r\\n    let offset = sleepTime / 10;\\r\\n    let gOffset = offset * 1.5;\\r\\n    let hOffset = offset * 3;\\r\\n\\r\\n    let globalOffset = offset * 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n\\r\\n    let lastTime = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('  FAILED SINCE SEC IS TO HIGH, at: ' + ns.getTimeSinceLastAug());\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = globalOffset;\\r\\n        let gSleep = wTime - gTime - gOffset + globalOffset;\\r\\n        let hSleep = wTime - hTime - hOffset + globalOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            totalRunCount++;\\r\\n        }\\r\\n\\r\\n        let time = ns.getTimeSinceLastAug();\\r\\n        let speedUp = 0;\\r\\n        if (lastTime != 0) {\\r\\n            speedUp = time - lastTime - sleepTime;\\r\\n            speedUp = Math.max(speedUp, 0);\\r\\n        }\\r\\n        await ns.sleep(sleepTime - speedUp);\\r\\n        lastTime = time;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///ea9dbe7a-58b6-4106-a4a1-549d0dcd172c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///ea9dbe7a-58b6-4106-a4a1-549d0dcd172c\"}],\"ramUsage\":7.75,\"server\":\"blank-24\",\"moduleSequenceNumber\":1305}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-24\",\"moduleSequenceNumber\":1302}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-24\",\"moduleSequenceNumber\":1303}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[1]) {\\r\\n        await ns.sleep(ns.args[1]);\\r\\n    }\\r\\n    await ns.weaken(ns.args[0]);\\r\\n}\\r\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blank-24\",\"moduleSequenceNumber\":1304}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":608732.5173165044,\"favor\":102,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"KuaiGong International\",\"playerReputation\":8063.916589926273}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":24.6145,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1111828.2492534406}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":114.4522,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":519735.21077263274}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":147.479,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":601430.2661338318}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":32.1556,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":98.6877,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":46.0861,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":34.0817,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":126.3819,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Volhaven\",\"playerReputation\":73707.09266576226}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":11.3769,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":7341.1752870602895}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":40.3791,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":23028.98228740747}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":88.4779,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":463503.3752708679}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":115.1676,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":547107.895485023}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":128.725,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":545652.570156857}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"sync\":\"run syncScripts.js\",\"do\":\"run handler.js\",\"start\":\"run gameManager.js\",\"reSync\":\"run syncScripts.js restart\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":105277.17147149268,\"lastPrice\":104886.01298705988,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":false,\"otlkMag\":15.910900054297542,\"otlkMagForecast\":27.720835664907653,\"cap\":672134647,\"spreadPerc\":0.1,\"shareTxForMovement\":60392,\"shareTxUntilMovement\":24082,\"totalShares\":88200000,\"maxShares\":17600000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":74946.20938368206,\"lastPrice\":75206.6543871556,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":false,\"otlkMag\":13.084455023274982,\"otlkMagForecast\":35.309788595154664,\"cap\":769306758,\"spreadPerc\":0.1,\"shareTxForMovement\":49502,\"shareTxUntilMovement\":14770,\"totalShares\":73000000,\"maxShares\":14600000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":41277.03163756164,\"lastPrice\":41525.43033164181,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":13.030779215050044,\"otlkMagForecast\":32.59328073483197,\"cap\":343694566,\"spreadPerc\":0.4,\"shareTxForMovement\":85135,\"shareTxUntilMovement\":12035,\"totalShares\":77900000,\"maxShares\":15600000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":83976.58241139099,\"lastPrice\":84439.23399618072,\"playerShares\":14300000,\"playerAvgPx\":79738.24617944034,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":9.209433698328862,\"otlkMagForecast\":66.59856628463231,\"cap\":169064072,\"spreadPerc\":0.2,\"shareTxForMovement\":83964,\"shareTxUntilMovement\":77132,\"totalShares\":71400000,\"maxShares\":14300000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":33308.42741922985,\"lastPrice\":33489.11013275467,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":8.602470453575757,\"otlkMagForecast\":62.197370014468355,\"cap\":917994383,\"spreadPerc\":0.4,\"shareTxForMovement\":44814,\"shareTxUntilMovement\":37840,\"totalShares\":42400000,\"maxShares\":8500000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":19861643.854983017,\"lastPrice\":19678175.981760096,\"playerShares\":1238685,\"playerAvgPx\":19544048.929324552,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.1,\"b\":true,\"otlkMag\":11.837969677887976,\"otlkMagForecast\":65.54109055351728,\"cap\":1132715580,\"spreadPerc\":0.9,\"shareTxForMovement\":74381,\"shareTxUntilMovement\":32355,\"totalShares\":39100000,\"maxShares\":7800000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":205058.78026391627,\"lastPrice\":206397.07446531506,\"playerShares\":16900000,\"playerAvgPx\":177394.66982873555,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":9.017348857713436,\"otlkMagForecast\":65.88644723299457,\"cap\":358919068,\"spreadPerc\":0.6,\"shareTxForMovement\":85019,\"shareTxUntilMovement\":64933,\"totalShares\":84600000,\"maxShares\":16900000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":1005508.1010653933,\"lastPrice\":1016076.0269885319,\"playerShares\":12600000,\"playerAvgPx\":170451.25639026146,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":true,\"otlkMag\":21.9926187958178,\"otlkMagForecast\":69.86461567269234,\"cap\":53448832,\"spreadPerc\":1,\"shareTxForMovement\":55622,\"shareTxUntilMovement\":31550,\"totalShares\":63000000,\"maxShares\":12600000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":10617.558860275956,\"lastPrice\":10542.499411138222,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":false,\"otlkMag\":6.868780356169406,\"otlkMagForecast\":45.45986836884299,\"cap\":359341508,\"spreadPerc\":0.7,\"shareTxForMovement\":85395,\"shareTxUntilMovement\":85395,\"totalShares\":54000000,\"maxShares\":10800000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":11733.379598679376,\"lastPrice\":11672.042806059088,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":6.052225683339795,\"otlkMagForecast\":55.296916611495405,\"cap\":204391767,\"spreadPerc\":0.3,\"shareTxForMovement\":66427,\"shareTxUntilMovement\":66427,\"totalShares\":100800000,\"maxShares\":20200000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":24549.996781523205,\"lastPrice\":24668.60336513353,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":8.304863007341291,\"otlkMagForecast\":40.66550537484929,\"cap\":172400802,\"spreadPerc\":0.4,\"shareTxForMovement\":75159,\"shareTxUntilMovement\":75159,\"totalShares\":54700000,\"maxShares\":10900000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":7697.216441531953,\"lastPrice\":7646.019385642671,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":5.41216025054615,\"otlkMagForecast\":45.65729999713048,\"cap\":227503628,\"spreadPerc\":0.7,\"shareTxForMovement\":86198,\"shareTxUntilMovement\":86198,\"totalShares\":78900000,\"maxShares\":15800000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":13723.683358237284,\"lastPrice\":13645.039248013865,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":6.381421560653964,\"otlkMagForecast\":55.23301160641414,\"cap\":251657590,\"spreadPerc\":0.7,\"shareTxForMovement\":99336,\"shareTxUntilMovement\":99336,\"totalShares\":43600000,\"maxShares\":8700000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":25208.728301656043,\"lastPrice\":25336.927316898647,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":9.307591535913016,\"otlkMagForecast\":40.36828667506015,\"cap\":443242679,\"spreadPerc\":0.4,\"shareTxForMovement\":72176,\"shareTxUntilMovement\":68796,\"totalShares\":32400000,\"maxShares\":6500000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":57084.03851428894,\"lastPrice\":56814.37093866907,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":6.233449158981215,\"otlkMagForecast\":44.91739048821616,\"cap\":145559565,\"spreadPerc\":1,\"shareTxForMovement\":46669,\"shareTxUntilMovement\":46669,\"totalShares\":53300000,\"maxShares\":10700000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":7990.166347351739,\"lastPrice\":7942.370409529677,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":5.216146837126475,\"otlkMagForecast\":54.4284536993842,\"cap\":221333583,\"spreadPerc\":0.8,\"shareTxForMovement\":89240,\"shareTxUntilMovement\":89240,\"totalShares\":42400000,\"maxShares\":8500000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":6432.655945300898,\"lastPrice\":6389.332005467713,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":5.504290722318419,\"otlkMagForecast\":54.79667411554766,\"cap\":297703436,\"spreadPerc\":0.9,\"shareTxForMovement\":69252,\"shareTxUntilMovement\":69252,\"totalShares\":45600000,\"maxShares\":9100000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":25110.505533437943,\"lastPrice\":24981.345496038757,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":15.798368781612858,\"otlkMagForecast\":34.99519705645349,\"cap\":435357768,\"spreadPerc\":0.4,\"shareTxForMovement\":107739,\"shareTxUntilMovement\":52620,\"totalShares\":29700000,\"maxShares\":5900000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":30387.659966373143,\"lastPrice\":30205.885689947456,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":4.9947381441767265,\"otlkMagForecast\":45.14159680719761,\"cap\":408149618,\"spreadPerc\":0.9,\"shareTxForMovement\":43789,\"shareTxUntilMovement\":43789,\"totalShares\":22500000,\"maxShares\":4500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":873.4717554163004,\"lastPrice\":854.9924783995892,\"playerShares\":14100000,\"playerAvgPx\":887.9361660137059,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.55,\"b\":true,\"otlkMag\":7.7849538763375365,\"otlkMagForecast\":58.08809328142341,\"cap\":145054778,\"spreadPerc\":0.6,\"shareTxForMovement\":37616,\"shareTxUntilMovement\":6090,\"totalShares\":70500000,\"maxShares\":14100000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":11957.50561610224,\"lastPrice\":12074.057939458813,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.15,\"b\":true,\"otlkMag\":8.715821100021305,\"otlkMagForecast\":58.52129283726263,\"cap\":125770467,\"spreadPerc\":0.8,\"shareTxForMovement\":66618,\"shareTxUntilMovement\":66618,\"totalShares\":56400000,\"maxShares\":11300000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":9969.89348759953,\"lastPrice\":9914.431649349697,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":6.35467372703425,\"otlkMagForecast\":55.80829194421245,\"cap\":52314262,\"spreadPerc\":0.8,\"shareTxForMovement\":92419,\"shareTxUntilMovement\":92419,\"totalShares\":29700000,\"maxShares\":5900000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":1344.6987696484941,\"lastPrice\":1324.7128447565435,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.78,\"b\":true,\"otlkMag\":5.412297520319211,\"otlkMagForecast\":52.948932293233554,\"cap\":73865209,\"spreadPerc\":1.5,\"shareTxForMovement\":73277,\"shareTxUntilMovement\":73277,\"totalShares\":30100000,\"maxShares\":6000000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":6671.127511676888,\"lastPrice\":6758.7697461010985,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.55,\"b\":false,\"otlkMag\":7.051074054050433,\"otlkMagForecast\":41.89335016516994,\"cap\":80921893,\"spreadPerc\":0.6,\"shareTxForMovement\":78125,\"shareTxUntilMovement\":69510,\"totalShares\":47600000,\"maxShares\":9500000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1238.5280088287545,\"lastPrice\":1230.1865222962115,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":5.137827100121294,\"otlkMagForecast\":53.1176822499613,\"cap\":84275733,\"spreadPerc\":0.5,\"shareTxForMovement\":103650,\"shareTxUntilMovement\":103650,\"totalShares\":54200000,\"maxShares\":10800000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":0.05430847201952895,\"lastPrice\":0.053203655751597495,\"playerShares\":4400000,\"playerAvgPx\":0.007267838628907292,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.45,\"b\":true,\"otlkMag\":40.64904393831175,\"otlkMagForecast\":94.88308547633665,\"cap\":15272652,\"spreadPerc\":1.4,\"shareTxForMovement\":31329,\"shareTxUntilMovement\":4997,\"totalShares\":22200000,\"maxShares\":4400000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":682.9838690281118,\"lastPrice\":677.2436633814895,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":true,\"otlkMag\":7.791137051209107,\"otlkMagForecast\":56.91651772092696,\"cap\":20300455,\"spreadPerc\":1.3,\"shareTxForMovement\":54307,\"shareTxUntilMovement\":54307,\"totalShares\":51100000,\"maxShares\":10200000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":854.012147289298,\"lastPrice\":848.8320636280536,\"playerShares\":6700000,\"playerAvgPx\":839.219373661253,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":9.747208248715669,\"otlkMagForecast\":58.808184715325275,\"cap\":27061871,\"spreadPerc\":0.7,\"shareTxForMovement\":133317,\"shareTxUntilMovement\":99747,\"totalShares\":33500000,\"maxShares\":6700000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":7784.648181306349,\"lastPrice\":7865.145482814509,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":false,\"otlkMag\":14.628205380739871,\"otlkMagForecast\":32.41186102224013,\"cap\":51002286,\"spreadPerc\":1.2,\"shareTxForMovement\":67563,\"shareTxUntilMovement\":59005,\"totalShares\":11300000,\"maxShares\":2300000}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":48507.20289660282,\"lastPrice\":49576.16444037653,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.6,\"b\":false,\"otlkMag\":7.942576622295682,\"otlkMagForecast\":41.77185953802643,\"cap\":10924522,\"spreadPerc\":0.7,\"shareTxForMovement\":32538,\"shareTxUntilMovement\":32538,\"totalShares\":34700000,\"maxShares\":6900000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":5529.388743139531,\"lastPrice\":5595.470067461473,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.41,\"b\":false,\"otlkMag\":7.0137434108489956,\"otlkMagForecast\":43.58454937525813,\"cap\":8556124,\"spreadPerc\":1.1,\"shareTxForMovement\":49894,\"shareTxUntilMovement\":49894,\"totalShares\":136600000,\"maxShares\":27300000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":110211.1587146859,\"lastPrice\":110865.050843689,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":5.492019481269901,\"otlkMagForecast\":56.099058170015525,\"cap\":726452909,\"spreadPerc\":0.7,\"shareTxForMovement\":144636,\"shareTxUntilMovement\":144636,\"totalShares\":12100000,\"maxShares\":2400000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":68037.0176542404,\"lastPrice\":68371.48657073283,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":12.11337791716909,\"otlkMagForecast\":37.78434753248229,\"cap\":203830816,\"spreadPerc\":0.3,\"shareTxForMovement\":132082,\"shareTxUntilMovement\":96662,\"totalShares\":21600000,\"maxShares\":4300000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":123520,\"lastUpdate\":1640271062964,\"ticksUntilCycle\":17}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":18,\"MonacoVim\":false,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"7","AllGangsSave":"","LastExportBonus":"1639930542672","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}