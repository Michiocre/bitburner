{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":1414,\"hp\":11,\"max_hp\":11,\"strength\":104,\"defense\":10,\"dexterity\":16,\"agility\":9,\"charisma\":90,\"intelligence\":0,\"hacking_chance_mult\":1.554815033680318,\"hacking_speed_mult\":1.5470498274039841,\"hacking_money_mult\":2.598033178265111,\"hacking_grow_mult\":1.5558948246886517,\"hacking_exp\":63647855657.086876,\"strength_exp\":2390.1905240038973,\"defense_exp\":83.13706170448354,\"dexterity_exp\":106.47212334199197,\"agility_exp\":92.58445507999303,\"charisma_exp\":2342.386713523589,\"intelligence_exp\":0,\"hacking_mult\":2.373049658051238,\"strength_mult\":1.8894786751018986,\"defense_mult\":1.807327428358338,\"dexterity_mult\":2.400582656716962,\"agility_mult\":1.50952915891293,\"charisma_mult\":1.6430249348712163,\"hacking_exp_mult\":4.386119121073361,\"strength_exp_mult\":1.8894786751018988,\"defense_exp_mult\":1.8894786751018988,\"dexterity_exp_mult\":2.1729004763671833,\"agility_exp_mult\":1.8894786751018988,\"charisma_exp_mult\":1.5745655625849158,\"company_rep_mult\":2.0784265426120885,\"faction_rep_mult\":1.5745655625849155,\"money\":822332692977733.6,\"city\":\"Aevum\",\"location\":\"KuaiGong International\",\"jobs\":{\"KuaiGong International\":\"Junior Software Engineer\"},\"companyName\":\"KuaiGong International\",\"currentServer\":\"home\",\"purchasedServers\":[\"blank-0\",\"blank-1\",\"blank-2\",\"blank-3\",\"blank-4\",\"blank-5\",\"blank-6\",\"blank-7\",\"blank-8\",\"blank-9\",\"blank-10\",\"blank-11\",\"blank-12\",\"blank-13\",\"blank-14\",\"blank-15\",\"blank-16\",\"blank-17\",\"blank-18\",\"blank-19\",\"blank-20\",\"blank-21\",\"blank-22\",\"blank-23\",\"blank-24\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":119644.79999938565,\"ram\":64,\"totalMoneyGenerated\":3389160700.540914,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":119644.79999938565,\"ram\":64,\"totalMoneyGenerated\":3386040705.9850664,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":119644.79999938565,\"ram\":64,\"totalMoneyGenerated\":3385564757.1406717,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":119644.79999938565,\"ram\":64,\"totalMoneyGenerated\":3385502594.2664123,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":119644.79999938565,\"ram\":64,\"totalMoneyGenerated\":3385404641.3592997,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":119644.79999938565,\"ram\":64,\"totalMoneyGenerated\":3384255607.322026,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":119644.79999938565,\"ram\":64,\"totalMoneyGenerated\":3384158359.707129,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":119644.79999938565,\"ram\":64,\"totalMoneyGenerated\":3384046301.458879,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":119644.79999938565,\"ram\":64,\"totalMoneyGenerated\":3383964876.7858114,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":119038.19999939488,\"ram\":64,\"totalMoneyGenerated\":3383465524.3607945,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":118137.599999408,\"ram\":64,\"totalMoneyGenerated\":3382521433.523503,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":118137.599999408,\"ram\":64,\"totalMoneyGenerated\":3382443534.5349965,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":118137.599999408,\"ram\":64,\"totalMoneyGenerated\":3382279133.4853125,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":118137.599999408,\"ram\":64,\"totalMoneyGenerated\":3381946930.321668,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":117731.19999941392,\"ram\":64,\"totalMoneyGenerated\":3381819554.4014826,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":117731.19999941392,\"ram\":64,\"totalMoneyGenerated\":3381635913.3627553,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":117597.5999994162,\"ram\":64,\"totalMoneyGenerated\":3380763687.471733,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":117536.99999941724,\"ram\":64,\"totalMoneyGenerated\":3379794492.1663775,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":117349.79999942044,\"ram\":64,\"totalMoneyGenerated\":3376096579.5747743,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":117197.99999942307,\"ram\":64,\"totalMoneyGenerated\":3372766648.497179,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":117096.39999942499,\"ram\":64,\"totalMoneyGenerated\":3370259328.8517957,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":116893.99999942668,\"ram\":64,\"totalMoneyGenerated\":3365264432.2354026,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":116589.99999943165,\"ram\":64,\"totalMoneyGenerated\":3356789340.8531356,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":116387.79999943543,\"ram\":64,\"totalMoneyGenerated\":3350967719.747373,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":116184.59999943926,\"ram\":64,\"totalMoneyGenerated\":3345117307.241483,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":115577.59999944986,\"ram\":64,\"totalMoneyGenerated\":3327640927.364149,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":114823.99999946084,\"ram\":64,\"totalMoneyGenerated\":3305943728.228132,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":111805.59999950575,\"ram\":64,\"totalMoneyGenerated\":3219039766.083655,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":107466.59999957102,\"ram\":64,\"totalMoneyGenerated\":3094113880.930806,\"name\":\"hacknet-node-28\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":106556.59999958696,\"ram\":64,\"totalMoneyGenerated\":3067913706.8148675,\"name\":\"hacknet-node-29\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":98239.99999959207,\"ram\":64,\"totalMoneyGenerated\":2828467148.51528,\"name\":\"hacknet-node-30\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":96016.79999958418,\"ram\":64,\"totalMoneyGenerated\":2764458107.75202,\"name\":\"hacknet-node-31\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":92581.39999957153,\"ram\":64,\"totalMoneyGenerated\":2665548131.754327,\"name\":\"hacknet-node-32\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":87804.19999955491,\"ram\":64,\"totalMoneyGenerated\":2528005855.0656366,\"name\":\"hacknet-node-33\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":71558.59999953203,\"ram\":64,\"totalMoneyGenerated\":2060272285.1560493,\"name\":\"hacknet-node-34\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":71558.59999953203,\"ram\":64,\"totalMoneyGenerated\":2060272285.1560493,\"name\":\"hacknet-node-35\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":71558.59999953203,\"ram\":64,\"totalMoneyGenerated\":2060272285.1560493,\"name\":\"hacknet-node-36\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":71370.19999953202,\"ram\":64,\"totalMoneyGenerated\":2054847985.3720522,\"name\":\"hacknet-node-37\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":71004.99999953592,\"ram\":64,\"totalMoneyGenerated\":2044333366.0455358,\"name\":\"hacknet-node-38\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":34423.40000003912,\"ram\":64,\"totalMoneyGenerated\":991097883.1456335,\"name\":\"hacknet-node-39\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":28391.00000004715,\"ram\":64,\"totalMoneyGenerated\":817416641.0168982,\"name\":\"hacknet-node-40\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28791.40012737182,\"onlineTimeSeconds\":17900.600000021106,\"ram\":64,\"totalMoneyGenerated\":515383337.1202397,\"name\":\"hacknet-node-41\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"Volhaven\",\"Tian Di Hui\",\"CyberSec\",\"NiteSec\",\"BitRunners\",\"The Black Hand\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"}],\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":22,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"}],\"sourceFiles\":[],\"numPeopleKilled\":8,\"karma\":-24.35,\"crime_money_mult\":2.353290922341586,\"crime_success_mult\":1.5558948246886517,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Company\",\"workCostMult\":10,\"workExpMult\":5,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0.48247310331806975,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0.0692808847537363,\"workRepGainRate\":5.756961841433034,\"workMoneyGainRate\":240.9769904477784,\"workMoneyLossRate\":0,\"workHackExpGained\":15366.285867580757,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":2206.5268985212747,\"workRepGained\":182593.9399844716,\"workMoneyGained\":7662842.3803071175,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":6369800,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":1.3691874457260136,\"hacknet_node_money_mult\":3.139290090403675,\"hacknet_node_purchase_cost_mult\":0.6132474009973701,\"hacknet_node_ram_cost_mult\":0.8016305895390458,\"hacknet_node_core_cost_mult\":0.8016305895390458,\"hacknet_node_level_cost_mult\":0.6813860011081889,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1640233199301,\"totalPlaytime\":448274200,\"playtimeSinceLastAug\":119936000,\"playtimeSinceLastBitnode\":448274200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-293040,\"codingcontract\":1275000000,\"corporation\":0,\"crime\":967202.5690823919,\"gang\":0,\"hacking\":944785519848832.6,\"hacknet\":123847057447.2508,\"hacknet_expenses\":-120082197908648.75,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":114358907295.9036,\"total\":822332691977733.6,\"work\":7857771.680092383,\"servers\":-2538961031782.8228,\"other\":-5315100000,\"augmentations\":-65843183400}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-52000,\"class\":-504048,\"codingcontract\":3637500000,\"corporation\":0,\"crime\":2672166.5024009263,\"gang\":0,\"hacking\":949818038368997.9,\"hacknet\":206144387053.70413,\"hacknet_expenses\":-120571253105943.08,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":83158907295.9036,\"total\":823037586669156.1,\"work\":21777047.037783988,\"servers\":-3526082026060.1147,\"other\":-16313799869.020864,\"augmentations\":-2959767311384.005}},\"scriptProdSinceLastAug\":890724000321129.4,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":4,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"75.6.5.8\",\"isConnectedTo\":true,\"maxRam\":65536,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"Formulas.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n    let url = 'http://localhost:3030/';\\r\\n    let tempFile = 'temp_files.txt';\\r\\n    await ns.wget(url, tempFile);\\r\\n\\r\\n    let filesString = ns.read(tempFile);\\r\\n    let files = JSON.parse(filesString);\\r\\n\\r\\n    for (let file of files) {\\r\\n        if (ns.args[0]) {\\r\\n            if (file != 'syncScripts.js') {\\r\\n                ns.scriptKill(file, ns.getHostname());\\r\\n            }\\r\\n        }\\r\\n        let fileUrl = url + file;\\r\\n        if (file.includes('/')) {\\r\\n            file = '/' + file;\\r\\n        }\\r\\n\\r\\n        await ns.wget(fileUrl, file);\\r\\n    }\\r\\n\\r\\n    ns.rm(tempFile);\\r\\n\\r\\n    if (ns.args[0]) {\\r\\n        ns.run('gameManager.js');\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"syncScripts.js\",\"url\":\"blob:file:///66c82095-bd23-4563-bbcd-28c243bc6019\",\"module\":\"\",\"dependencies\":[{\"filename\":\"syncScripts.js\",\"url\":\"blob:file:///66c82095-bd23-4563-bbcd-28c243bc6019\"}],\"ramUsage\":4.65,\"server\":\"home\",\"moduleSequenceNumber\":34028}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerArray } from './scan.js';\\nimport { Server, numberSquish } from './lib.js';\\n\\n/** @type {import(\\\".\\\").NS} ns */\\nlet ns;\\n\\nlet hostName = '';\\nlet purchasedServers = [];\\n/** @type {Server[]} */\\nlet servers = [];\\nlet targets = [];\\n\\nlet serverBudget = 0.1;\\nlet hacknetBudget = 0.1;\\nlet portLevel = 0;\\n\\nlet zoomHackers = [];\\n\\nlet hackScript = 'workerHack.js';\\nlet growScript = 'workerGrow.js';\\nlet weakenScript = 'workerWeaken.js';\\n\\nexport async function main(_ns) {\\n    ns = _ns;\\n    ns.disableLog('ALL');\\n    ns.enableLog('exec');\\n    ns.clearPort(20);\\n\\n    hostName = ns.getHostname();\\n\\n    for (let server of await getServerArray(ns)) {\\n        servers.push(new Server(server));\\n    }\\n    purchasedServers = ns.getPurchasedServers();\\n\\n    ns.tprint('Setup complete, GameManager is running. (Use the handler.js function to interact with the running process.)');\\n    await nukeServers();\\n    await addTargets();\\n\\n    await initHacks();\\n\\n    let counter = 0;\\n\\n    //Main Loop\\n    while (true) {\\n        let command = '';\\n        if ((command = ns.readPort(20)) != 'NULL PORT DATA') {\\n            let parts = command.split(' ');\\n            switch (parts[0]) {\\n                case 'help':\\n                    ns.tprint('do help      | Provides a list of commands and their uses.');\\n                    ns.tprint('do contracts | Searches for contracts in the network and solves them.');\\n                    ns.tprint('do hacknet   | Buys and upgrades hacknet nodes.');\\n                    ns.tprint('do shutdown  | Stops the process.');\\n                    break;\\n                case 'contracts':\\n                    let contracts = await manageContracts();\\n                    if (contracts == 0) {\\n                        ns.tprint('CONTRACTS: No contracts found.');\\n                    }\\n                    break;\\n                case 'hacknet':\\n                    await manageHacknet();\\n                    break;\\n                case 'scan':\\n                    ns.exec('scan.js', hostName, 1, 'filter', ...servers.filter((s) => s.target).map((s) => s.name));\\n                    break;\\n                case 'shutdown':\\n                    ns.tprint('Shutting down...');\\n                    ns.exit();\\n                    break;\\n                default:\\n                    ns.tprintf('Recieved unkown command: %s', command);\\n                    break;\\n            }\\n        }\\n\\n        if (counter % 200 === 199) {\\n            await addTargets();\\n        }\\n\\n        if (counter % 1000 === 50) {\\n            await manageServers();\\n        }\\n\\n        if (counter % 1000 === 0) {\\n            await manageHacknet();\\n        }\\n\\n        if (counter % 10000 === 0) {\\n            await manageContracts();\\n        }\\n\\n        if (counter % 50 === 0) {\\n            await manageHacks();\\n        }\\n\\n        await ns.sleep(100);\\n        counter = (counter + 1) % 10000;\\n    }\\n}\\n\\nasync function manageServers() {\\n    let ramSteps = 16;\\n    let buyC = 0;\\n    let upgradeC = 0;\\n    purchasedServers = ns.getPurchasedServers();\\n\\n    for (let i = purchasedServers.length; i < ns.getPurchasedServerLimit(); i++) {\\n        if (ns.getServerMoneyAvailable(hostName) * serverBudget < ns.getPurchasedServerCost(ramSteps)) {\\n            break;\\n        }\\n\\n        purchasedServers.push(ns.purchaseServer('blank-' + i, ramSteps));\\n        buyC++;\\n    }\\n\\n    for (let i = 0; i < purchasedServers.length; i++) {\\n        let currentRam = ns.getServerMaxRam(purchasedServers[i]);\\n        if (currentRam * ramSteps > ns.getPurchasedServerMaxRam()) {\\n            continue;\\n        }\\n        if (ns.getServerMoneyAvailable(hostName) * serverBudget < ns.getPurchasedServerCost(currentRam * ramSteps)) {\\n            continue;\\n        }\\n\\n        ns.killall(purchasedServers[i]);\\n        ns.deleteServer(purchasedServers[i]);\\n        ns.purchaseServer(purchasedServers[i], currentRam * ramSteps);\\n        upgradeC++;\\n    }\\n\\n    if (buyC) {\\n        ns.tprintf('SERVER: Baught %i new Server(s).', buyC);\\n    }\\n    if (upgradeC) {\\n        ns.tprintf('SERVER: Upgraded %i Server(s) (x16).', upgradeC);\\n    }\\n}\\n\\nasync function manageHacknet() {\\n    let levelUpgradeStep = 20;\\n    let ramUpgradeStep = 1;\\n    let coreUpgradeStep = 2;\\n\\n    let buyC = 0;\\n    let upgradeC = 0;\\n\\n    for (let i = ns.hacknet.numNodes(); i < ns.hacknet.maxNumNodes(); i++) {\\n        if (ns.getServerMoneyAvailable(hostName) * hacknetBudget < ns.hacknet.getPurchaseNodeCost()) {\\n            break;\\n        }\\n\\n        ns.hacknet.purchaseNode();\\n        buyC++;\\n    }\\n\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n        let partialUpgrade = 0;\\n        while (ns.getServerMoneyAvailable(hostName) * hacknetBudget > ns.hacknet.getLevelUpgradeCost(i, levelUpgradeStep)) {\\n            ns.hacknet.upgradeLevel(i, levelUpgradeStep);\\n            partialUpgrade++;\\n        }\\n\\n        while (ns.getServerMoneyAvailable(hostName) * hacknetBudget > ns.hacknet.getRamUpgradeCost(i, ramUpgradeStep)) {\\n            ns.hacknet.upgradeRam(i, ramUpgradeStep);\\n            partialUpgrade++;\\n        }\\n\\n        while (ns.getServerMoneyAvailable(hostName) * hacknetBudget > ns.hacknet.getCoreUpgradeCost(i, coreUpgradeStep)) {\\n            ns.hacknet.upgradeCore(i, coreUpgradeStep);\\n            partialUpgrade++;\\n        }\\n\\n        if (partialUpgrade) {\\n            upgradeC++;\\n        }\\n    }\\n\\n    if (buyC) {\\n        ns.tprintf('HACKNET: Baught %i new Hacknode(s).', buyC);\\n    }\\n    if (upgradeC) {\\n        ns.tprintf('HACKNET: Upgraded %i Hacknode(s).', upgradeC);\\n    }\\n}\\n\\nasync function manageContracts() {\\n    let contracts = [];\\n    for (let server of servers) {\\n        for (let file of ns.ls(server.name, '.cct')) {\\n            contracts.push({ file: file, server: server.name });\\n        }\\n    }\\n\\n    if (contracts.length <= 0) {\\n        return 0;\\n    }\\n\\n    ns.tprintf('Found %i contracts, starting the solvers...', contracts.length);\\n\\n    let solved = 0;\\n\\n    for (let contract of contracts) {\\n        let contractType = ns.codingcontract.getContractType(contract.file, contract.server);\\n        let script = '';\\n        switch (contractType) {\\n            case 'Subarray with Maximum Sum':\\n                script = 'contract/subarrayWithMaximumSum.js';\\n                break;\\n            case 'Generate IP Addresses':\\n                script = 'contract/generateIPAddresses.js';\\n                break;\\n            case 'Find All Valid Math Expressions':\\n                script = 'contract/findAllValidMathExpressions.js';\\n                break;\\n            case 'Find Largest Prime Factor':\\n                script = 'contract/findLargestPrimeFactor.js';\\n                break;\\n            case 'Algorithmic Stock Trader I':\\n                script = 'contract/algorithmicStockTraderI.js';\\n                break;\\n            case 'Algorithmic Stock Trader II':\\n                script = 'contract/algorithmicStockTraderII.js';\\n                break;\\n            case 'Algorithmic Stock Trader III':\\n                script = 'contract/algorithmicStockTraderIII.js';\\n                break;\\n            case 'Algorithmic Stock Trader IV':\\n                script = 'contract/algorithmicStockTraderIV.js';\\n                break;\\n            case 'Total Ways to Sum':\\n                script = 'contract/totalWaysToSum.js';\\n                break;\\n            case 'Array Jumping Game':\\n                script = 'contract/arrayJumpingGame.js';\\n                break;\\n            case 'Merge Overlapping Intervals':\\n                script = 'contract/mergeOverlappingIntervals.js';\\n                break;\\n            case 'Unique Paths in a Grid I':\\n                script = 'contract/uniquePathsInAGridI.js';\\n                break;\\n            case 'Unique Paths in a Grid II':\\n                script = 'contract/uniquePathsInAGridII.js';\\n                break;\\n            case 'Sanitize Parentheses in Expression':\\n                script = 'contract/sanitizeParenthesesInExpression.js';\\n                break;\\n            case 'Minimum Path Sum in a Triangle':\\n                script = 'contract/minimumPathSumInATriangle.js';\\n                break;\\n            case 'Spiralize Matrix':\\n                script = 'contract/spiralizeMatrix.js';\\n                break;\\n            default:\\n                ns.tprintf('CONTRACTS: Found contract %s of type %s on %s', contract.file, contractType, contract.server);\\n                ns.tprintf('CONTRACTS: %s', ns.codingcontract.getDescription(contract.file, contract.server));\\n                ns.tprint('CONTRACTS: ' + '-'.repeat(40));\\n                break;\\n        }\\n\\n        if (script != '') {\\n            if (ns.run(script, 1, contract.file, contract.server) > 0) solved++;\\n        }\\n    }\\n\\n    ns.tprintf('CONTRACTS: Solved %i contracts, %i contracts remain unsolved.', solved, contracts.length - solved);\\n    return contracts.length;\\n}\\n\\nasync function initHacks() {\\n    targets.sort((a, b) => ns.getServerMaxMoney(b) - ns.getServerMaxMoney(a));\\n    servers.sort((a, b) => ns.getServerMaxRam(b.name) - ns.getServerMaxRam(a.name));\\n\\n    for (const server of servers) {\\n        if (server.isHome()) {\\n            continue;\\n        }\\n\\n        let target = targets.find((t) => !zoomHackers.includes(t));\\n        if (!target) {\\n            break;\\n        }\\n\\n        zoomHackers.push(target);\\n        ns.exec('zoomHacker.js', server.name, 1, target);\\n    }\\n}\\n\\nasync function initHacks() {\\n    let message;\\n    while ((message = ns.readPort(10) != 'NULL PORT DATA')) {\\n        let [serverName, target, string] = message.split(';');\\n\\n        ns.tprintf('HACKS: %s has failed hacking %s. Restarting hack.', serverName, target);\\n        ns.exec('zoomHacker.js', serverName, 1, target);\\n    }\\n}\\n\\nasync function addTargets() {\\n    for (let server of servers) {\\n        if (targets.includes(server.name)) {\\n            continue;\\n        }\\n        if (ns.getServerMaxMoney(server.name) <= 0) {\\n            continue;\\n        }\\n        if (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(server.name)) {\\n            continue;\\n        }\\n        if (portLevel < ns.getServerNumPortsRequired(server.name)) {\\n            continue;\\n        }\\n\\n        targets.push(server.name);\\n    }\\n}\\n\\nasync function nukeServers() {\\n    let rootCounter = 0;\\n    if (ns.fileExists('brutessh.exe')) portLevel = 1;\\n    if (ns.fileExists('ftpcrack.exe')) portLevel = 2;\\n    if (ns.fileExists('relaysmtp.exe')) portLevel = 3;\\n    if (ns.fileExists('httpworm.exe')) portLevel = 4;\\n    if (ns.fileExists('sqlinject.exe')) portLevel = 5;\\n\\n    for (let server of servers) {\\n        if (!ns.hasRootAccess(server.name)) {\\n            switch (ns.getServerNumPortsRequired(server.name)) {\\n                case 5:\\n                    if (portLevel < 5) continue;\\n                    ns.sqlinject(server.name);\\n                case 4:\\n                    if (portLevel < 4) continue;\\n                    ns.httpworm(server.name);\\n                case 3:\\n                    if (portLevel < 3) continue;\\n                    ns.relaysmtp(server.name);\\n                case 2:\\n                    if (portLevel < 2) continue;\\n                    ns.ftpcrack(server.name);\\n                case 1:\\n                    if (portLevel < 1) continue;\\n                    ns.brutessh(server.name);\\n                case 0:\\n                    ns.nuke(server.name);\\n                    break;\\n                default:\\n                    continue;\\n            }\\n        }\\n\\n        if (ns.hasRootAccess(server.name)) {\\n            if (!server.isHome()) {\\n                ns.rm(hackScript, server.name);\\n                ns.rm(growScript, server.name);\\n                ns.rm(weakenScript, server.name);\\n                await ns.scp([hackScript, growScript, weakenScript], hostName, server.name);\\n            }\\n            rootCounter++;\\n            server.root = true;\\n        }\\n\\n        if (purchasedServers.includes(server.name)) {\\n            ns.rm('zoomerHacker.js', server.name);\\n            await ns.scp('zoomHacker.js', hostName, server.name);\\n        }\\n    }\\n\\n    ns.tprintf('NUKE: Nuked %i servers and installed the worker scripts.', rootCounter);\\n}\\n\",\"filename\":\"gameManager.js\",\"url\":\"blob:file:///3cb62e1e-aaea-4871-b0cb-1b69762d3a29\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:file:///893db213-cdbd-409c-9f35-5a07cb82d71b\"},{\"filename\":\"scan.js\",\"url\":\"blob:file:///fc991ce3-324a-4562-a5c6-6b446178f8bd\"},{\"filename\":\"lib.js\",\"url\":\"blob:file:///1af8e401-7098-41cc-92df-f293c914e6ab\"},{\"filename\":\"gameManager.js\",\"url\":\"blob:file:///3cb62e1e-aaea-4871-b0cb-1b69762d3a29\"}],\"ramUsage\":28.5,\"server\":\"home\",\"moduleSequenceNumber\":33994}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree, numberSquish } from './lib.js';\\n\\n/**\\n * Async\\n * @param {import(\\\".\\\").NS} ns\\n */\\nexport async function getServerArray(ns) {\\n    let root = await getChildren(ns, 'home', '');\\n    return root.toStringArray();\\n}\\n\\n/**\\n * Async\\n * @param {import(\\\".\\\").NS} ns\\n */\\nexport async function getServerTree(ns) {\\n    return await getChildren(ns, 'home', '');\\n}\\n\\n/**\\n * @param {import(\\\".\\\").NS} ns\\n * @param {string} currentName\\n * @param {string} parentPath\\n */\\nasync function getChildren(ns, currentName, parentPath) {\\n    let children = await ns.scan(currentName);\\n    let path = parentPath + ' > ' + currentName;\\n\\n    let server = new ServerTree(currentName, [], path);\\n\\n    for (let child of children) {\\n        if (parentPath.split(' ').pop() === child) {\\n            continue;\\n        }\\n        server.children.push(await getChildren(ns, child, path));\\n    }\\n\\n    return server;\\n}\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let serverRoot = await getServerTree(ns);\\n\\n    if (!ns.args[0] || ns.args[0] === 'tree') {\\n        let maxIndent = serverRoot.maxDepth() + serverRoot.longestName();\\n        ns.tprint(maxIndent);\\n        ns.tprint(generateHeader(ns, maxIndent));\\n        printTree(ns, serverRoot, 0, maxIndent);\\n    } else {\\n        let nameIndent = serverRoot.longestName();\\n        let serverList = serverRoot.toArray();\\n\\n        switch (ns.args[0]) {\\n            case 'name':\\n                serverList.sort((a, b) => a.name - b.name);\\n                break;\\n            case 'skill':\\n                serverList.sort((a, b) => ns.getServerRequiredHackingLevel(a.name) - ns.getServerRequiredHackingLevel(b.name));\\n                break;\\n            case 'money':\\n                serverList.sort((a, b) => ns.getServerMoneyAvailable(a.name) - ns.getServerMoneyAvailable(b.name));\\n                break;\\n            case 'maxMoney':\\n                serverList.sort((a, b) => ns.getServerMaxMoney(a.name) - ns.getServerMaxMoney(b.name));\\n                break;\\n            case 'ram':\\n                serverList.sort((a, b) => ns.getServerMaxRam(a.name) - ns.getServerMaxRam(b.name));\\n                break;\\n            case 'maxRam':\\n                serverList.sort((a, b) => {\\n                    let freeRamA = ns.getServerMaxRam(a.name) - ns.getServerNumPortsRequired(a.name);\\n                    let freeRamB = ns.getServerMaxRam(b.name) - ns.getServerNumPortsRequired(b.name);\\n                    return freeRamA - freeRamB;\\n                });\\n                break;\\n            case 'security':\\n                serverList.sort((a, b) => {\\n                    let secA = ns.getServerSecurityLevel(a.name) - ns.getServerMinSecurityLevel(a.name);\\n                    let secB = ns.getServerSecurityLevel(b.name) - ns.getServerMinSecurityLevel(b.name);\\n                    return secA - secB;\\n                });\\n                break;\\n            case 'special':\\n                serverList = serverList.filter((s) => ns.getServerMaxMoney(s.name) === 0 && !s.name.includes('blank') && !s.isHome());\\n                break;\\n            case 'filter':\\n                if (ns.args.length < 2) {\\n                    ns.tprint('Missing argument.');\\n                }\\n                let searchTargets = ns.args.slice(1);\\n                serverList = serverList\\n                    .filter((s) => searchTargets.includes(s.name))\\n                    .sort((a, b) => ns.getServerMaxMoney(a.name) - ns.getServerMaxMoney(b.name));\\n                break;\\n            case 'search':\\n                if (ns.args.length < 2) {\\n                    ns.tprint('Missing argument.');\\n                }\\n                serverList = serverList.filter((s) => s.name.includes(ns.args[1]));\\n                break;\\n            default:\\n                ns.tprint('Unknown argument.');\\n                return;\\n        }\\n\\n        ns.tprint(generateHeader(ns, nameIndent));\\n        for (let server of serverList) {\\n            ns.tprint(stringifyServer(ns, server, 0, nameIndent));\\n        }\\n        switch (ns.args[0]) {\\n            case 'special':\\n            case 'search':\\n                if (ns.args[0] === 'special' || ns.args[0] === 'search') {\\n                    for (let server of serverList) {\\n                        ns.tprintf('Path to %s: %s', server.name.padEnd(13), server.path);\\n                    }\\n                }\\n                break;\\n            case 'filter':\\n                ns.tprintf('Total targets: %i', serverList.length);\\n                break;\\n            default:\\n                break;\\n        }\\n    }\\n}\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nfunction printTree(ns, root, depth, maxIndent) {\\n    ns.tprint(stringifyServer(ns, root, depth, maxIndent));\\n    for (const child of root.children) {\\n        printTree(ns, child, depth + 1, maxIndent);\\n    }\\n}\\n\\nlet spacing = [6, 13, 13, 11, 11, 8];\\n\\n/**\\n * @param {import(\\\".\\\").NS} ns\\n * @param {Number} spacingMod\\n */\\nfunction generateHeader(ns, nameSpacing) {\\n    let serverName = 'Server'.padEnd(nameSpacing);\\n    let hackingSkill = 'Skill'.padStart(spacing[0]);\\n    let moneyCurrent = 'Current Money'.padStart(spacing[1]);\\n    let moneyMax = 'Max Money'.padStart(spacing[2]);\\n    let ram = 'Current Ram'.padStart(spacing[3]);\\n    let ramMax = 'Max RAM'.padStart(spacing[4]);\\n    let security = 'Security'.padStart(spacing[5]);\\n    return ns.sprintf('| %s |%s | %s | %s | %s | %s | %s |', serverName, hackingSkill, moneyCurrent, moneyMax, ram, ramMax, security);\\n}\\n\\n/**\\n * @param {import(\\\".\\\").NS} ns\\n * @param {ServerTree} server\\n * @param {Number} indent\\n * @param {Number} nameSpacing\\n */\\nfunction stringifyServer(ns, server, indent, nameSpacing) {\\n    let serverName = (' '.repeat(indent) + server.name).padEnd(nameSpacing);\\n    let hackingSkill = ns.getServerRequiredHackingLevel(server.name).toLocaleString().padStart(spacing[0]);\\n    let moneyCurrent = numberSquish(ns.getServerMoneyAvailable(server.name)).padStart(spacing[1]);\\n    let moneyMax = numberSquish(ns.getServerMaxMoney(server.name)).padStart(spacing[2]);\\n    let ram = numberSquish(ns.getServerMaxRam(server.name) - ns.getServerUsedRam(server.name), true).padStart(spacing[3]);\\n    let ramMax = numberSquish(ns.getServerMaxRam(server.name), true).padStart(spacing[4]);\\n    let security = numberSquish(ns.getServerSecurityLevel(server.name) - ns.getServerMinSecurityLevel(server.name)).padStart(spacing[5]);\\n    return ns.sprintf('> %s |%s | %s | %s | %s | %s | %s |', serverName, hackingSkill, moneyCurrent, moneyMax, ram, ramMax, security);\\n}\\n\",\"filename\":\"scan.js\",\"url\":\"blob:file:///65cc87ed-ec4f-4046-b248-d13a0e1b11c8\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:file:///54da935d-cc46-43e6-b0a4-278f50ecd73d\"},{\"filename\":\"scan.js\",\"url\":\"blob:file:///65cc87ed-ec4f-4046-b248-d13a0e1b11c8\"}],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":34024}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\nasync function findServer(ns, current, parent, search) {\\n\\tif (current === search) {\\n\\t\\treturn current;\\n\\t}\\n\\tlet children = await ns.scan(current);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tlet childValue = await findServer(ns, child, current, search);\\n\\t\\tif (childValue != '') {\\n\\t\\t\\treturn current + '>' + childValue;\\n\\t\\t}\\n\\t}\\n\\treturn '';\\n}\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n\\tns.tprint(await findServer(ns, 'home', '', target));\\n}\",\"filename\":\"/old/serverSearch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":34016}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"..\\\").NS} ns */\\nexport async function main(ns) {\\n\\tlet baseRam = 8;\\n\\tlet upgradeMultiplier = 32;\\n\\tlet hackRam = ns.getScriptRam('hack.js', hostName);\\n\\n    let servers = ns.getPurchasedServers();\\n\\tlet ramGoal = getLowestRam(servers) * upgradeMultiplier;\\n\\n\\tif (lowestRam == 0) {\\n\\t\\tlet baught = 0;\\n\\t\\tfor (let i = servers.length - 1; i < ns.getPurchasedServerLimit(); i++) {\\n\\t\\t\\tif (ns.getServerMoneyAvailable('home') > ns.getPurchasedServerCost(baseRam)) {\\n\\t\\t\\t\\tbaught++;\\n\\t\\t\\t\\tlet newServer = ns.purchaseServer(\\\"blank-\\\" + i, baseRam);\\n\\t\\t\\t\\tawait ns.scp('hack.js', newServer);\\n\\t\\t\\t\\tns.exec('hack.js', newServer, 3);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tns.tprint(`Baught ${baught} servers with ${baseRam}gb each. For a total of ${servers.length + baught}.`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tservers.filter((s) => ns.getServerMaxRam(s) <= ramGoal);\\n\\n\\tfor (let server of servers) {\\n\\t\\tlet upgraded = 0;\\n\\t\\tif (ns.getServerMoneyAvailable('home') > ns.getPurchasedServerCost(ramGoal)) {\\n\\t\\t\\tupgraded++;\\n\\t\\t\\tns.killall(server);\\n\\t\\t\\tns.deleteServer(server);\\n\\n\\t\\t\\tlet maxThreads = Math.floor(ramGoal / hackRam);\\n\\n\\t\\t\\tlet newServer = ns.purchaseServer(server, ramGoal);\\n\\t\\t\\tawait ns.scp('hack.js', newServer);\\n\\t\\t\\tns.exec('hack.js', newServer, maxThreads);\\n\\t\\t}\\n\\t\\tns.tprint(`Upgraded ${upgraded} Server to ${ramGoal}gb.`);\\n\\t}\\n}\\n\\n/** @param {String[]} servers */\\nfunction getLowestRam(servers) {\\n\\tif (servers.length < 25) {\\n\\t\\treturn 0;\\n\\t}\\n\\tlet ram = Number.POSITIVE_INFINITY;\\n\\tfor (let server of servers) {\\n\\t\\tif (ns.getPurchasedServerMaxRam(server) < ram) {\\n\\t\\t\\tram = ns.getPurchasedServerMaxRam(server);\\n\\t\\t}\\n\\t}\\n\\n\\treturn ram;\\n}\",\"filename\":\"/old/upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":11.35,\"server\":\"home\",\"moduleSequenceNumber\":34022}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\n65,181,43,87,63\\n\\nDetermine the maximum possible profit you can earn using at most one\\ntransaction (i.e. you can only buy and sell the stock once). \\nIf no profit can be made then the answer should be 0. \\nNote that you have to buy the stock before you can sell it\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS}\\n * @param {Number[]} prices\\n*/ \\nfunction solve(prices, ns) {\\n    let profit = 0;\\n    for (let i = 0; i < prices.length - 1; i++) {\\n        for (let j = i + 1; j < prices.length; j++) {\\n            if (prices[j] - prices[i] > profit) {\\n                profit = prices[j] - prices[i];\\n            }\\n        }\\n    }\\n    return profit;\\n}\",\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"blob:file:///cf9b5d1a-8d25-4069-8e51-ab7791de32a5\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/algorithmicStockTraderI.js\",\"url\":\"blob:file:///cf9b5d1a-8d25-4069-8e51-ab7791de32a5\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":33962}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) \\nwhere the i-th element represents the stock price on day i:\\n\\n126,6,43,158,4,147,41,100,100,119,143,73,7,129,46,158,6,129,160,124,126,179,41,44,68,1,88\\n\\nDetermine the maximum possible profit you can earn using as many transactions as you'd like. \\nA transaction is defined as buying and then selling one share of the stock. \\nNote that you cannot engage in multiple transactions at once. \\nIn other words, you must sell the stock before you buy it again.\\n\\nIf no profit can be made, then the answer should be 0\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let iterations = Math.ceil(data.length / 2);\\n    let anwser = solve(iterations, data);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %j', anwser);\\n    }\\n}\\n\\n/**\\n * @param {Number[]} prices\\n * */\\nfunction solve(iterations, prices) {\\n    let highestProfits = [];\\n    for (let i = 0; i < iterations; i++) {\\n        highestProfits.push(new Array(prices.length).fill(0));\\n    }\\n\\n    for (let i = 0; i < iterations; i++) {\\n        for (let j = 0; j < prices.length; j++) {\\n            for (let k = j; k < prices.length; k++) {\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(\\n                        highestProfits[i][k],\\n                        highestProfits[i - 1][k],\\n                        highestProfits[i][k - 1],\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\n                    );\\n                } else if (i > 0 && j > 0) {\\n                    highestProfits[i][k] = Math.max(\\n                        highestProfits[i][k],\\n                        highestProfits[i - 1][k],\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\n                    );\\n                } else if (i > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i - 1][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\n                } else if (j > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\n                } else {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], prices[k] - prices[j]);\\n                }\\n            }\\n        }\\n    }\\n\\n    return highestProfits[iterations - 1][prices.length - 1];\\n}\\n\",\"filename\":\"/contract/algorithmicStockTraderII.js\",\"url\":\"blob:file:///ccf8d457-d2cf-45b9-8574-ffd524177549\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/algorithmicStockTraderII.js\",\"url\":\"blob:file:///ccf8d457-d2cf-45b9-8574-ffd524177549\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":33964}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of stock prices (which are numbers) \\nwhere the i-th element represents the stock price on day i:\\n\\n133,31,25,6,82,118,68,83,95,164,123,8,139,16,37,138,168,90,21,185,10,108,93,154,1,176,80,66,195,34,68,169,49,55\\n\\nDetermine the maximum possible profit you can earn using at most two transactions. \\nA transaction is defined as buying and then selling one share of the stock. \\nNote that you cannot engage in multiple transactions at once. \\nIn other words, you must sell the stock before you buy it again.\\n\\nIf no profit can be made, then the answer should be 0\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let iterations = 2;\\n    let anwser = solve(iterations, data);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %j', anwser);\\n    }\\n}\\n\\n/**\\n * @param {Number[]} prices\\n * */\\nfunction solve(iterations, prices) {\\n    let highestProfits = [];\\n    for (let i = 0; i < iterations; i++) {\\n        highestProfits.push(new Array(prices.length).fill(0));\\n    }\\n\\n    for (let i = 0; i < iterations; i++) {\\n        for (let j = 0; j < prices.length; j++) {\\n            for (let k = j; k < prices.length; k++) {\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(\\n                        highestProfits[i][k],\\n                        highestProfits[i - 1][k],\\n                        highestProfits[i][k - 1],\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\n                    );\\n                } else if (i > 0 && j > 0) {\\n                    highestProfits[i][k] = Math.max(\\n                        highestProfits[i][k],\\n                        highestProfits[i - 1][k],\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\n                    );\\n                } else if (i > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i - 1][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\n                } else if (j > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\n                } else {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], prices[k] - prices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfits[iterations - 1][prices.length - 1];\\n}\\n\",\"filename\":\"/contract/algorithmicStockTraderIII.js\",\"url\":\"blob:file:///f424899d-f934-4510-a4d7-9661f1f76745\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/algorithmicStockTraderIII.js\",\"url\":\"blob:file:///f424899d-f934-4510-a4d7-9661f1f76745\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":33966}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array of integers:\\n\\n0,10,0,0,0,4,7,9,7,7,1,6,5\\n\\nEach element in the array represents your MAXIMUM jump length at that position. \\nThis means that if you are at position i and your maximum jump length is n, \\nyou can jump to any position from i to i+n. \\n\\nAssuming you are initially positioned at the start of the array, \\ndetermine whether you are able to reach the last index exactly.\\n\\nYour answer should be submitted as 1 or 0, representing true and false respectively\\n*/\\n\\nlet anwser = 0;\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n\\n    jump(0, data);\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {Number} pos\\n * @param {Number[]} list\\n */\\nfunction jump(pos, list) {\\n    if (anwser) {\\n        return;\\n    }\\n    if (list[pos] == 0) {\\n        return;\\n    }\\n\\n    let maxJumpI = pos + list[pos];\\n    if (maxJumpI >= list.length - 1) {\\n        anwser = 1;\\n        return;\\n    }\\n\\n    for (let i = pos + 1; i <= maxJumpI; i++) {\\n        jump(i, list);\\n    }\\n}\\n\",\"filename\":\"/contract/arrayJumpingGame.js\",\"url\":\"blob:file:///0f0d2a41-641d-463e-98d7-4b6af809d84c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/arrayJumpingGame.js\",\"url\":\"blob:file:///0f0d2a41-641d-463e-98d7-4b6af809d84c\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":33970}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following string which contains only digits between 0 and 9:\\n\\n50020067805\\n\\nYou are also given a target number of 45. Return all possible ways you can add the +, -, and * operators to the string such that it evaluates to the target number.\\n\\nThe provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\n\\n[\\\"50020067805\\\", 45]\\n\\nNOTE: Numbers in the expression cannot have leading 0's. In other words, \\\"1+01\\\" is not a valid expression Examples:\\n\\nInput: digits = \\\"123\\\", target = 6\\nOutput: [1+2+3, 1*2*3]\\n\\nInput: digits = \\\"105\\\", target = 5\\nOutput: [1*0+5, 10-5]\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    anwser = '[' + anwser.join(', ') + ']';\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %s', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS} ns\\n * @param {Array} data\\n*/ \\nfunction solve(data, ns) {\\n    let digits = data[0].split('');\\n    let goal = data[1];\\n\\n    let numbers = [];\\n    generateNumbers(digits, numbers, []);\\n    let expressions = [];\\n    for (let numberList of numbers) {\\n        generateExpressions(numberList, expressions, []);\\n    }\\n\\n    let solutions = [];\\n    for (let expression of expressions) {\\n        if (solveExpression(expression.slice()) === goal) {\\n            solutions.push(expression.join(''));\\n        }\\n    }\\n    return solutions;\\n}\\n\\n/**\\n * @param {Array} expression\\n*/ \\nfunction solveExpression(expression) {\\n    let mIndex = [];\\n    for (let i = expression.length - 2; i > 0 ; i -= 2) {\\n        if (expression[i] == '*') {\\n            let n = expression[i-1] * expression[i+1];\\n            expression.splice(i-1, 3, n);\\n        }\\n    }\\n\\n    while (expression.length >= 3) {\\n        if (expression[1] == '+') {\\n            let n = expression[0] + expression[2];\\n            expression.splice(0, 3, n);\\n        } else {\\n            let n = expression[0] - expression[2];\\n            expression.splice(0, 3, n);\\n        }\\n    }\\n\\n    return expression[0];\\n}\\n\\n/**\\n * @param {Array} digits\\n * @param {Array} allNumbers\\n * @param {Array} head \\n*/\\nfunction generateNumbers(digits, allNumbers, head) {\\n    for (let i = 1; i <= digits.length; i++) {\\n        let digitCopy = digits.slice();\\n        let mergeElements = digitCopy.splice(0, i).join('');\\n\\n        let newHead = head.concat([mergeElements]);\\n        if (digitCopy.length <= 0) {\\n            for (let j = 0; j < newHead.length; j++) {\\n                newHead[j] = Number.parseInt(newHead[j])\\n            }\\n            allNumbers.push(newHead);\\n            continue;\\n        }\\n\\n        generateNumbers(digitCopy, allNumbers, newHead);\\n    }\\n}\\n\\n/**\\n * @param {Array} numbers\\n * @param {Array} expressionList\\n * @param {Array} head \\n*/\\nfunction generateExpressions(numbers, expressionList, head) {\\n    if (numbers.length <= 1) {\\n        expressionList.push(head.concat(numbers));\\n        return;\\n    }\\n\\n    generateExpressions(numbers.slice(1), expressionList, head.concat(numbers[0], '+'));\\n    generateExpressions(numbers.slice(1), expressionList, head.concat(numbers[0], '-'));\\n    generateExpressions(numbers.slice(1), expressionList, head.concat(numbers[0], '*'));\\n}\",\"filename\":\"/contract/findAllValidMathExpressions.js\",\"url\":\"blob:file:///f989ee8a-9648-4844-83d3-90826f6bbf3a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/findAllValidMathExpressions.js\",\"url\":\"blob:file:///f989ee8a-9648-4844-83d3-90826f6bbf3a\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":33972}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nA prime factor is a factor that is a prime number. What is the largest prime factor of 847089252?\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %i', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS} ns\\n * @param {Number} n\\n*/ \\nfunction solve(n, ns) {\\n    let maxPrime = -1;\\n\\n    while (n % 2 == 0) {\\n        maxPrime = 2;\\n        n /= 2;\\n    }\\n\\n    while (n % 3 == 0) {\\n        maxPrime = 3;\\n        n /= 3;\\n    }\\n\\n    for (let i = 5; i <= Math.sqrt(n); i += 6) {\\n        while (n % i == 0) {\\n            maxPrime = i;\\n            n /= i;\\n        }\\n      while (n % (i+2) == 0) {\\n            maxPrime = i+2;\\n            n /= (i+2);\\n        }\\n    }\\n \\n    // This condition is to handle the case\\n    // when n is a prime number greater than 4\\n    if (n > 4)\\n        maxPrime = n;\\n \\n    return maxPrime;\\n}\",\"filename\":\"/contract/findLargestPrimeFactor.js\",\"url\":\"blob:file:///e1da46c1-4299-4e62-81f8-2898fb868a5c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/findLargestPrimeFactor.js\",\"url\":\"blob:file:///e1da46c1-4299-4e62-81f8-2898fb868a5c\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":33974}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    anwser = '[' + anwser.join(', ') + ']';\\n\\n\\t//let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %i', data);\\n        ns.tprintf('Anwser %s', anwser);\\n    }\\n}\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nfunction solve(data, ns) {\\n    let dataString = data.toString();\\n    let valids = [];\\n    for (let i = 1; i < 4; i++) {\\n        let first = dataString.substring(0, i);\\n        if (first[0] == '0' || Number.parseInt(first) > 255) {\\n            break;\\n        }\\n        for (let j = i+1; j < i+4; j++) {\\n            let second = dataString.substring(i, j);\\n            if (second[0] == '0' || Number.parseInt(second) > 255) {\\n                break;\\n            }\\n            for (let k = j+1; k < j+4; k++) {\\n                let third = dataString.substring(j, k);\\n                if (third[0] == '0' || Number.parseInt(third) > 255) {\\n                    break;\\n                }\\n                for (let l = k+1; l < k+4; l++) {\\n                    let fourth = dataString.substring(k, l);\\n                    if (fourth[0] == '0' || Number.parseInt(fourth) > 255) {\\n                        break;\\n                    }\\n\\n                    let testString = [first, second, third, fourth].join('');\\n                    let validString = [first, second, third, fourth].join('.');\\n\\n                    if (testString == dataString && !valids.includes(validString)) {\\n                        valids.push(validString);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    return valids;\\n}\",\"filename\":\"/contract/generateIPAddresses.js\",\"url\":\"blob:file:///0c32fc7e-cec2-435b-95e1-091e75004207\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/generateIPAddresses.js\",\"url\":\"blob:file:///0c32fc7e-cec2-435b-95e1-091e75004207\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":33976}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nGiven the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n\\n[[12,13],[25,27],[4,6],[14,18],[14,16],[4,9],[25,35],[15,17],[20,22]]\\n\\nExample:\\n\\n[[1, 3], [8, 10], [2, 6], [10, 16]]\\n\\nwould merge into [[1, 6], [8, 16]].\\n\\nThe intervals must be returned in ASCENDING order. \\nYou can assume that in an interval, the first number will always be smaller than the second.\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {\\n        returnReward: true,\\n    });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint(\\\"FAILED ATTEMPT\\\");\\n        ns.tprintf(\\\"Data %j\\\", data);\\n        ns.tprintf(\\\"Anwser %j\\\", anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS} ns\\n * @param {Number[][]} data\\n */\\nfunction solve(data, ns) {\\n    for (let i = 0; i < data.length - 1; i++) {\\n        for (let j = i + 1; j < data.length; j++) {\\n            if (data[i][0] <= data[j][1] && data[i][1] >= data[j][1]) {\\n                let cutJ = data.splice(j, 1)[0];\\n                if (cutJ[0] < data[i][0]) {\\n                    data[i][0] = cutJ[0];\\n                }\\n                j = i;\\n                continue;\\n            }\\n\\n            if (data[i][1] >= data[j][0] && data[i][0] <= data[j][0]) {\\n                let cutJ = data.splice(j, 1)[0];\\n                if (cutJ[1] > data[i][1]) {\\n                    data[i][1] = cutJ[1];\\n                }\\n                j = i;\\n                continue;\\n            }\\n        }\\n    }\\n    return data.sort((a, b) => a[0] - b[0]);\\n}\\n\",\"filename\":\"/contract/mergeOverlappingIntervals.js\",\"url\":\"blob:file:///38760122-1400-4784-9733-72d5b47c4297\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/mergeOverlappingIntervals.js\",\"url\":\"blob:file:///38760122-1400-4784-9733-72d5b47c4297\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":33978}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nGiven a triangle, find the minimum path sum from top to bottom. \\nIn each step of the path, you may only move to adjacent numbers in the row below. \\nThe triangle is represented as a 2D array of numbers:\\n\\n[\\n            [7],\\n           [3,6],\\n          [6,4,2],\\n         [6,1,1,9],\\n        [4,8,2,8,8],\\n       [2,3,4,4,6,9],\\n      [1,4,2,5,4,6,3],\\n     [7,9,8,4,4,7,6,2],\\n    [9,1,9,6,7,2,7,6,7],\\n   [6,1,5,5,2,1,4,4,5,7],\\n  [4,1,7,1,9,3,6,5,3,5,5]\\n]\\n\\n Example: If you are given the following triangle:\\n\\n[\\n     [2],\\n    [3,4],\\n   [6,5,7],\\n  [4,1,8,3]\\n]\\n\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, 0, 0);\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {Number[][]} data\\n */\\nfunction solve(data, x, y) {\\n    if (y === data.length - 1) {\\n        return data[y][x];\\n    }\\n\\n    return data[y][x] + Math.min(solve(data, x, y + 1), solve(data, x + 1, y + 1));\\n}\\n\",\"filename\":\"/contract/minimumPathSumInATriangle.js\",\"url\":\"blob:file:///e7ebfd1c-6943-47bf-8c47-8a1b545c06ea\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/minimumPathSumInATriangle.js\",\"url\":\"blob:file:///e7ebfd1c-6943-47bf-8c47-8a1b545c06ea\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":33980}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nSanitize Parentheses in Expression\\n\\nGiven the following string:\\n\\n(((a((()a\\n\\nremove the minimum number of invalid parentheses in order to validate the string. \\nIf there are multiple minimal ways to validate the string, provide all of the possible results. \\nThe answer should be provided as an array of strings. \\nIf it is impossible to validate the string the result should be an array with only an empty string.\\n\\nIMPORTANT: The string may contain letters, not just parentheses. Examples:\\n\\\"()())()\\\" -> [()()(), (())()]\\n\\\"(a)())()\\\" -> [(a)()(), (a())()]\\n\\\")(\\\" -> [\\\"\\\"]\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    anwser = '[' + anwser.join(', ') + ']';\\n\\n    if (anwser === '[]') {\\n        anwser = '[\\\"\\\"]';\\n    }\\n\\n    //let response = answer;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %s', data);\\n        ns.tprintf('Anwser %s', anwser);\\n    }\\n}\\n\\n/**\\n * @param {String} brackets\\n * @returns {Boolean}\\n */\\nfunction validate(brackets) {\\n    let counter = 0;\\n    for (let char of brackets) {\\n        if (char === '(') counter++;\\n        if (char === ')') counter--;\\n        if (counter < 0) return false;\\n    }\\n    if (counter != 0) return false;\\n    return true;\\n}\\n\\n/**\\n * @param {String} brackets\\n * @returns {String[]}\\n */\\nfunction solve(brackets, ns) {\\n    if (!brackets.includes('(') || !brackets.includes(')')) {\\n        return [];\\n    }\\n    let solutions = [];\\n    let unvalidated = [];\\n    for (let j = 0; j < brackets.length; j++) {\\n        if (brackets[j] != '(' && brackets[j] != ')') {\\n            continue;\\n        }\\n        let newBrackets = brackets.substring(0, j) + brackets.substring(j + 1);\\n\\n        if (validate(newBrackets)) {\\n            if (!solutions.includes(newBrackets)) {\\n                solutions.push(newBrackets);\\n            }\\n        } else {\\n            if (!unvalidated.includes(newBrackets)) {\\n                unvalidated.push(newBrackets);\\n            }\\n        }\\n    }\\n\\n    if (solutions.length > 0) {\\n        return solutions;\\n    }\\n\\n    for (let uBracket of unvalidated) {\\n        let nextResult = solve(uBracket, ns);\\n        if (nextResult.length > 0) {\\n            return nextResult;\\n        }\\n    }\\n\\n    return [];\\n}\\n\",\"filename\":\"/contract/sanitizeParenthesesInExpression.js\",\"url\":\"blob:file:///c240b5a6-ae78-4cfe-945d-aa61f97733bb\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/sanitizeParenthesesInExpression.js\",\"url\":\"blob:file:///c240b5a6-ae78-4cfe-945d-aa61f97733bb\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":33982}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nGiven the following array of arrays of numbers representing a 2D matrix, return the elements of the matrix as an array in spiral order:\\n\\n[\\n\\t[37,35, 3]\\n\\t[ 8,47,29]\\n\\t[40,42, 6]\\n\\t[50,38,37]\\n\\t[16,10,46]\\n\\t[47,37, 8]\\n\\t[50,43,13]\\n\\t[24,12,13]\\n\\t[14,48,27]\\n\\t[46,21,21]\\n\\t[14,38,48]\\n\\t[41,43,46]\\n\\t[ 2, 2,35]\\n\\t[ 5,19,49]\\n\\t[25, 6,29]\\n]\\n\\nHere is an example of what spiral order should be:\\n\\n[\\n\\t[1, 2, 3]\\n\\t[4, 5, 6]\\n\\t[7, 8, 9]\\n]\\n\\nAnswer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]\\n\\nNote that the matrix will not always be square:\\n\\n[\\n\\t[1,2,3,4]\\n\\t[5,6,7,8]\\n\\t[9,10,11,12]\\n]\\n\\nAnswer: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data, ns);\\n\\n    let response = \\\"NOT YET IMPLEMENTED\\\";\\n    //let response = ns.codingcontract.attempt(anwser, contract, server, {returnReward: true});\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint(\\\"FAILED ATTEMPT\\\");\\n        ns.tprintf(\\\"Data %j\\\", data);\\n        ns.tprintf(\\\"Anwser %j\\\", anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS} ns\\n */\\nfunction solve(ns) {}\\n\",\"filename\":\"/contract/spiralizeMatrix.js\",\"url\":\"blob:file:///278cb09f-2cab-4d10-9f73-520bdb7a6269\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/spiralizeMatrix.js\",\"url\":\"blob:file:///278cb09f-2cab-4d10-9f73-520bdb7a6269\"}],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":33984}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nGiven the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. \\n'Sum' refers to the sum of all the numbers in the subarray.\\n\\n6,9,1,-10,1,-6,9,-1,-3,-4,1,10,-4,-7,-7,5,-5,-9\\n*/\\n\\n/** @param {import(\\\"..\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n\\n    let anwser = solve(data);\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {\\n        returnReward: true,\\n    });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\nfunction solve(data) {\\n    let currentSolution = [];\\n    let bestSum = Number.NEGATIVE_INFINITY;\\n    for (let i = 0; i < data.length; i++) {\\n        let sum = 0;\\n        for (let j = i; j < data.length; j++) {\\n            sum += data[j];\\n            if (sum > bestSum) {\\n                bestSum = sum;\\n                currentSolution = data.slice(i, j + 1);\\n            }\\n        }\\n    }\\n    return bestSum;\\n}\\n\",\"filename\":\"/contract/subarrayWithMaximumSum.js\",\"url\":\"blob:file:///52b84d56-0364-44c2-a32c-8e2972536ca0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/subarrayWithMaximumSum.js\",\"url\":\"blob:file:///52b84d56-0364-44c2-a32c-8e2972536ca0\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":33986}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nIt is possible write four as a sum in exactly four different ways:\\n\\n3 + 1\\n2 + 2\\n2 + 1 + 1\\n1 + 1 + 1 + 1\\n\\nHow many different ways can the number 37 be written as a sum of at least two positive integers?\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n\\n    let anwser = solve(data, ns);\\n\\n    //let response = \\\"NOT YET IMPLEMENTED\\\";\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {\\n        returnReward: true,\\n    });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint(\\\"FAILED ATTEMPT\\\");\\n        ns.tprintf(\\\"Data %i\\\", data);\\n        ns.tprintf(\\\"Anwser %i\\\", anwser);\\n    }\\n}\\n\\n/**\\n * @param {import(\\\"../.\\\").NS} ns\\n * @param {Number} n\\n */\\nfunction solve(n, ns) {\\n    let partitionList = new Array(n + 1).fill(0);\\n    partitionList[0] = 1;\\n\\n    for (let i = 1; i <= n - 1; i++) {\\n        for (let j = i; j <= n; j++) {\\n            partitionList[j] += partitionList[j - i];\\n        }\\n    }\\n    return partitionList[n];\\n}\\n\",\"filename\":\"/contract/totalWaysToSum.js\",\"url\":\"blob:file:///e9db1977-0f7b-4856-90a1-7186f1995862\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/totalWaysToSum.js\",\"url\":\"blob:file:///e9db1977-0f7b-4856-90a1-7186f1995862\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":33988}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are in a grid with 4 rows and 10 columns,\\nand you are positioned in the top-left corner of that grid. \\nYou are trying to reach the bottom-right corner of the grid, \\nbut you can only move down or right on each step. \\nDetermine how many unique paths there are from start to finish.\\n\\nNOTE: The data returned for this contract is an array with the number of rows and columns:\\n\\n[4, 10]\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n\\n    let anwser = step(0, 0, data);\\n\\n    //let response = \\\"NOT YET IMPLEMENTED\\\";\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {\\n        returnReward: true,\\n    });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {Number} x\\n * @param {Number} y\\n * @param {Number[]} dimensions\\n * @returns\\n */\\nfunction step(x, y, dimensions) {\\n    if (y + 1 === dimensions[0] && x + 1 === dimensions[1]) {\\n        return 1;\\n    }\\n\\n    let pathCounter = 0;\\n\\n    if (y + 1 < dimensions[0]) {\\n        pathCounter += step(x, y + 1, dimensions);\\n    }\\n\\n    if (x + 1 < dimensions[1]) {\\n        pathCounter += step(x + 1, y, dimensions);\\n    }\\n\\n    return pathCounter;\\n}\\n\",\"filename\":\"/contract/uniquePathsInAGridI.js\",\"url\":\"blob:file:///66ee2014-d3d2-4245-8f2b-3b3d5e84f9f2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/uniquePathsInAGridI.js\",\"url\":\"blob:file:///66ee2014-d3d2-4245-8f2b-3b3d5e84f9f2\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":33990}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n\\tlet target = 'silver-helix';\\n\\n\\tns.disableLog('ALL');\\n\\n\\tlet money = ns.getServerMoneyAvailable(target);\\n\\tlet oldMoney = 0;\\n\\n\\tlet security = ns.getServerSecurityLevel(target);\\n\\tlet oldSecurity = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (money != oldMoney) {\\n\\t\\t\\tns.print(`Money: ${Math.floor(money)}`);\\n\\t\\t}\\n\\t\\toldMoney = money;\\n\\t\\tmoney = ns.getServerMoneyAvailable(target);\\n\\t\\tif (security != oldSecurity) {\\n\\t\\t\\tns.print(`Security: ${Math.floor(security)}`);\\n\\t\\t}\\n\\t\\toldSecurity = security;\\n\\t\\tsecurity = ns.getServerSecurityLevel(target);\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/old/hackTarget.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":34012}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\nasync function getChildren(ns, current, parent, list) {\\n\\tlet children = await ns.scan(current);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tlist.push(child);\\n\\n\\t\\tawait getChildren(ns, child, current, list);\\n\\t}\\n}\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nasync function findServer(ns, current, parent, search) {\\n\\tif (current === search) {\\n\\t\\treturn current;\\n\\t}\\n\\tlet children = await ns.scan(current);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tlet childValue = await findServer(ns, child, current, search);\\n\\t\\tif (childValue != '') {\\n\\t\\t\\treturn current + '>' + childValue;\\n\\t\\t}\\n\\t}\\n\\treturn '';\\n}\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n\\tlet targets = [];\\n\\tawait getChildren(ns, 'home', '', targets);\\n\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\ttargets = targets.filter(server => !purchasedServers.includes(server));\\n\\t\\n\\tlet contractServers = targets.filter(server => ns.ls(server).find(file => file.endsWith('.cct')));\\n\\n\\tif (contractServers.length < 1) {\\n\\t\\tns.tprint('No contract found.');\\n\\t\\treturn;\\n\\t}\\n\\n\\tfor (let contractServer of contractServers) {\\n\\t\\tns.tprint('Found contract on: ' + await findServer(ns, 'home', '', contractServer));\\n\\t}\\n}\",\"filename\":\"/old/contractSearch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.25,\"server\":\"home\",\"moduleSequenceNumber\":34002}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let target = 'silver-helix';\\n\\n    ns.disableLog('ALL');\\n\\n    let moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    let securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        let securityLevel = ns.getServerSecurityLevel(target);\\n        let money = ns.getServerMoneyAvailable(target);\\n        if (securityLevel > securityThresh) {\\n            ns.print(`WeakenTime: ${ns.getWeakenTime(target)}`);\\n            let decrease = await ns.weaken(target);\\n            ns.print(`Weaken: ${securityLevel} -> ${securityLevel - decrease}`)\\n        } else if (money < moneyThresh) {\\n            ns.print(`GrowTimer: ${ns.getGrowTime(target)}`);\\n            let multiplier = await ns.grow(target);\\n            ns.print(`Grow: ${money} -> ${money * multiplier}`);\\n        } else {\\n            ns.print(`HackTimer: ${ns.getHackTime(target)}`);\\n            let stolenMoney = await ns.hack(target);\\n            ns.print(`Hack: ${stolenMoney}`);\\n        }\\n    }\\n}\",\"filename\":\"/old/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":34004}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../.\\\").NS} ns */\\nasync function getChildren(ns, current, parent, list) {\\n\\tlet children = await ns.scan(current);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tlist.push(child);\\n\\n\\t\\tawait getChildren(ns, child, current, list);\\n\\t}\\n}\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let targets = [];\\n\\tawait getChildren(ns, 'home', '', targets);\\n\\n\\ttargets = targets.sort((a, b) => ns.getServerMaxMoney(a) - ns.getServerMaxMoney(b));\\n\\n\\tfor (let target of targets) {\\n\\t\\tlet money = Math.floor(ns.getServerMaxMoney(target)).toString().padEnd(14);\\n\\t\\tns.tprint(`> ${target.padEnd(20)}|Money: ${money}|Hacking: ${ns.getServerRequiredHackingLevel(target).toString().padEnd(5)}`);\\n\\t}\\n}\",\"filename\":\"/old/sortScan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":34020}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let message = ns.args.join(' ');\\r\\n    ns.writePort(20, message);\\r\\n}\",\"filename\":\"handler.js\",\"url\":\"blob:file:///cc4aa0c5-93af-4f7e-b0c0-79cffae2782c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"handler.js\",\"url\":\"blob:file:///cc4aa0c5-93af-4f7e-b0c0-79cffae2782c\"}],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":33996}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"..\\\").NS} ns */\\nasync function getChildren(ns, current, parent, list) {\\n\\tlet children = await ns.scan(current);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t\\n\\t\\tlet contractFiles = ns.ls(child, '.cct');\\n\\t\\tfor (let file of contractFiles) {\\n\\t\\t\\tlist.push([file, child]);\\n\\t\\t}\\n\\n\\t\\tawait getChildren(ns, child, current, list);\\n\\t}\\n}\\n\\n/** @param {import(\\\"..\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('scan');\\n\\tlet contracts = [];\\n\\tawait getChildren(ns, 'home', '', contracts);\\n\\tns.tprint(`Found ${contracts.length} contracts, starting the solvers...`);\\n\\n\\tlet solved = 0;\\n\\n\\tfor (let contract of contracts) {\\n\\t\\tlet contractType = ns.codingcontract.getContractType(contract[0], contract[1]);\\n\\t\\tswitch(contractType) {\\n\\t\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\t\\tif (ns.run('contract/subarrayWithMaximumSum.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Generate IP Addresses':\\n\\t\\t\\t\\tif (ns.run('contract/generateIPAddresses.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Find All Valid Math Expressions':\\n\\t\\t\\t\\tif (ns.run('contract/findAllValidMathExpressions.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Find Largest Prime Factor':\\n\\t\\t\\t\\tif (ns.run('contract/findLargestPrimeFactor.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Algorithmic Stock Trader I':\\n\\t\\t\\t\\tif (ns.run('contract/algorithmicStockTraderI.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\t\\tif (ns.run('contract/algorithmicStockTraderII.js', 1, contract[0], contract[1]) > 0);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Algorithmic Stock Trader III':\\n\\t\\t\\t\\tif (ns.run('contract/algorithmicStockTraderIII.js', 1, contract[0], contract[1]) > 0);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\t\\tif (ns.run('contract/totalWaysToSum.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Array Jumping Game':\\n\\t\\t\\t\\tif (ns.run('contract/arrayJumpingGame.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\t\\tif (ns.run('contract/mergeOverlappingIntervals.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\t\\tif (ns.run('contract/uniquePathsInAGridI.js', 1, contract[0], contract[1]) > 0) solved++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Sanitize Parentheses in Expression':\\n\\t\\t\\t\\tif (ns.run('contract/sanitizeParenthesesInExpression.js', 1, contract[0], contract[1]) > 0);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Minimum Path Sum in a Triangle':\\n\\t\\t\\t\\tif (ns.run('contract/minimumPathSumInATriangle.js', 1, contract[0], contract[1]) > 0);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'Spiralize Matrix':\\n\\t\\t\\t\\tif (ns.run('contract/spiralizeMatrix.js', 1, contract[0], contract[1]) > 0);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tns.tprint(`Found contract ${contract[0]} of type '${contractType}' on ${contract[1]}`);\\n\\t\\t\\t\\tns.tprint(`Description: ${ns.codingcontract.getDescription(contract[0], contract[1])}`);\\n\\t\\t\\t\\tns.tprint('-'.repeat(40));\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tns.tprint(`Solved ${solved} contracts, ${contracts.length - solved} contracts remain unsolved.`);\\n}\",\"filename\":\"/old/contractManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":13,\"server\":\"home\",\"moduleSequenceNumber\":34000}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let maxLevel = 200;\\nlet maxRam = 64;\\nlet maxRamUpgrades = 7;\\nlet maxCores = 16;\\n\\nlet buyThreshold = 0.05;\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n\\tlet nodeCount = ns.hacknet.numNodes();\\n\\t\\n\\tfor (let i = 0; i < nodeCount; i++) {\\n\\t\\tlet nodeStats = ns.hacknet.getNodeStats(i);\\n\\t\\tif (nodeStats.level === maxLevel && nodeStats.ram === maxRam && nodeStats.cores === maxCores) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait upgradeNode(ns, i);\\n\\t}\\n\\t\\n\\twhile (ns.hacknet.numNodes() < ns.hacknet.maxNumNodes()) {\\n\\t\\tlet currentMoney = ns.getServerMoneyAvailable('home');\\n\\n\\t\\tlet cost = ns.hacknet.getPurchaseNodeCost();\\n\\t\\tif (cost / currentMoney < buyThreshold) {\\n\\t\\t\\tlet node = ns.hacknet.purchaseNode();\\n\\t\\t\\tawait upgradeNode(ns, node);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n * @param {import(\\\".\\\").NS} ns\\n * @param {Number} node\\n*/\\nasync function upgradeNode(ns, node) {\\n\\tlet fullUpgrades = false;\\n\\tlet nodeStats = ns.hacknet.getNodeStats(node);\\n\\twhile (!fullUpgrades) {\\n\\t\\tlet currentMoney = ns.getServerMoneyAvailable('home');\\n\\t\\tlet cost = ns.hacknet.getLevelUpgradeCost(node, maxLevel - nodeStats.level);\\n\\t\\tcost += ns.hacknet.getRamUpgradeCost(node, maxRamUpgrades - nodeStats.ram);\\n\\t\\tcost += ns.hacknet.getCoreUpgradeCost(node, maxCores - nodeStats.cores);\\n\\n\\t\\tif (cost / currentMoney < buyThreshold) {\\n\\t\\t\\tns.hacknet.upgradeLevel(node, maxLevel - nodeStats.level);\\n\\t\\t\\tns.hacknet.upgradeRam(node, maxRamUpgrades - nodeStats.ram);\\n\\t\\t\\tns.hacknet.upgradeCore(node, maxCores - nodeStats.cores);\\n\\t\\t\\tfullUpgrades = true;\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/old/hacknetManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":34010}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"..\\\").NS} ns */\\nexport async function main(ns) {\\n\\tlet baseRam = 8;\\n\\tlet upgradeMultiplier = 32;\\n\\tlet hostName = ns.getHostname();\\n\\n    let servers = ns.getPurchasedServers();\\n\\tlet ramGoal = getLowestRam(servers, ns) * upgradeMultiplier;\\n\\n\\tif (ramGoal == 0) {\\n\\t\\tlet baught = 0;\\n\\t\\tfor (let i = servers.length - 1; i < ns.getPurchasedServerLimit(); i++) {\\n\\t\\t\\tif (ns.getServerMoneyAvailable('home') > ns.getPurchasedServerCost(baseRam)) {\\n\\t\\t\\t\\tbaught++;\\n\\t\\t\\t\\tns.purchaseServer(\\\"blank-\\\" + i, baseRam);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tns.tprint(`Baught ${baught} servers with ${baseRam}gb each. For a total of ${servers.length + baught}.`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tservers.filter((s) => ns.getServerMaxRam(s) <= ramGoal);\\n\\n\\n\\tlet upgraded = 0;\\n\\tfor (let server of servers) {\\n\\t\\tif (ns.getServerMoneyAvailable('home') > ns.getPurchasedServerCost(ramGoal)) {\\n\\t\\t\\tupgraded++;\\n\\t\\t\\tns.killall(server);\\n\\t\\t\\tns.deleteServer(server);\\n\\t\\t\\tns.purchaseServer(server, ramGoal);\\n\\t\\t}\\n\\t}\\n\\tif (upgraded == 0) {\\n\\t\\tns.tprint(`Not enough money for upgrade: ${ns.getPurchasedServerCost(ramGoal) / (1000 * 1000)}m per Server.`);\\n\\t\\treturn;\\n\\t}\\n\\tns.tprint(`Upgraded ${upgraded} Server to ${ramGoal}gb.`);\\n\\n\\tns.spawn('hackManager.js');\\n}\\n\\n/** \\n * @param {String[]} servers\\n * @param {import(\\\"..\\\").NS} ns\\n*/\\nfunction getLowestRam(servers, ns) {\\n\\tif (servers.length < 25) {\\n\\t\\treturn 0;\\n\\t}\\n\\tlet ram = Number.POSITIVE_INFINITY;\\n\\tfor (let server of servers) {\\n\\t\\tif (ns.getServerMaxRam(server) < ram) {\\n\\t\\t\\tram = ns.getServerMaxRam(server);\\n\\t\\t}\\n\\t}\\n\\n\\treturn ram;\\n}\",\"filename\":\"/old/serverManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":11.35,\"server\":\"home\",\"moduleSequenceNumber\":34014}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are given the following array with two elements:\\n\\n [2, [23,148,145,145,107,71,24,67,95,82,162,58,145,135,184,130,175,41,184,90,43,146,15,113,97,55,102,35,40,149,148,74,11,90,31,165,160,150,124,182,58]]\\n\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\n\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\n\\n If no profit can be made, then the answer should be 0.\\n*/\\n\\n/** @param {import(\\\"../.\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n    let anwser = solve(data[0], data[1]);\\n\\n    if (anwser < 0) {\\n        anwser = 0;\\n    }\\n\\n    //let response = anwser;\\n    let response = ns.codingcontract.attempt(anwser, contract, server, { returnReward: true });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %j', anwser);\\n    }\\n}\\n\\n/**\\n * @param {Number[]} prices\\n * */\\nfunction solve(iterations, prices) {\\n    let highestProfits = [];\\n    for (let i = 0; i < iterations; i++) {\\n        highestProfits.push(new Array(prices.length).fill(0));\\n    }\\n\\n    for (let i = 0; i < iterations; i++) {\\n        for (let j = 0; j < prices.length; j++) {\\n            for (let k = j; k < prices.length; k++) {\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(\\n                        highestProfits[i][k],\\n                        highestProfits[i - 1][k],\\n                        highestProfits[i][k - 1],\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\n                    );\\n                } else if (i > 0 && j > 0) {\\n                    highestProfits[i][k] = Math.max(\\n                        highestProfits[i][k],\\n                        highestProfits[i - 1][k],\\n                        highestProfits[i - 1][j - 1] + prices[k] - prices[j]\\n                    );\\n                } else if (i > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i - 1][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\n                } else if (j > 0 && k > 0) {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], highestProfits[i][k - 1], prices[k] - prices[j]);\\n                } else {\\n                    highestProfits[i][k] = Math.max(highestProfits[i][k], prices[k] - prices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfits[iterations - 1][prices.length - 1];\\n}\\n\",\"filename\":\"/contract/algorithmicStockTraderIV.js\",\"url\":\"blob:file:///6a429f7a-3fa9-40d6-adf4-eb33a687d200\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/algorithmicStockTraderIV.js\",\"url\":\"blob:file:///6a429f7a-3fa9-40d6-adf4-eb33a687d200\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":33968}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nYou are located in the top-left corner of the following grid:\\n\\n0,0,0,0,\\n0,0,0,0,\\n0,0,1,0,\\n0,1,0,0,\\n0,0,0,0,\\n0,0,0,0,\\n0,0,0,0,\\n0,0,0,0,\\n1,1,1,0,\\n0,0,0,0,\\n0,0,0,0,\\n\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n\\n Determine how many unique paths there are from start to finish.\\n\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n*/\\n\\n/** @param {import(\\\"..\\\").NS} ns */\\nexport async function main(ns) {\\n    let contract = ns.args[0];\\n    let server = ns.args[1];\\n\\n    let data = ns.codingcontract.getData(contract, server);\\n\\n    let anwser = step(0, 0, data);\\n\\n    //let response = \\\"NOT YET IMPLEMENTED\\\";\\n    let response = ns.codingcontract.attempt(anwser, contract, server, {\\n        returnReward: true,\\n    });\\n\\n    if (response) {\\n        ns.tprint(response);\\n    } else {\\n        ns.tprint('FAILED ATTEMPT');\\n        ns.tprintf('Data %j', data);\\n        ns.tprintf('Anwser %i', anwser);\\n    }\\n}\\n\\n/**\\n * @param {Number} x\\n * @param {Number} y\\n * @param {Number[][]} grid\\n * @returns\\n */\\nfunction step(x, y, grid) {\\n    if (y + 1 === grid.length && x + 1 === grid[0].length) {\\n        return 1;\\n    }\\n\\n    let pathCounter = 0;\\n\\n    if (y + 1 < grid.length && grid[y + 1][x] == 0) {\\n        pathCounter += step(x, y + 1, grid);\\n    }\\n\\n    if (x + 1 < grid[0].length && grid[y][x + 1] == 0) {\\n        pathCounter += step(x + 1, y, grid);\\n    }\\n\\n    return pathCounter;\\n}\\n\",\"filename\":\"/contract/uniquePathsInAGridII.js\",\"url\":\"blob:file:///f167d61d-1d40-4511-9651-30b840c1d0c1\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contract/uniquePathsInAGridII.js\",\"url\":\"blob:file:///f167d61d-1d40-4511-9651-30b840c1d0c1\"}],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":33992}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.grow(ns.args[0]);\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///ba22574d-ee4f-4e4e-9ac1-cab7ed5d45aa\",\"module\":{},\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///ba22574d-ee4f-4e4e-9ac1-cab7ed5d45aa\"}],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":34039}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.hack(ns.args[0]);\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///90695d04-4225-40ce-b5e7-692e3d49b4cd\",\"module\":{},\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///90695d04-4225-40ce-b5e7-692e3d49b4cd\"}],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":34040}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n    await ns.weaken(ns.args[0]);\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///8b489056-1a94-4b02-9114-ab757a26d383\",\"module\":{},\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///8b489056-1a94-4b02-9114-ab757a26d383\"}],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":34038}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ServerTree {\\r\\n    /**\\r\\n     * @param {String} name\\r\\n     * @param {Server[]} children\\r\\n     * @param {String} path\\r\\n     */\\r\\n    constructor(name, children, path) {\\r\\n        this.name = name;\\r\\n        this.children = children;\\r\\n        this.path = path;\\r\\n    }\\r\\n\\r\\n    isHome() {\\r\\n        return this.name === 'home';\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @returns {ServerTree[]} List of all the servers\\r\\n     */\\r\\n    toArray() {\\r\\n        let list = [];\\r\\n        for (const child of this.children) {\\r\\n            list = list.concat(child.toArray());\\r\\n        }\\r\\n        return [new ServerTree(this.name, [], this.path)].concat(list);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @returns {ServerTree[]} List of all the servers\\r\\n     */\\r\\n    toStringArray() {\\r\\n        let list = [];\\r\\n        for (const child of this.children) {\\r\\n            list = list.concat(child.toStringArray());\\r\\n        }\\r\\n        return [this.name].concat(list);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {Number} depth\\r\\n     */\\r\\n    maxDepth(depth = 0) {\\r\\n        let maxDepth = depth;\\r\\n        for (const child of this.children) {\\r\\n            maxDepth = Math.max(maxDepth, child.maxDepth(depth + 1));\\r\\n        }\\r\\n        return maxDepth;\\r\\n    }\\r\\n\\r\\n    longestName() {\\r\\n        let nameLength = this.name.length;\\r\\n        for (const child of this.children) {\\r\\n            nameLength = Math.max(nameLength, child.longestName());\\r\\n        }\\r\\n        return nameLength;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Server {\\r\\n    /**\\r\\n     * @param {String} name\\r\\n     */\\r\\n    constructor(name) {\\r\\n        this.name = name;\\r\\n        this.target = false;\\r\\n        this.root = false;\\r\\n        this.growTimer = 0;\\r\\n        this.hackTimer = 0;\\r\\n        this.weakenTimer = 0;\\r\\n\\r\\n        this.moneyStolenPerSecondQueue = [];\\r\\n        this.securityIncreasePerSecondQueue = [];\\r\\n    }\\r\\n\\r\\n    /** @returns {Boolean} */\\r\\n    isHome() {\\r\\n        return this.name === 'home';\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {Number} money\\r\\n     * @returns {Boolean}\\r\\n     */\\r\\n    queueMoneyStolenPerSec(money) {\\r\\n        this.moneyStolenPerSecondQueue.push(money);\\r\\n        return this.moneyStolenPerSecondQueue.shift();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {Number} security\\r\\n     * @returns {Boolean}\\r\\n     */\\r\\n    queueSecurityIncreasePerSec(security) {\\r\\n        this.securityIncreasePerSecondQueue.push(security);\\r\\n        return this.securityIncreasePerSecondQueue.shift();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @returns {Number}\\r\\n     */\\r\\n    averageMoneyStolenPerSec() {\\r\\n        if (this.moneyStolenPerSecondQueue.length === 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return this.moneyStolenPerSecondQueue.reduce((p, c) => p + c, 0) / this.moneyStolenPerSecondQueue.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @returns {Number}\\r\\n     */\\r\\n    averageSecurityIncreasePerSec() {\\r\\n        if (this.securityIncreasePerSecondQueue.length === 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return this.securityIncreasePerSecondQueue.reduce((p, c) => p + c, 0) / this.securityIncreasePerSecondQueue.length;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {Number} number\\r\\n * @param {Boolean} bytes\\r\\n * @returns {String}\\r\\n */\\r\\nexport function numberSquish(number, bytes) {\\r\\n    if (number == 0) {\\r\\n        return bytes ? '0GB' : '0.000';\\r\\n    }\\r\\n    let letters = bytes ? ['GB', 'TB', 'PB'] : ['', 'k', 'm', 'b', 't'];\\r\\n    let index = Math.floor(Math.log10(Math.abs(number)) / 3);\\r\\n\\r\\n    if (index > 0) {\\r\\n        number = number / Math.pow(1000, index);\\r\\n    }\\r\\n\\r\\n    let letter;\\r\\n    if (index >= letters.length) {\\r\\n        letter = 'ADD MORE LETTER';\\r\\n    } else if (index < 0) {\\r\\n        letter = '';\\r\\n    } else {\\r\\n        letter = letters[index];\\r\\n    }\\r\\n\\r\\n    return number.toLocaleString('en-UK', { maximumFractionDigits: bytes ? 0 : 3, minimumFractionDigits: bytes ? 0 : 3 }) + letter;\\r\\n}\\r\\n\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":33998}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"..\\\").NS} ns */\\nasync function getChildren(ns, current, parent, list) {\\n    let children = await ns.scan(current);\\n    for (let child of children) {\\n        if (parent === child) {\\n            continue;\\n        }\\n        list.push(child);\\n\\n        await getChildren(ns, child, current, list);\\n    }\\n}\\n\\n/** @param {import(\\\"..\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let scriptName = 'smartHack.js';\\n    let monitorScriptName = 'hackMonitor.js';\\n    let scriptRam = ns.getScriptRam(scriptName);\\n    let homeRamSpace = 1024;\\n\\n    let hostName = ns.getHostname();\\n\\n    let portLevel = 0;\\n    if (ns.fileExists('brutessh.exe')) portLevel = 1;\\n    if (ns.fileExists('ftpcrack.exe')) portLevel = 2;\\n    if (ns.fileExists('relaysmtp.exe')) portLevel = 3;\\n    if (ns.fileExists('httpworm.exe')) portLevel = 4;\\n    if (ns.fileExists('sqlinject.exe')) portLevel = 5;\\n\\n    let allServers = [];\\n    await getChildren(ns, hostName, '', allServers);\\n\\n    let targets = [];\\n    let totalTargetMaxMoney = 0;\\n    for (let server of allServers) {\\n        if (ns.getServerMaxMoney(server) > 0) {\\n            if (ns.getServerNumPortsRequired(server) <= portLevel) {\\n                if (ns.getServerRequiredHackingLevel(server) <= Math.ceil(ns.getHackingLevel() * 0.9)) {\\n                    totalTargetMaxMoney += ns.getServerMaxMoney(server);\\n                    targets.push({ name: server, moneyP: 0, threads: 0 });\\n                }\\n            }\\n        }\\n    }\\n\\n    for (let target of targets) {\\n        target.moneyP = ns.getServerMaxMoney(target.name) / totalTargetMaxMoney;\\n    }\\n\\n    for (let server of allServers) {\\n        if (!ns.hasRootAccess(server)) {\\n            switch (ns.getServerNumPortsRequired(server)) {\\n                case 5:\\n                    if (portLevel < 5) continue;\\n                    ns.sqlinject(server);\\n                case 4:\\n                    if (portLevel < 4) continue;\\n                    ns.httpworm(server);\\n                case 3:\\n                    if (portLevel < 3) continue;\\n                    ns.relaysmtp(server);\\n                case 2:\\n                    if (portLevel < 2) continue;\\n                    ns.ftpcrack(server);\\n                case 1:\\n                    if (portLevel < 1) continue;\\n                    ns.brutessh(server);\\n                case 0:\\n                    ns.nuke(server);\\n                    break;\\n                default:\\n                    continue;\\n            }\\n        }\\n\\n        ns.scriptKill(scriptName, server);\\n        ns.rm(scriptName, server);\\n        await ns.scp(scriptName, server);\\n        let ram = ns.getServerMaxRam(server);\\n        let maxThreads = Math.floor(ram / scriptRam);\\n\\n        let threadCount = 0;\\n        for (let i = 0; i < targets.length - 1; i++) {\\n            let targetThreads = Math.floor(maxThreads * targets[i].moneyP);\\n            if (targetThreads > 0) {\\n                execute(ns, scriptName, server, targets[i], targetThreads);\\n            }\\n            targets[i].threads += targetThreads;\\n            threadCount += targetThreads;\\n        }\\n        if (threadCount < maxThreads) {\\n            let targetThreads = maxThreads - threadCount;\\n            if (targetThreads > 0) {\\n                execute(ns, scriptName, server, targets[targets.length - 1], targetThreads);\\n            }\\n            targets[targets.length - 1].threads += targetThreads;\\n            threadCount += targetThreads;\\n        }\\n\\n        if (threadCount < maxThreads) {\\n            ns.tprintf(`Remaining threads on ${server}`);\\n        }\\n    }\\n\\n    ns.scriptKill(monitorScriptName, hostName);\\n    for (let target of targets) {\\n        ns.exec(monitorScriptName, hostName, 1, target.name);\\n    }\\n\\n    ns.scriptKill(scriptName, hostName);\\n    let ram = ns.getServerMaxRam(hostName) - homeRamSpace;\\n    let maxThreads = Math.floor(ram / scriptRam);\\n\\n    let threadCount = 0;\\n    for (let i = 0; i < targets.length - 1; i++) {\\n        let targetThreads = Math.floor(maxThreads * targets[i].moneyP);\\n        if (targetThreads > 0) {\\n            execute(ns, scriptName, hostName, targets[i], targetThreads);\\n        }\\n        targets[i].threads += targetThreads;\\n        threadCount += targetThreads;\\n    }\\n\\n    if (threadCount < maxThreads) {\\n        let targetThreads = maxThreads - threadCount;\\n        if (targetThreads > 0) {\\n            execute(ns, scriptName, hostName, targets[targets.length - 1], targetThreads);\\n        }\\n        targets[targets.length - 1].threads += targetThreads;\\n        threadCount += targetThreads;\\n    }\\n\\n    if (threadCount < maxThreads) {\\n        ns.tprintf(`Remaining threads on ${server}`);\\n    }\\n\\n    targets.sort((a, b) => a.threads - b.threads);\\n    let totalThreads = 0;\\n    for (let target of targets) {\\n        ns.tprint(`Target: ${target.name}, Threads startet: ${target.threads}`);\\n        totalThreads += target.threads;\\n    }\\n    ns.tprint(`Total Threads startet: ${totalThreads}`);\\n}\\n\\n/** @param {import(\\\"..\\\").NS} ns */\\nfunction execute(ns, scriptName, server, target, threads) {\\n    ns.exec(scriptName, server, threads, target.name);\\n    ns.print(`Execute ${scriptName} at ${server} -> ${target} with ${threads} threads.`);\\n}\\n\",\"filename\":\"/old/hackManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.7,\"server\":\"home\",\"moduleSequenceNumber\":34006}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\n\\tns.disableLog('ALL');\\n\\n\\tlet money = ns.getServerMoneyAvailable(target);\\n\\tlet oldMoney = 0;\\n\\n\\tlet security = ns.getServerSecurityLevel(target);\\n\\tlet oldSecurity = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (money != oldMoney) {\\n\\t\\t\\tns.print(`Money: ${Math.floor(money)}`);\\n\\t\\t}\\n\\t\\toldMoney = money;\\n\\t\\tmoney = ns.getServerMoneyAvailable(target);\\n\\t\\tif (security != oldSecurity) {\\n\\t\\t\\tns.print(`Security: ${Math.floor(security)}`);\\n\\t\\t}\\n\\t\\toldSecurity = security;\\n\\t\\tsecurity = ns.getServerSecurityLevel(target);\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/old/hackMonitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":34008}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n\\n    ns.disableLog('ALL');\\n\\n    let moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    let securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        let securityLevel = ns.getServerSecurityLevel(target);\\n        let money = ns.getServerMoneyAvailable(target);\\n        if (securityLevel > securityThresh) {\\n            ns.print(`WeakenTime: ${ns.getWeakenTime(target)}`);\\n            let decrease = await ns.weaken(target);\\n            ns.print(`Weaken: ${securityLevel} -> ${securityLevel - decrease}`)\\n        } else if (money < moneyThresh) {\\n            ns.print(`GrowTimer: ${ns.getGrowTime(target)}`);\\n            let multiplier = await ns.grow(target);\\n            ns.print(`Grow: ${money} -> ${money * multiplier}`);\\n        } else {\\n            ns.print(`HackTimer: ${ns.getHackTime(target)}`);\\n            let stolenMoney = await ns.hack(target);\\n            ns.print(`Hack: ${stolenMoney}`);\\n        }\\n    }\\n}\",\"filename\":\"/old/smartHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":34018}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let symbols = ns.stock.getSymbols();\\r\\n\\r\\n    for (let symbol of symbols) {\\r\\n        ns.tprint(ns.stock.getForecast(symbol));\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"stockManager.js\",\"url\":\"blob:file:///62df660d-e885-47de-8d62-e5a04c839619\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stockManager.js\",\"url\":\"blob:file:///62df660d-e885-47de-8d62-e5a04c839619\"}],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":34026}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n    let wScriptRam = ns.getScriptRam('workerWeaken.js');\\r\\n    let gScriptRam = ns.getScriptRam('workerGrow.js');\\r\\n    let hScriptRam = ns.getScriptRam('workerHack.js');\\r\\n\\r\\n    let usableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n    //Prime Money\\r\\n    let maxMoney = ns.getServerMaxMoney(target);\\r\\n    let money = Math.max(ns.getServerMoneyAvailable(target), 1);\\r\\n\\r\\n    while (money < maxMoney) {\\r\\n        let multiplier = maxMoney / money;\\r\\n        let maxGThreads = Math.floor((usableRam - wScriptRam * 2000) / gScriptRam);\\r\\n        let gThreads = Math.min(Math.ceil(ns.growthAnalyze(target, multiplier)), maxGThreads);\\r\\n\\r\\n        ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n\\r\\n        money = ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    ns.tprint('Money Primed');\\r\\n\\r\\n    //If security left\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        ns.exec('workerWeaken.js', server, 2000, target);\\r\\n        await ns.sleep(ns.getWeakenTime(target) + 1000);\\r\\n    }\\r\\n    ns.tprint('Security Primed');\\r\\n\\r\\n    let wTime = ns.getWeakenTime(target);\\r\\n    let gTime = ns.getGrowTime(target);\\r\\n    let hTime = ns.getHackTime(target);\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 3);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.45));\\r\\n    let gSecGain = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSecGain = ns.hackAnalyzeSecurity(hThreads);\\r\\n    let wThreads = Math.ceil((gSecGain + hSecGain + 10) / 0.05);\\r\\n\\r\\n    let ramForRun = wScriptRam * wThreads + gScriptRam * gThreads + hScriptRam * hThreads;\\r\\n    let parallelRuns = usableRam / ramForRun;\\r\\n    let sleepTime = wTime / parallelRuns;\\r\\n\\r\\n    if (sleepTime < 500) {\\r\\n        sleepTime = 500;\\r\\n    }\\r\\n\\r\\n    let offset = sleepTime / 2;\\r\\n    let gOffset = offset / 4;\\r\\n    let hOffset = offset / 2;\\r\\n\\r\\n    let totalRunCount = 0;\\r\\n    let runCount = 0;\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) > 0) {\\r\\n            ns.tprint('FAILED SINCE SEC IS TO HIGH');\\r\\n            ns.exit();\\r\\n        }\\r\\n\\r\\n        let wSleep = 0;\\r\\n        let gSleep = wTime - gTime - gOffset;\\r\\n        let hSleep = wTime - hTime - hOffset;\\r\\n\\r\\n        let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n\\r\\n        if (freeRam > ramForRun) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wSleep, totalRunCount);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gSleep, totalRunCount);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hSleep, totalRunCount);\\r\\n\\r\\n            if (runCount < parallelRuns) {\\r\\n                await ns.sleep(sleepTime);\\r\\n                runCount++;\\r\\n            } else {\\r\\n                await ns.sleep(sleepTime + offset);\\r\\n                runCount = 0;\\r\\n            }\\r\\n\\r\\n            totalRunCount++;\\r\\n        } else {\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///1caca96b-b7e7-49b3-90ad-fe4463d96f6f\",\"module\":{},\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///1caca96b-b7e7-49b3-90ad-fe4463d96f6f\"}],\"ramUsage\":7.7,\"server\":\"home\",\"moduleSequenceNumber\":34037}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.sleep(1000);\\r\\n        ns.tprint(ns.getTimeSinceLastAug() % 1000000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"timer.js\",\"url\":\"blob:file:///76369718-6607-40d2-b8f2-285679f62a19\",\"module\":\"\",\"dependencies\":[{\"filename\":\"timer.js\",\"url\":\"blob:file:///76369718-6607-40d2-b8f2-285679f62a19\"}],\"ramUsage\":1.65,\"server\":\"home\",\"moduleSequenceNumber\":389}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n\\r\\n    if (gMult > 1 || missingSec > 0) {\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.run('workerGrow.js', gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.run('workerWeaken.js', wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let extraDelay = 700 - (wTimer % 1000);\\r\\n    if (extraDelay < 0) {\\r\\n        extraDelay += 1000;\\r\\n    }\\r\\n\\r\\n    let wDelay = extraDelay;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100 + extraDelay;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200 + extraDelay;\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target) == 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n            ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n            ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n            changer++;\\r\\n        }\\r\\n\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":8.5,\"server\":\"home\",\"moduleSequenceNumber\":390}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"blank-0\",\"blank-1\",\"blank-2\",\"blank-3\",\"blank-4\",\"blank-5\",\"blank-6\",\"blank-7\",\"blank-8\",\"blank-9\",\"blank-10\",\"blank-11\",\"blank-12\",\"blank-13\",\"blank-14\",\"blank-15\",\"blank-16\",\"blank-17\",\"blank-18\",\"blank-19\",\"blank-20\",\"blank-21\",\"blank-22\",\"blank-23\",\"blank-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"alpha-omega.txt\",\"text\":\"Alpha and Omega\\r\\n\\r\\nThen we saw a new Heaven and a new Earth, for our first Heaven and Earth had gone away, and our sea was no more. And we saw a new holy city, new Aeria, coming down out of this new Heaven, prepared as a bride adorned for her husband. And we heard a loud voice saying, 'Behold, the new dwelling place of the Gods. We will dwell with them, and they will be our people, and we will be with them as their Gods. We will wipe away every tear from their eyes, and death shall be no more, neither shall there be mourning, nor crying, nor pain anymore, for the former things have passed away.'\\r\\n\\r\\nAnd once we were seated on the throne we said 'Behold, I am making all things new.' Also we said, 'Write this down, for these words are trustworthy and true.' And we said to you, 'It is done! I am the Alpha and the Omega, the beginning and the end. To the thirsty I will give from the spring of the water of life without payment. The one who conquers will have this heritage, and we will be his God and he will be our son. But as for the cowardly, the faithless, the detestable, as for murderers, the sexually immoral, sorcerers, idolaters, and all liars, their portion will be in the lake that burns with fire and sulfur, for it is the second true death.'\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"46.2.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":391}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":392}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":393}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":30337829085,\"moneyMax\":758445727125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1244,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"17.2.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":394}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":395}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":396}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":40587439318,\"moneyMax\":1014685982950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1334,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"16.1.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":397}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":398}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":399}}],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":61.156,\"minDifficulty\":24,\"moneyAvailable\":683215566575,\"moneyMax\":683215566575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":908,\"serverGrowth\":65}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"48.6.0.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":400}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":401}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":402}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":479586566650,\"moneyMax\":479586566650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":996,\"serverGrowth\":77}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"54.1.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":403}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":404}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":405}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22276252122,\"moneyMax\":556906303050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1163,\"serverGrowth\":74}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"84.6.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":406}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":407}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":408}}],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":23792056877,\"moneyMax\":594801421925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1098,\"serverGrowth\":45}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"5.1.7.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":409}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":410}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":411}}],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":344581645700,\"moneyMax\":344581645700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1010,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"62.1.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":412}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":413}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":414}}],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":15737603137,\"moneyMax\":393440078425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1138,\"serverGrowth\":92}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"54.2.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":415}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":416}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":417}}],\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":21831574079,\"moneyMax\":545789351975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1095,\"serverGrowth\":95}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"55.7.3.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":418}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":419}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":420}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1452166509,\"moneyMax\":36304162725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1122,\"serverGrowth\":98}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"90.0.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":421}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":422}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":423}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1415,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"94.3.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":424}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":425}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":426}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":29.163999999999938,\"minDifficulty\":28,\"moneyAvailable\":288,\"moneyMax\":28402802500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":888,\"serverGrowth\":80}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"8.3.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":427}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":428}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":429}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":30.35599999999991,\"minDifficulty\":29,\"moneyAvailable\":341,\"moneyMax\":22213004525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":948,\"serverGrowth\":61}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"1.2.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":430}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":431}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":432}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":5882.516902958211,\"moneyMax\":20461161375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":894,\"serverGrowth\":51}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-465609.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[45,28,31],[17,10,12],[38,38,50],[48,33,35],[9,13,46],[27,34,10]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"36.9.9.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":433}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":434}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":435}}],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":30.457500000000007,\"minDifficulty\":29,\"moneyAvailable\":16397997850,\"moneyMax\":16397997850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":72}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"35.5.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":436}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":437}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":438}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":81.7829421046199,\"moneyMax\":19174918450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":75}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"94.0.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":439}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":440}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":441}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":32,\"minDifficulty\":32,\"moneyAvailable\":24882656600,\"moneyMax\":24882656600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":903,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"25.2.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":442}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":443}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":444}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":29.475999999999733,\"minDifficulty\":28,\"moneyAvailable\":190,\"moneyMax\":29948262400,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":859,\"serverGrowth\":90}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"69.2.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":445}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":446}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":447}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":27.60999999999964,\"minDifficulty\":26,\"moneyAvailable\":231,\"moneyMax\":22155974175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":80}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"68.6.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":448}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":449}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":450}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":25.777624999999997,\"minDifficulty\":24,\"moneyAvailable\":9249506845,\"moneyMax\":15429407375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":871,\"serverGrowth\":79}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"69.5.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":451}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":452}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":453}}],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":4809474.423045924,\"moneyMax\":21932155275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":889,\"serverGrowth\":77}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"32.9.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":454}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":455}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":456}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":20.728,\"minDifficulty\":19,\"moneyAvailable\":3051.5589661729537,\"moneyMax\":20523818250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":70}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"79.7.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":457}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":458}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":459}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":7407345.331440754,\"moneyMax\":26734652375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":922,\"serverGrowth\":56}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"9.8.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":460}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":461}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":462}}],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":6230011.05854366,\"moneyMax\":24540340600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":915,\"serverGrowth\":69}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"73.5.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":463}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":464}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":465}}],\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":23636045875,\"moneyMax\":23636045875,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":806,\"serverGrowth\":70}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"18.1.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":466}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":467}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":468}}],\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":480.62776329979533,\"moneyMax\":18186874650,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":809,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"44.1.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":469}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":470}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":471}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":327454.04050152097,\"moneyMax\":20271216350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":761,\"serverGrowth\":77}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"99.1.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":472}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":473}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":474}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":29.51799999999968,\"minDifficulty\":28,\"moneyAvailable\":270,\"moneyMax\":38934398850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":827,\"serverGrowth\":51}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"36.9.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":475}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":476}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":477}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":100,\"minDifficulty\":25,\"moneyAvailable\":4275221515.763133,\"moneyMax\":42380427850,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":836,\"serverGrowth\":82}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"0.8.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":478}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":479}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":480}}],\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":100,\"minDifficulty\":26,\"moneyAvailable\":30179628325,\"moneyMax\":30179628325,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":782,\"serverGrowth\":85}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"11.4.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":481}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":482}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":483}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":29.355999999999792,\"minDifficulty\":28,\"moneyAvailable\":320,\"moneyMax\":34416542400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"98.5.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":484}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":485}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":486}}],\"serversOnNetwork\":[\"snap-fitness\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25.03200000000001,\"minDifficulty\":25,\"moneyAvailable\":26381842450,\"moneyMax\":26381842450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":782,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"8.9.1.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":487}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":488}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":489}}],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":24.002,\"minDifficulty\":24,\"moneyAvailable\":280.89123697336413,\"moneyMax\":18040596625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":728,\"serverGrowth\":62}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"36.9.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":490}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":491}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":492}}],\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":20.412750000000003,\"minDifficulty\":18,\"moneyAvailable\":15912107625,\"moneyMax\":15912107625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":517,\"serverGrowth\":58}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-33130.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[97,79,140,25,195,80,121,24,193,4,4,194,131,89,167,4,141,105]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"49.6.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":493}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":494}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":495}}],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":26.306375000000003,\"minDifficulty\":23,\"moneyAvailable\":16077417353.419209,\"moneyMax\":17162818625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":537,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"81.8.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":496}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":497}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":498}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":3990639483,\"moneyMax\":6693730425,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":433,\"serverGrowth\":42}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"30.0.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":499}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":500}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":501}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":5623232125,\"moneyMax\":5623232125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":406,\"serverGrowth\":44}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"39.5.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":502}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":503}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":504}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":2133326537.979024,\"moneyMax\":20928192300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":731,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"32.7.4.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":505}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":506}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":507}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":27.972000000000005,\"minDifficulty\":22,\"moneyAvailable\":7973050125,\"moneyMax\":7973050125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":425,\"serverGrowth\":54}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"29.9.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":508}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":509}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":510}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":27.55,\"minDifficulty\":24,\"moneyAvailable\":12285175275,\"moneyMax\":12285175275,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":568,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"47.9.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":511}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":512}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":513}}],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":24.082,\"minDifficulty\":22,\"moneyAvailable\":6027592248,\"moneyMax\":10104248775,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":438,\"serverGrowth\":43}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"40.2.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":514}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":515}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":516}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":12,\"minDifficulty\":12,\"moneyAvailable\":602695191,\"moneyMax\":4768166325,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":293,\"serverGrowth\":53}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"57.5.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":517}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":518}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":519}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":21.778,\"minDifficulty\":19,\"moneyAvailable\":5812417725,\"moneyMax\":5812417725,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":380,\"serverGrowth\":61}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"78.4.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":520}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":521}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":522}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":26.530249999999995,\"minDifficulty\":24,\"moneyAvailable\":5976045208.429534,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":397,\"serverGrowth\":75}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"1.6.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":523}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":524}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":525}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":18.35,\"minDifficulty\":18,\"moneyAvailable\":223597926,\"moneyMax\":1863772050,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":276,\"serverGrowth\":39}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"16.5.8.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":526}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":527}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":528}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"71.8.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":529}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":530}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":531}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":19.75,\"minDifficulty\":3,\"moneyAvailable\":6802034.46129684,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"32.1.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":532}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":533}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":534}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":19.408,\"minDifficulty\":3,\"moneyAvailable\":3984464.5272224043,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"27.3.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":535}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":536}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":537}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":4126373.1132353973,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"8.3.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":538}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":539}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":540}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":478.66200736235055,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-897546.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[38,30,4,42,16,16,8,25],[31,39,11,47,13,42,48,46],[29,41,24,30,1,23,18,45],[23,43,11,19,42,15,7,46],[20,23,15,28,22,2,36,14],[9,22,21,31,27,23,37,40],[11,28,1,4,23,31,30,14],[41,34,13,25,3,37,32,33],[37,50,48,38,48,16,1,12]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"75.5.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":541}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":542}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":543}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":9.491999999999999,\"minDifficulty\":7,\"moneyAvailable\":313978.4726145847,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"91.3.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":544}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":545}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":546}}],\"serversOnNetwork\":[\"max-hardware\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"54.1.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":547}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":548}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":549}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.23,\"minDifficulty\":10,\"moneyAvailable\":275428064,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"59.1.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":550}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":551}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":552}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.301999999999999,\"minDifficulty\":5,\"moneyAvailable\":330223,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"7.7.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":553}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":554}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":555}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.3,\"minDifficulty\":5,\"moneyAvailable\":1779353,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"62.0.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":556}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":557}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":558}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.002,\"minDifficulty\":7,\"moneyAvailable\":1995.965155718848,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"71.9.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":559}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":560}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":561}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"47.8.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":562}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":563}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":564}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":32,\"hackDifficulty\":11.002,\"minDifficulty\":11,\"moneyAvailable\":4397.689267752896,\"moneyMax\":1615592050,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":220,\"serverGrowth\":35}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"8.4.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":565}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":566}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":567}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":1172742525,\"moneyMax\":1172742525,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":239,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"16.5.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":568}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":569}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":570}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":79.60157726354419,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"65.4.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":571}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":572}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":573}}],\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":20.634,\"minDifficulty\":16,\"moneyAvailable\":6250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":500,\"serverGrowth\":34}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"11.2.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":574}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":575}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":576}}],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":21.364,\"minDifficulty\":19,\"moneyAvailable\":22500000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":958,\"serverGrowth\":57}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"44.1.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":577}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":578}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":579}}],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":17.067499999999995,\"minDifficulty\":15,\"moneyAvailable\":6739688572,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":775,\"serverGrowth\":44}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"9.6.8.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":580}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":581}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":582}}],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":549,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"23.9.0.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":583}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":584}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":585}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":343,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"23.2.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":586}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":587}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":588}}],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":212,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"16.8.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":589}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":590}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":591}}],\"serversOnNetwork\":[\"helios\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":509,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"81.6.9.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":592}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":593}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":594}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"92.4.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":595}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":596}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":597}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"76.4.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"23.3.8.8\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":598}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":599}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":600}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-0\",\"httpPortOpen\":false,\"ip\":\"18.9.3.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///2101435c-cad6-40c2-9a1c-917ae25c902d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///2101435c-cad6-40c2-9a1c-917ae25c902d\"}],\"ramUsage\":7.7,\"server\":\"blank-0\",\"moduleSequenceNumber\":601}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-0\",\"moduleSequenceNumber\":602}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///216f2726-7a09-4ebe-b769-cd14d091e408\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///216f2726-7a09-4ebe-b769-cd14d091e408\"}],\"ramUsage\":1.75,\"server\":\"blank-0\",\"moduleSequenceNumber\":603}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///22acbaa6-315b-439b-9ddd-040607d9c19d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///22acbaa6-315b-439b-9ddd-040607d9c19d\"}],\"ramUsage\":1.75,\"server\":\"blank-0\",\"moduleSequenceNumber\":604}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-1\",\"httpPortOpen\":false,\"ip\":\"6.8.3.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///1ece3761-7352-4615-ae49-2818b963d553\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///1ece3761-7352-4615-ae49-2818b963d553\"}],\"ramUsage\":7.7,\"server\":\"blank-1\",\"moduleSequenceNumber\":605}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-1\",\"moduleSequenceNumber\":606}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///d8c8050f-ef24-4734-b40c-5597d7c6119c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///d8c8050f-ef24-4734-b40c-5597d7c6119c\"}],\"ramUsage\":1.75,\"server\":\"blank-1\",\"moduleSequenceNumber\":607}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///c9b95cb2-e11a-46bc-a4b5-f5eb4b54985f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///c9b95cb2-e11a-46bc-a4b5-f5eb4b54985f\"}],\"ramUsage\":1.75,\"server\":\"blank-1\",\"moduleSequenceNumber\":608}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-2\",\"httpPortOpen\":false,\"ip\":\"97.0.5.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///ca6c612a-33e6-4f00-bc8b-abe58d877cb2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///ca6c612a-33e6-4f00-bc8b-abe58d877cb2\"}],\"ramUsage\":7.7,\"server\":\"blank-2\",\"moduleSequenceNumber\":609}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-2\",\"moduleSequenceNumber\":610}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///10ecd841-a6b7-4a75-9737-6fafa1cb1bc1\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///10ecd841-a6b7-4a75-9737-6fafa1cb1bc1\"}],\"ramUsage\":1.75,\"server\":\"blank-2\",\"moduleSequenceNumber\":611}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///b3d75088-8a52-454b-89cb-cf2d71eff7c4\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///b3d75088-8a52-454b-89cb-cf2d71eff7c4\"}],\"ramUsage\":1.75,\"server\":\"blank-2\",\"moduleSequenceNumber\":612}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-3\",\"httpPortOpen\":false,\"ip\":\"42.2.3.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///02d55c76-5179-4a44-8412-17afbef7150a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///02d55c76-5179-4a44-8412-17afbef7150a\"}],\"ramUsage\":7.7,\"server\":\"blank-3\",\"moduleSequenceNumber\":613}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-3\",\"moduleSequenceNumber\":614}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///acb0aa01-7201-4736-9bfb-7aca82baafd1\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///acb0aa01-7201-4736-9bfb-7aca82baafd1\"}],\"ramUsage\":1.75,\"server\":\"blank-3\",\"moduleSequenceNumber\":615}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///8409d1fe-1067-4526-af10-075bc2b2fc52\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///8409d1fe-1067-4526-af10-075bc2b2fc52\"}],\"ramUsage\":1.75,\"server\":\"blank-3\",\"moduleSequenceNumber\":616}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-4\",\"httpPortOpen\":false,\"ip\":\"57.8.7.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///e444be78-7287-427c-8261-208b62976479\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///e444be78-7287-427c-8261-208b62976479\"}],\"ramUsage\":7.7,\"server\":\"blank-4\",\"moduleSequenceNumber\":617}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-4\",\"moduleSequenceNumber\":618}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///3f1b9ed1-ba60-411b-937a-c96888cd1437\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///3f1b9ed1-ba60-411b-937a-c96888cd1437\"}],\"ramUsage\":1.75,\"server\":\"blank-4\",\"moduleSequenceNumber\":619}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///8d6de38e-d257-4fbf-9ea9-99ec7a69f5a7\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///8d6de38e-d257-4fbf-9ea9-99ec7a69f5a7\"}],\"ramUsage\":1.75,\"server\":\"blank-4\",\"moduleSequenceNumber\":620}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-5\",\"httpPortOpen\":false,\"ip\":\"72.4.7.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///24601dd9-d74b-4c25-97a8-1b882643da54\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///24601dd9-d74b-4c25-97a8-1b882643da54\"}],\"ramUsage\":7.7,\"server\":\"blank-5\",\"moduleSequenceNumber\":621}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-5\",\"moduleSequenceNumber\":622}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///a9b902bc-8ddf-4158-b907-de469bfcc24f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///a9b902bc-8ddf-4158-b907-de469bfcc24f\"}],\"ramUsage\":1.75,\"server\":\"blank-5\",\"moduleSequenceNumber\":623}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///2f9a77b6-5b55-40b9-a606-52f0d1d0b7d3\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///2f9a77b6-5b55-40b9-a606-52f0d1d0b7d3\"}],\"ramUsage\":1.75,\"server\":\"blank-5\",\"moduleSequenceNumber\":624}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-6\",\"httpPortOpen\":false,\"ip\":\"51.3.0.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///54c14acb-40c1-4772-9aaa-98b2a41aa6a4\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///54c14acb-40c1-4772-9aaa-98b2a41aa6a4\"}],\"ramUsage\":7.7,\"server\":\"blank-6\",\"moduleSequenceNumber\":625}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///07d658b9-bf74-4d34-b279-6402a11fffa1\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///07d658b9-bf74-4d34-b279-6402a11fffa1\"}],\"ramUsage\":1.7,\"server\":\"blank-6\",\"moduleSequenceNumber\":626}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///113d48c2-f9f0-42cb-a87b-7fbcf67c9b16\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///113d48c2-f9f0-42cb-a87b-7fbcf67c9b16\"}],\"ramUsage\":1.75,\"server\":\"blank-6\",\"moduleSequenceNumber\":627}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///07bebd73-5c44-4b89-950a-b50cc39d0397\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///07bebd73-5c44-4b89-950a-b50cc39d0397\"}],\"ramUsage\":1.75,\"server\":\"blank-6\",\"moduleSequenceNumber\":628}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-7\",\"httpPortOpen\":false,\"ip\":\"21.0.7.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///055da5ca-ba92-49d6-b243-d6d94b20d670\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///055da5ca-ba92-49d6-b243-d6d94b20d670\"}],\"ramUsage\":7.7,\"server\":\"blank-7\",\"moduleSequenceNumber\":629}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-7\",\"moduleSequenceNumber\":630}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///0d99bf53-9b2b-4887-a3e0-8cdfed204fcf\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///0d99bf53-9b2b-4887-a3e0-8cdfed204fcf\"}],\"ramUsage\":1.75,\"server\":\"blank-7\",\"moduleSequenceNumber\":631}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///39246322-0223-416e-9278-a78a2033c502\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///39246322-0223-416e-9278-a78a2033c502\"}],\"ramUsage\":1.75,\"server\":\"blank-7\",\"moduleSequenceNumber\":632}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-8\",\"httpPortOpen\":false,\"ip\":\"91.3.0.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c5df4ac6-a4a8-4861-b50d-6ed9d3667fd6\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c5df4ac6-a4a8-4861-b50d-6ed9d3667fd6\"}],\"ramUsage\":7.7,\"server\":\"blank-8\",\"moduleSequenceNumber\":633}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///de0466ab-24e0-4e1e-94cb-c96f256fa1f0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///de0466ab-24e0-4e1e-94cb-c96f256fa1f0\"}],\"ramUsage\":1.7,\"server\":\"blank-8\",\"moduleSequenceNumber\":634}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///37297732-b482-4831-8237-ee65115a3d4c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///37297732-b482-4831-8237-ee65115a3d4c\"}],\"ramUsage\":1.75,\"server\":\"blank-8\",\"moduleSequenceNumber\":635}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///078f3007-e06d-4b06-995a-a27b607fd659\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///078f3007-e06d-4b06-995a-a27b607fd659\"}],\"ramUsage\":1.75,\"server\":\"blank-8\",\"moduleSequenceNumber\":636}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-9\",\"httpPortOpen\":false,\"ip\":\"5.3.3.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///976a69c6-ad99-4fe5-88d4-1e3efad849b4\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///976a69c6-ad99-4fe5-88d4-1e3efad849b4\"}],\"ramUsage\":7.7,\"server\":\"blank-9\",\"moduleSequenceNumber\":637}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///4f822097-d5a5-4347-bb21-b9393da99f15\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///4f822097-d5a5-4347-bb21-b9393da99f15\"}],\"ramUsage\":1.7,\"server\":\"blank-9\",\"moduleSequenceNumber\":638}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///ea1b1726-34c5-415c-9dcd-fc1e12cf461f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///ea1b1726-34c5-415c-9dcd-fc1e12cf461f\"}],\"ramUsage\":1.75,\"server\":\"blank-9\",\"moduleSequenceNumber\":639}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///b3a630d5-96b1-4ab7-87e5-9f5e0c0d7e4f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///b3a630d5-96b1-4ab7-87e5-9f5e0c0d7e4f\"}],\"ramUsage\":1.75,\"server\":\"blank-9\",\"moduleSequenceNumber\":640}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-10\",\"httpPortOpen\":false,\"ip\":\"43.8.4.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///991b3ac1-ca79-4373-a40a-fd44c6544319\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///991b3ac1-ca79-4373-a40a-fd44c6544319\"}],\"ramUsage\":7.7,\"server\":\"blank-10\",\"moduleSequenceNumber\":641}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///2ad94bb4-841c-447f-aa6b-f4635b1a2d1f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///2ad94bb4-841c-447f-aa6b-f4635b1a2d1f\"}],\"ramUsage\":1.7,\"server\":\"blank-10\",\"moduleSequenceNumber\":642}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///b7a035e7-5f75-4fc9-aa60-c66454373f50\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///b7a035e7-5f75-4fc9-aa60-c66454373f50\"}],\"ramUsage\":1.75,\"server\":\"blank-10\",\"moduleSequenceNumber\":643}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///e316213d-2936-444d-b3ae-22cd10b825f1\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///e316213d-2936-444d-b3ae-22cd10b825f1\"}],\"ramUsage\":1.75,\"server\":\"blank-10\",\"moduleSequenceNumber\":644}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-11\",\"httpPortOpen\":false,\"ip\":\"3.9.1.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///f471b598-8a59-4cf5-9cb0-3dbcf7efda52\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///f471b598-8a59-4cf5-9cb0-3dbcf7efda52\"}],\"ramUsage\":7.7,\"server\":\"blank-11\",\"moduleSequenceNumber\":645}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-11\",\"moduleSequenceNumber\":646}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///53c68245-f24c-4268-8998-d69ef4bcc72d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///53c68245-f24c-4268-8998-d69ef4bcc72d\"}],\"ramUsage\":1.75,\"server\":\"blank-11\",\"moduleSequenceNumber\":647}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///b79b319e-15d4-420c-a91b-343bd34d7c9b\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///b79b319e-15d4-420c-a91b-343bd34d7c9b\"}],\"ramUsage\":1.75,\"server\":\"blank-11\",\"moduleSequenceNumber\":648}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-12\",\"httpPortOpen\":false,\"ip\":\"67.9.6.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///3e5f89a8-8f81-489d-8b37-f59d056185d9\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///3e5f89a8-8f81-489d-8b37-f59d056185d9\"}],\"ramUsage\":7.7,\"server\":\"blank-12\",\"moduleSequenceNumber\":649}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///bf5bfc53-8d9a-469c-9de5-6586076f3527\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///bf5bfc53-8d9a-469c-9de5-6586076f3527\"}],\"ramUsage\":1.7,\"server\":\"blank-12\",\"moduleSequenceNumber\":650}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///8371b472-6235-4bdf-994d-2703a9229243\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///8371b472-6235-4bdf-994d-2703a9229243\"}],\"ramUsage\":1.75,\"server\":\"blank-12\",\"moduleSequenceNumber\":651}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///133eec09-a89c-49ed-aa86-fdd732ed9363\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///133eec09-a89c-49ed-aa86-fdd732ed9363\"}],\"ramUsage\":1.75,\"server\":\"blank-12\",\"moduleSequenceNumber\":652}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-13\",\"httpPortOpen\":false,\"ip\":\"15.0.7.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///40754cd9-3a0e-4df2-901f-e98c423c36de\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///40754cd9-3a0e-4df2-901f-e98c423c36de\"}],\"ramUsage\":7.7,\"server\":\"blank-13\",\"moduleSequenceNumber\":653}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///44d999da-fee2-4059-9dbf-4232fdd18eaa\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///44d999da-fee2-4059-9dbf-4232fdd18eaa\"}],\"ramUsage\":1.7,\"server\":\"blank-13\",\"moduleSequenceNumber\":654}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///72bf6cb7-44f7-4b83-a335-db39d5d7d0bc\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///72bf6cb7-44f7-4b83-a335-db39d5d7d0bc\"}],\"ramUsage\":1.75,\"server\":\"blank-13\",\"moduleSequenceNumber\":655}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///efed6011-bb2b-47b9-b60d-b5400f761632\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///efed6011-bb2b-47b9-b60d-b5400f761632\"}],\"ramUsage\":1.75,\"server\":\"blank-13\",\"moduleSequenceNumber\":656}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-14\",\"httpPortOpen\":false,\"ip\":\"93.4.1.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c0eac615-35cc-4a45-9497-e18c03af3598\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c0eac615-35cc-4a45-9497-e18c03af3598\"}],\"ramUsage\":7.7,\"server\":\"blank-14\",\"moduleSequenceNumber\":657}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///335e882b-2fdc-4c0e-a0da-1afc4e7ef038\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///335e882b-2fdc-4c0e-a0da-1afc4e7ef038\"}],\"ramUsage\":1.7,\"server\":\"blank-14\",\"moduleSequenceNumber\":658}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///29440097-f49b-44e0-8505-5eb01be6cb75\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///29440097-f49b-44e0-8505-5eb01be6cb75\"}],\"ramUsage\":1.75,\"server\":\"blank-14\",\"moduleSequenceNumber\":659}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///f10d5b1a-734c-4380-ba2f-65a05b3e1dc0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///f10d5b1a-734c-4380-ba2f-65a05b3e1dc0\"}],\"ramUsage\":1.75,\"server\":\"blank-14\",\"moduleSequenceNumber\":660}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-15\",\"httpPortOpen\":false,\"ip\":\"23.8.8.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c7135767-afaa-4012-9336-a65e2e8f1c09\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///c7135767-afaa-4012-9336-a65e2e8f1c09\"}],\"ramUsage\":7.7,\"server\":\"blank-15\",\"moduleSequenceNumber\":661}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///7047edd6-98b8-4b54-9849-598a4cef6c2a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///7047edd6-98b8-4b54-9849-598a4cef6c2a\"}],\"ramUsage\":1.7,\"server\":\"blank-15\",\"moduleSequenceNumber\":662}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///19a132e8-4db5-4a75-a7ad-2c2e56257a69\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///19a132e8-4db5-4a75-a7ad-2c2e56257a69\"}],\"ramUsage\":1.75,\"server\":\"blank-15\",\"moduleSequenceNumber\":663}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///121641db-952a-4462-b4a5-a4db57856bbe\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///121641db-952a-4462-b4a5-a4db57856bbe\"}],\"ramUsage\":1.75,\"server\":\"blank-15\",\"moduleSequenceNumber\":664}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-16\",\"httpPortOpen\":false,\"ip\":\"2.7.2.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///17f82657-0427-474c-aa11-b56483842815\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///17f82657-0427-474c-aa11-b56483842815\"}],\"ramUsage\":7.7,\"server\":\"blank-16\",\"moduleSequenceNumber\":665}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-16\",\"moduleSequenceNumber\":666}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///81bf4e57-0928-499c-a0da-3e997aec0309\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///81bf4e57-0928-499c-a0da-3e997aec0309\"}],\"ramUsage\":1.75,\"server\":\"blank-16\",\"moduleSequenceNumber\":667}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///1eef5560-1cb6-4679-91f0-68dfd649b131\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///1eef5560-1cb6-4679-91f0-68dfd649b131\"}],\"ramUsage\":1.75,\"server\":\"blank-16\",\"moduleSequenceNumber\":668}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-17\",\"httpPortOpen\":false,\"ip\":\"46.3.0.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///74f304ac-2043-4f72-9d42-95827f243604\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///74f304ac-2043-4f72-9d42-95827f243604\"}],\"ramUsage\":7.7,\"server\":\"blank-17\",\"moduleSequenceNumber\":669}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///bb911653-364c-4da0-a057-a10f6838b1f0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///bb911653-364c-4da0-a057-a10f6838b1f0\"}],\"ramUsage\":1.7,\"server\":\"blank-17\",\"moduleSequenceNumber\":670}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///6d10c544-78b5-4f6a-baca-1ccc8ee98a25\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///6d10c544-78b5-4f6a-baca-1ccc8ee98a25\"}],\"ramUsage\":1.75,\"server\":\"blank-17\",\"moduleSequenceNumber\":671}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///0fc3efe5-fc3b-4acb-9a06-70b9984e5105\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///0fc3efe5-fc3b-4acb-9a06-70b9984e5105\"}],\"ramUsage\":1.75,\"server\":\"blank-17\",\"moduleSequenceNumber\":672}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-18\",\"httpPortOpen\":false,\"ip\":\"80.7.9.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///9601be79-51ec-42f7-9f24-e03607841116\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///9601be79-51ec-42f7-9f24-e03607841116\"}],\"ramUsage\":7.7,\"server\":\"blank-18\",\"moduleSequenceNumber\":673}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///0ea2a3e4-f7ed-40ae-811e-fa4898ce8dd4\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///0ea2a3e4-f7ed-40ae-811e-fa4898ce8dd4\"}],\"ramUsage\":1.7,\"server\":\"blank-18\",\"moduleSequenceNumber\":674}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///a4bc8966-8e40-4cec-98a1-332dfc49d169\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///a4bc8966-8e40-4cec-98a1-332dfc49d169\"}],\"ramUsage\":1.75,\"server\":\"blank-18\",\"moduleSequenceNumber\":675}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///4334af67-0306-4394-83d2-ce907c5a9986\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///4334af67-0306-4394-83d2-ce907c5a9986\"}],\"ramUsage\":1.75,\"server\":\"blank-18\",\"moduleSequenceNumber\":676}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-19\",\"httpPortOpen\":false,\"ip\":\"30.5.8.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///2586f206-757a-4cf8-b68d-bd1b0ccc1b10\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///2586f206-757a-4cf8-b68d-bd1b0ccc1b10\"}],\"ramUsage\":7.7,\"server\":\"blank-19\",\"moduleSequenceNumber\":677}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-19\",\"moduleSequenceNumber\":678}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///fd8030d2-1d90-422d-82be-21e61f706d12\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///fd8030d2-1d90-422d-82be-21e61f706d12\"}],\"ramUsage\":1.75,\"server\":\"blank-19\",\"moduleSequenceNumber\":679}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///b1998368-7d85-4e3a-b168-592d4830d4f6\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///b1998368-7d85-4e3a-b168-592d4830d4f6\"}],\"ramUsage\":1.75,\"server\":\"blank-19\",\"moduleSequenceNumber\":680}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-20\",\"httpPortOpen\":false,\"ip\":\"22.0.0.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///97a3c12e-f765-40ad-b4ce-a376bd3ba0e0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///97a3c12e-f765-40ad-b4ce-a376bd3ba0e0\"}],\"ramUsage\":7.7,\"server\":\"blank-20\",\"moduleSequenceNumber\":681}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///03e21c7a-bfb9-44fc-b08e-0e41d23294ed\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///03e21c7a-bfb9-44fc-b08e-0e41d23294ed\"}],\"ramUsage\":1.7,\"server\":\"blank-20\",\"moduleSequenceNumber\":682}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///74f4f8f6-3ea2-4c26-8c23-dabe4f9d8876\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///74f4f8f6-3ea2-4c26-8c23-dabe4f9d8876\"}],\"ramUsage\":1.75,\"server\":\"blank-20\",\"moduleSequenceNumber\":683}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///a82f155b-d953-4853-bc71-fc796b102afe\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///a82f155b-d953-4853-bc71-fc796b102afe\"}],\"ramUsage\":1.75,\"server\":\"blank-20\",\"moduleSequenceNumber\":684}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-21\",\"httpPortOpen\":false,\"ip\":\"63.5.6.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///0dc2b234-ba9d-4dfa-922b-1b33eed6f22f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///0dc2b234-ba9d-4dfa-922b-1b33eed6f22f\"}],\"ramUsage\":7.7,\"server\":\"blank-21\",\"moduleSequenceNumber\":685}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///fbb0638a-dcd0-44f0-9131-6161dfdbf7fb\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///fbb0638a-dcd0-44f0-9131-6161dfdbf7fb\"}],\"ramUsage\":1.7,\"server\":\"blank-21\",\"moduleSequenceNumber\":686}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///7d1da8b3-a068-45d5-917b-349c0ed682d3\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///7d1da8b3-a068-45d5-917b-349c0ed682d3\"}],\"ramUsage\":1.75,\"server\":\"blank-21\",\"moduleSequenceNumber\":687}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///4ab13642-2dec-4329-bb45-611cc1dc378f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///4ab13642-2dec-4329-bb45-611cc1dc378f\"}],\"ramUsage\":1.75,\"server\":\"blank-21\",\"moduleSequenceNumber\":688}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-22\",\"httpPortOpen\":false,\"ip\":\"56.6.2.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///6aef6e41-4b75-496e-b7ed-8dbdef2b8ea2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///6aef6e41-4b75-496e-b7ed-8dbdef2b8ea2\"}],\"ramUsage\":7.7,\"server\":\"blank-22\",\"moduleSequenceNumber\":689}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///b41da3b2-3d1d-4a19-8372-5adc8984a44d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///b41da3b2-3d1d-4a19-8372-5adc8984a44d\"}],\"ramUsage\":1.7,\"server\":\"blank-22\",\"moduleSequenceNumber\":690}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///25e2e040-7249-40cd-a287-5d4f30ba0c28\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///25e2e040-7249-40cd-a287-5d4f30ba0c28\"}],\"ramUsage\":1.75,\"server\":\"blank-22\",\"moduleSequenceNumber\":691}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///6dfce26e-d94b-44aa-a2ff-422320307b05\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///6dfce26e-d94b-44aa-a2ff-422320307b05\"}],\"ramUsage\":1.75,\"server\":\"blank-22\",\"moduleSequenceNumber\":692}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-23\",\"httpPortOpen\":false,\"ip\":\"83.2.8.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///2a5c0774-5e4c-48fc-9a29-d7efbc1eec45\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///2a5c0774-5e4c-48fc-9a29-d7efbc1eec45\"}],\"ramUsage\":7.7,\"server\":\"blank-23\",\"moduleSequenceNumber\":693}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"blob:file:///955b650e-d50a-47a2-a5e0-1d63ba4f049a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerHack.js\",\"url\":\"blob:file:///955b650e-d50a-47a2-a5e0-1d63ba4f049a\"}],\"ramUsage\":1.7,\"server\":\"blank-23\",\"moduleSequenceNumber\":694}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///b3c61137-7fbb-4c5c-9cb4-cd128be39df0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///b3c61137-7fbb-4c5c-9cb4-cd128be39df0\"}],\"ramUsage\":1.75,\"server\":\"blank-23\",\"moduleSequenceNumber\":695}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///ccb23565-33d1-4163-ac65-b3d4956d3fa7\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///ccb23565-33d1-4163-ac65-b3d4956d3fa7\"}],\"ramUsage\":1.75,\"server\":\"blank-23\",\"moduleSequenceNumber\":696}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blank-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blank-24\",\"httpPortOpen\":false,\"ip\":\"96.7.1.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let server = ns.getHostname();\\r\\n    let target = ns.args[0];\\r\\n\\r\\n    let missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n    let gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n\\r\\n    while (gMult > 1 || missingSec > 0) {\\r\\n        if (gMult === Infinity) {\\r\\n            gMult = 1000;\\r\\n        }\\r\\n        let gThreads = Math.ceil(ns.growthAnalyze(target, gMult));\\r\\n        let extraSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n        let wThreads = Math.ceil((missingSec + extraSec) / 0.05);\\r\\n\\r\\n        if (gThreads > 0) {\\r\\n            ns.exec('workerGrow.js', server, gThreads, target);\\r\\n        }\\r\\n        if (wThreads > 0) {\\r\\n            ns.exec('workerWeaken.js', server, wThreads, target);\\r\\n        }\\r\\n        await ns.sleep(Math.max(ns.getGrowTime(target), ns.getWeakenTime(target)) + 100);\\r\\n\\r\\n        missingSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        gMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n    }\\r\\n\\r\\n    let gThreads = ns.growthAnalyze(target, 2.1);\\r\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, ns.getServerMaxMoney(target) * 0.5));\\r\\n\\r\\n    let gSec = ns.growthAnalyzeSecurity(gThreads);\\r\\n    let hSec = ns.hackAnalyzeSecurity(hThreads);\\r\\n\\r\\n    let wThreads = Math.ceil((gSec + hSec + 5) / 0.05);\\r\\n\\r\\n    let wTimer = ns.getWeakenTime(target);\\r\\n\\r\\n    let wDelay = 0;\\r\\n    let gDelay = Math.floor(wTimer - ns.getGrowTime(target)) - 100;\\r\\n    let hDelay = Math.floor(wTimer - ns.getHackTime(target)) - 200;\\r\\n\\r\\n    let ramForRun = ns.getScriptRam('workerWeaken.js') + ns.getScriptRam('workerGrow.js') + ns.getScriptRam('workerHack.js');\\r\\n    let freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\r\\n    let maxConcurrentRuns = Math.floor(freeRam / ramForRun);\\r\\n    let timeBetweenRuns = Math.max(Math.ceil(wTimer / maxConcurrentRuns), 500);\\r\\n\\r\\n    let changer = 0;\\r\\n    while (true) {\\r\\n        ns.exec('workerWeaken.js', server, wThreads, target, wDelay, changer);\\r\\n        ns.exec('workerGrow.js', server, gThreads, target, gDelay, changer);\\r\\n        ns.exec('workerHack.js', server, hThreads, target, hDelay, changer);\\r\\n        changer++;\\r\\n        await ns.sleep(timeBetweenRuns);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///ea9dbe7a-58b6-4106-a4a1-549d0dcd172c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"zoomHacker.js\",\"url\":\"blob:file:///ea9dbe7a-58b6-4106-a4a1-549d0dcd172c\"}],\"ramUsage\":7.7,\"server\":\"blank-24\",\"moduleSequenceNumber\":697}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.hack(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blank-24\",\"moduleSequenceNumber\":698}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.grow(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///d4b9ce2a-1a06-4a94-9bcc-87b121a34dfc\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerGrow.js\",\"url\":\"blob:file:///d4b9ce2a-1a06-4a94-9bcc-87b121a34dfc\"}],\"ramUsage\":1.75,\"server\":\"blank-24\",\"moduleSequenceNumber\":699}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0]);\\n    if (ns.args[1]) {\\n        await ns.sleep(ns.args[1]);\\n    }\\n}\\n\",\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///f5b0770b-93fb-4d33-942a-f81c1eb45688\",\"module\":\"\",\"dependencies\":[{\"filename\":\"workerWeaken.js\",\"url\":\"blob:file:///f5b0770b-93fb-4d33-942a-f81c1eb45688\"}],\"ramUsage\":1.75,\"server\":\"blank-24\",\"moduleSequenceNumber\":700}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":162227.807655312,\"favor\":102,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":24.6145,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1078901.9718991658}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":114.4522,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":365218.93148152897}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":147.479,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":429437.6235779175}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":32.1556,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":98.6877,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":46.0861,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":34.0817,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":126.3819,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Volhaven\",\"playerReputation\":63330.600379393785}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":11.3769,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":40.3791,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":88.4779,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":323616.2604872306}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":115.1676,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":397104.7512758583}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":128.725,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":386422.9478352883}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"sync\":\"run syncScripts.js\",\"do\":\"run handler.js\",\"start\":\"run gameManager.js\",\"reSync\":\"run syncScripts.js restart\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":72354.95309637106,\"lastPrice\":72248.55843909555,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":false,\"otlkMag\":22.491379267188943,\"otlkMagForecast\":27.221636799665305,\"cap\":672134647,\"spreadPerc\":0.1,\"shareTxForMovement\":60392,\"shareTxUntilMovement\":60392,\"totalShares\":88200000,\"maxShares\":17600000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":85951.60290360397,\"lastPrice\":86069.54688777911,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":false,\"otlkMag\":14.94525719220075,\"otlkMagForecast\":33.46618888516884,\"cap\":769306758,\"spreadPerc\":0.1,\"shareTxForMovement\":49502,\"shareTxUntilMovement\":49502,\"totalShares\":73000000,\"maxShares\":14600000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":25550.905608663295,\"lastPrice\":25490.33362094032,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":16.181400919497957,\"otlkMagForecast\":34.693950394220565,\"cap\":343694566,\"spreadPerc\":0.4,\"shareTxForMovement\":85135,\"shareTxUntilMovement\":85135,\"totalShares\":77900000,\"maxShares\":15600000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":91889.49435257785,\"lastPrice\":92089.39636935893,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":13.936286648484407,\"otlkMagForecast\":65.41441143999131,\"cap\":169064072,\"spreadPerc\":0.2,\"shareTxForMovement\":83964,\"shareTxUntilMovement\":83964,\"totalShares\":71400000,\"maxShares\":14300000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":24128.50324942325,\"lastPrice\":24180.18632068835,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":11.249202814313794,\"otlkMagForecast\":38.201161926103076,\"cap\":917994383,\"spreadPerc\":0.4,\"shareTxForMovement\":44814,\"shareTxUntilMovement\":44814,\"totalShares\":42400000,\"maxShares\":8500000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":8264436.819723826,\"lastPrice\":8294862.75284991,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.1,\"b\":false,\"otlkMag\":14.434210046556531,\"otlkMagForecast\":34.306284917792574,\"cap\":1132715580,\"spreadPerc\":0.9,\"shareTxForMovement\":74381,\"shareTxUntilMovement\":74381,\"totalShares\":39100000,\"maxShares\":7800000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":116566.37768484764,\"lastPrice\":116266.74843329075,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":14.574528991172972,\"otlkMagForecast\":64.34943338582273,\"cap\":358919068,\"spreadPerc\":0.6,\"shareTxForMovement\":85019,\"shareTxUntilMovement\":85019,\"totalShares\":84600000,\"maxShares\":16900000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":259835.23469031087,\"lastPrice\":260913.5795818245,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":true,\"otlkMag\":21.58034381011174,\"otlkMagForecast\":69.23697776049515,\"cap\":53448832,\"spreadPerc\":1,\"shareTxForMovement\":55622,\"shareTxUntilMovement\":55622,\"totalShares\":63000000,\"maxShares\":12600000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":5757.41280101065,\"lastPrice\":5741.271989527458,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":true,\"otlkMag\":7.243641054289021,\"otlkMagForecast\":56.578644936679375,\"cap\":359341508,\"spreadPerc\":0.7,\"shareTxForMovement\":85395,\"shareTxUntilMovement\":85395,\"totalShares\":54000000,\"maxShares\":10800000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":9842.502867440478,\"lastPrice\":9862.926603850712,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":6.607408770831924,\"otlkMagForecast\":44.54016583604798,\"cap\":204391767,\"spreadPerc\":0.3,\"shareTxForMovement\":66427,\"shareTxUntilMovement\":66427,\"totalShares\":100800000,\"maxShares\":20200000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":18606.426078289605,\"lastPrice\":18570.99796250563,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":8.873576673338848,\"otlkMagForecast\":59.77082830254192,\"cap\":172400802,\"spreadPerc\":0.4,\"shareTxForMovement\":75159,\"shareTxUntilMovement\":75159,\"totalShares\":54700000,\"maxShares\":10900000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":10065.571375754798,\"lastPrice\":10039.027965921923,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":1.6031208855530736,\"otlkMagForecast\":52.65817706280687,\"cap\":227503628,\"spreadPerc\":0.7,\"shareTxForMovement\":86198,\"shareTxUntilMovement\":86198,\"totalShares\":78900000,\"maxShares\":15800000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":18378.8296139199,\"lastPrice\":18420.657384909944,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":6.2548678490716165,\"otlkMagForecast\":56.30890819513439,\"cap\":251657590,\"spreadPerc\":0.7,\"shareTxForMovement\":99336,\"shareTxUntilMovement\":99336,\"totalShares\":43600000,\"maxShares\":8700000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":21508.166257034976,\"lastPrice\":21551.357190723687,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":11.240760113403356,\"otlkMagForecast\":38.6944665192813,\"cap\":443242679,\"spreadPerc\":0.4,\"shareTxForMovement\":72176,\"shareTxUntilMovement\":72176,\"totalShares\":32400000,\"maxShares\":6500000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":32696.186226619735,\"lastPrice\":32757.466837033346,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":5.2089937730137255,\"otlkMagForecast\":56.04114647206537,\"cap\":145559565,\"spreadPerc\":1,\"shareTxForMovement\":46669,\"shareTxUntilMovement\":46669,\"totalShares\":53300000,\"maxShares\":10700000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":7375.595467331633,\"lastPrice\":7393.121894593841,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":5.100903539615702,\"otlkMagForecast\":54.558003160978004,\"cap\":221333583,\"spreadPerc\":0.8,\"shareTxForMovement\":89240,\"shareTxUntilMovement\":89240,\"totalShares\":42400000,\"maxShares\":8500000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":4993.1625719404265,\"lastPrice\":4979.829126586562,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":6.670346763419175,\"otlkMagForecast\":57.054342661701455,\"cap\":297703436,\"spreadPerc\":0.9,\"shareTxForMovement\":69252,\"shareTxUntilMovement\":69252,\"totalShares\":45600000,\"maxShares\":9100000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":43476.58379014399,\"lastPrice\":43565.34499811815,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":14.126422770292796,\"otlkMagForecast\":64.03581002050369,\"cap\":435357768,\"spreadPerc\":0.4,\"shareTxForMovement\":107739,\"shareTxUntilMovement\":107739,\"totalShares\":29700000,\"maxShares\":5900000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":34877.04092127163,\"lastPrice\":34794.360028200645,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":7.144771641151363,\"otlkMagForecast\":45.03432070248806,\"cap\":408149618,\"spreadPerc\":0.9,\"shareTxForMovement\":43789,\"shareTxUntilMovement\":43789,\"totalShares\":22500000,\"maxShares\":4500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":497.1061262090599,\"lastPrice\":501.3486789807022,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.55,\"b\":true,\"otlkMag\":12.312867708316936,\"otlkMagForecast\":61.859242110677904,\"cap\":145054778,\"spreadPerc\":0.6,\"shareTxForMovement\":37616,\"shareTxUntilMovement\":37616,\"totalShares\":70500000,\"maxShares\":14100000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":8097.425817698522,\"lastPrice\":8066.379190165753,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.15,\"b\":true,\"otlkMag\":9.137191027992339,\"otlkMagForecast\":59.83379857961447,\"cap\":125770467,\"spreadPerc\":0.8,\"shareTxForMovement\":66618,\"shareTxUntilMovement\":66618,\"totalShares\":56400000,\"maxShares\":11300000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":11841.876292337456,\"lastPrice\":11815.776073738578,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":5.0316354203906615,\"otlkMagForecast\":55.947195482117465,\"cap\":52314262,\"spreadPerc\":0.8,\"shareTxForMovement\":92419,\"shareTxUntilMovement\":92419,\"totalShares\":29700000,\"maxShares\":5900000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":1961.107722435411,\"lastPrice\":1972.7908578237189,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.78,\"b\":true,\"otlkMag\":5.170091442849581,\"otlkMagForecast\":53.3865384538378,\"cap\":73865209,\"spreadPerc\":1.5,\"shareTxForMovement\":73277,\"shareTxUntilMovement\":73277,\"totalShares\":30100000,\"maxShares\":6000000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":3241.1077735371764,\"lastPrice\":3224.380853180007,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.55,\"b\":true,\"otlkMag\":7.0297969983113076,\"otlkMagForecast\":58.35304715731525,\"cap\":80921893,\"spreadPerc\":0.6,\"shareTxForMovement\":78125,\"shareTxUntilMovement\":78125,\"totalShares\":47600000,\"maxShares\":9500000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":2485.8536113456385,\"lastPrice\":2479.2155352151226,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":6.169598322753918,\"otlkMagForecast\":55.13035196721572,\"cap\":84275733,\"spreadPerc\":0.5,\"shareTxForMovement\":103650,\"shareTxUntilMovement\":103650,\"totalShares\":54200000,\"maxShares\":10800000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":9.362725256445104,\"lastPrice\":9.286577044882046,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.45,\"b\":false,\"otlkMag\":26.478912449269757,\"otlkMagForecast\":14.68692857185049,\"cap\":15272652,\"spreadPerc\":1.4,\"shareTxForMovement\":31329,\"shareTxUntilMovement\":31329,\"totalShares\":22200000,\"maxShares\":4400000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":789.4201135135688,\"lastPrice\":786.786845598081,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":false,\"otlkMag\":9.203435006051922,\"otlkMagForecast\":43.14915116990707,\"cap\":20300455,\"spreadPerc\":1.3,\"shareTxForMovement\":54307,\"shareTxUntilMovement\":54307,\"totalShares\":51100000,\"maxShares\":10200000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1353.0787205451059,\"lastPrice\":1356.339290466108,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":7.501654939713504,\"otlkMagForecast\":56.90673359700546,\"cap\":27061871,\"spreadPerc\":0.7,\"shareTxForMovement\":133317,\"shareTxUntilMovement\":133317,\"totalShares\":33500000,\"maxShares\":6700000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2951.7952718104543,\"lastPrice\":2939.7915939533773,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":false,\"otlkMag\":20.253929480404548,\"otlkMagForecast\":29.544992807928697,\"cap\":51002286,\"spreadPerc\":1.2,\"shareTxForMovement\":67563,\"shareTxUntilMovement\":67563,\"totalShares\":11300000,\"maxShares\":2300000}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":98.82178163829403,\"lastPrice\":99.68171338960374,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.6,\"b\":false,\"otlkMag\":16.711469439602077,\"otlkMagForecast\":33.79001867086798,\"cap\":10924522,\"spreadPerc\":0.7,\"shareTxForMovement\":32538,\"shareTxUntilMovement\":32538,\"totalShares\":34700000,\"maxShares\":6900000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":17235.01186724016,\"lastPrice\":17316.345216517704,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.41,\"b\":false,\"otlkMag\":11.53463351971761,\"otlkMagForecast\":38.459783473570404,\"cap\":8556124,\"spreadPerc\":1.1,\"shareTxForMovement\":49894,\"shareTxUntilMovement\":49894,\"totalShares\":136600000,\"maxShares\":27300000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":65263.66606750945,\"lastPrice\":65416.56605968005,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":6.200652099054573,\"otlkMagForecast\":56.13158468214952,\"cap\":726452909,\"spreadPerc\":0.7,\"shareTxForMovement\":144636,\"shareTxUntilMovement\":144636,\"totalShares\":12100000,\"maxShares\":2400000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":54162.890543143876,\"lastPrice\":54057.95428894315,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":12.76464031516124,\"otlkMagForecast\":61.805500166758854,\"cap\":203830816,\"spreadPerc\":0.3,\"shareTxForMovement\":132082,\"shareTxUntilMovement\":132082,\"totalShares\":21600000,\"maxShares\":4300000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":72220,\"lastUpdate\":1640233197906,\"ticksUntilCycle\":43}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":18,\"MonacoVim\":false,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"7","AllGangsSave":"","LastExportBonus":"1639930542672","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}